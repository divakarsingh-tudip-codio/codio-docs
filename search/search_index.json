{
    "docs": [
        {
            "location": "/", 
            "text": "Getting Started and Onboarding Materials\n\n\nTeaching with Codio\n\n\n\n\n\n\n\n\n\n\nLink to Onboarding Guide\n\n\nlinks to teaching with codio\n\n\n\n\n\n\nLink to Demo Guides and Assessments\n\n\nmore links to teaching with codio\n\n\n\n\n\n\nLink to Debugger\n\n\nand more links to teaching with codio\n\n\n\n\n\n\nOther videos to help get started\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntegrations\n\n\nStudent help\n\n\n\n\n\n\n\n\n\n\nlinks to integration videos maybe also links to docs and remove below\n\n\nanything additional to existing studentview page?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHelp Center\n\n\n\n\n\n\n\n\n\n\nlink to various sections in Intercom for the question based articles/videos etc\n\n\n\n\n\n\ninclude a 'ask a question' that goes to help@codio.com that we will get into Intercom to be able to answer!\n\n\n\n\n\n\n\n\nFull technical details and documentation\n\n\n\n\n\n\n\n\nThe Codio Dashboard\n\n\nProjects and Templates\n\n\n\n\n\n\n\n\n\n\nSupport queries\n\n\nProjects\n\n\n\n\n\n\nNavigating Codio\n\n\nStack templates\n\n\n\n\n\n\nDashboard overview\n\n\nStarter pack templates\n\n\n\n\n\n\nOrganization management\n\n\n\n\n\n\n\n\nAccount settings and info\n\n\n\n\n\n\n\n\nDesktop Application\n\n\nIf you\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBoxes and the IDE\n\n\nCourses\n\n\n\n\n\n\n\n\n\n\nIntroduction\n\n\nUnderstanding Courses\n\n\n\n\n\n\nBasic IDE features\n\n\nIntegrating with LTI 1.1 systems\n\n\n\n\n\n\nAdvanced IDE features\n\n\nIntegrating with LTI 1.3 systems\n\n\n\n\n\n\nAccessing a Box\n\n\nCreating Course Content\n\n\n\n\n\n\nPanels and Tabs\n\n\nContent Authoring with Guides\n\n\n\n\n\n\nCode editing\n\n\nGuides settings and page actions\n\n\n\n\n\n\nIDE tools - Deployment\n\n\nCodio Assessments\n\n\n\n\n\n\nIDE tools - Guides\n\n\nAssessments Library\n\n\n\n\n\n\nIDE tools - Phonegap\n\n\nGrading and accessing student projects\n\n\n\n\n\n\nIDE tools - Remote SSH terminal access\n\n\nPlagiarism checker\n\n\n\n\n\n\nSettings\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResources\n\n\nBooks\n\n\n\n\n\n\n\n\n\n\nSchools course content\n\n\nIntroduction\n\n\n\n\n\n\nHow are courses organised\n\n\nLimitations and restrictions\n\n\n\n\n\n\nFinding courses\n\n\nWorking with books\n\n\n\n\n\n\nCourse visibilty\n\n\nStudent Help\n\n\n\n\n\n\nWhat content do you recommend?\n\n\nThe student view\n\n\n\n\n\n\nCurriculum map for the OCR GCSE (J275)\n\n\n\n\n\n\n\n\nCurriculum map for the OCR GSCE (J276)\n\n\n\n\n\n\n\n\nCurriculum Map for High School Computer Science course\n\n\n\n\n\n\n\n\nCurriculum Map for Middle School Computer Science course Grades 6-8\n\n\n\n\n\n\n\n\nFlode\n\n\n\n\n\n\n\n\nCrunch, an alternative to Little Man Computer\n\n\n\n\n\n\n\n\nLexikon\n\n\n\n\n\n\n\n\nTkinter\n\n\n\n\n\n\n\n\nChangelog", 
            "title": "Home"
        }, 
        {
            "location": "/students/", 
            "text": "The student dashboard is the main \u2018home\u2019 area that you use to navigate Codio. This is what it looks like:\n\n\n\n\nFrom the \nCourses\n screen you can view your classes, courses, projects and help by using the links on the left hand panel.\n\n\n\n\nSTUDY\n links give your students access to courses\n\n\nBUILD\n links give your students access to project tools and our professional IDE\n\n\nHELP\n links give your students access to our customer service team and our help documentation.\n\n\n\n\nJoining a course\n\uf0c1\n\n\nIf your course is working with an LMS platform such as Canvas, Blackboard, Moodle etc. then you will access Codio directly from it.\n\n\nIf you are not using and LMS then your instructor should have given you one of the following ways of joining.\n\n\n\n\n\n\nIf your teacher has sent you an Invitation URL, copy/paste that into your browser.\n\n\n\n\n\n\nIf your teacher has sent you a 2 word token, go to \nJoin a course\n button on our website and enter the token.\n\n\n\n\n\n\n\nTo access your course after this point, log in to your Codio account and go to the Coursesarea\n\n\nCourses\n\uf0c1\n\n\nThe \nCourses\n area is where you can see the modules and assignments that have been assigned to you. Pinned assignments will be displayed more prominently at the top of the page.\n\n\nBelow is an example of a student\u2019s *\nCourses\n area:\n\n\n\nUsing the \nCourses\n area, you can easily re-open the assignment you were last working on, or start/open any of the other assignments that have been assigned to you. You  start or open assignments using the navigation buttons displayed.\n\n\nCreating projects\n\uf0c1\n\n\nYou can create your own projects using the web-based IDE in Codio. To access the project area, use the \nBUILD\n links in the left-hand navigation panel.\n\n\nTo learn about how to create projects, jump to the main \nCreating Project\n section.\n\n\nDyslexia support\n\uf0c1\n\n\nCodio has a built in dyslexia support feature. If you have students who would prefer to view their screen in dyslexia support mode they should do the following:\n\n\n\n\n\n\nOpen the assignment they are working on.\n\n\n\n\n\n\nFrom the menu at the top right of the screen, select the setting icon (the gear icon), then \nTheme\n, then select the \nDyslexic\n option.\n\n\n\n\n\n\n\nThe screen should now display like this:\n\n\n\n\n\n\n\nForgotten passwords\n\uf0c1\n\n\nIf you have forgotten your password, you should use the \nlost password\n link on the log-in page to reset your password automatically via email. If you do not have access to the email address you used in creating your Codio account, contact your teachers who can reset the password for you.\n\n\nIf you wish to change your password (you should also do this if you forgot your password and/or it was reset by your teacher) follow these steps:\n\n\n\n\nClick on your name and profile picture (bottom left of screen)\n\n\n\n\n\n\n\n\nFrom the options along the top of the page, choose \nAccount\n\n\n\n\n\n\n\n\nAbout halfway down the \nAccount\n page is the \nChange Password\n area. The student should enter their new password, and then click \nUpdate password\n.\n\n\n\n\n\n\nPlay mode\n\uf0c1\n\n\nTo see your content running, you need to \nPlay\n it. If the content does not automatically start or if you have closed it, go to \nTools-\nGuide-\nPlay\n menu option or click the \nStart Guide\n icon in the file tree:\n\n\n\n\nAt this point the panel layout is set up automatically according to the layout specified in the first section and it will be displayed.\n\n\nPlayer Options\n\uf0c1\n\n\n\n\nWithin the player various options can be controlled by the user\n\n\n\n\n\n\nNavigation Buttons\n allows the user to navigate forward/backward in the content.\n\n\n\n\n\n\nSettings\n allows the user to change the Theme (light/dyslexic), Mark as Complete, change the font size, reset both the theme and fonts and to restore the current files (see below). See \nDyslexia Support\n section\n\n\n\n\nShow/Hide Section List Hamburger Ico\n allows the user to show/hide the section list.\n\n\n\n\n\n\nGuides\n\uf0c1\n\n\nRestore Current Files\n\uf0c1\n\n\nSometimes you might make changes to your work that you don\u2019t like or that you don\u2019t want to keep.\n\n\nThe easiest way to get rid of these is to restore the original files in a assignment.\nTo do this:\n\n\n\n\nOpen the assignment you are working on. In the top right, choose the settings icon, and then \nRestore current files\n\n\n\n\n\n\nIf this does not achieve what you need, you can contact your class instructor who can reset the assignment back to its default state and you can start again as new.\n\n\n\n\nCompleting assignments\n\uf0c1\n\n\nWhen you have completed a assignment you can mark it as completed if the content author has not disabled this option for you. This can be done from either:\n\n\n\n\nIn the settings (click the gear icon)\n\n\n\n\n\n\n\n\n\n\nFrom the last page in the guide.\n\n\n\n\n\n\nGoing to \nEducation\nMark as Completed\n menu item in the assignment\n\n\n\n\n\n\nIf there are any assessments in the assignment that have not been submitted, details of these will be shown to allow you to review them before completing the assignment.\n\n\nIf you mark a assignment as complete in error, contact your class instructor/teacher who can reset the status of the assignment so you can access it again.\n\n\nLexikon\n\uf0c1\n\n\nThe Codio Lexikon is an integrated help system that lets you lookup information on a variety of languages and topics quickly and easily. Having access to concise reference information as new topics are learned is extremely useful and saves having to search the web and separate the wheat from the chaff!\n\n\nYou can access the Lexikon at any time from within a coding project or assignment if enabled by the author or by going to \nTools\nLexicon\n in the top menu. If the top menu is restricted for you, the default keyboard shortcut is \nCtrl+Alt+L\n. If that does not open the Lexicon, contact your class instructor/teacher for assistance.\n\n\nThe Lexikon is organized into Topics. We currently have added\n\n\n\n\nCrunch\n\n\nCSS\n\n\nHTML\n\n\nJavascript\n\n\nLinux\n\n\nCyberSecurity\n\n\n\n\n\n\nGrade Feedback\n\uf0c1\n\n\nWhen your work has been graded and released by your class instructor, you will see 'graded' showing in your dashboard\n\n\n\n\nTo view details of the grades given, either open the project and go to \nEducation\nFeedback\n in the top menu\n\n\n\n\nor click on the 'Grade' field showing in the dashboard\n\n\n\n\nClick on 'details' for the assessment and you can drill down to see more information on that assessment\n\n\n\n\nNote\n If the project has been marked as completed, you can click on the 'completed' button to access the grade feedback but if you wish to view the project, click on the name of the project on the left hand side. As the assignment is completed you will not be able to edit anything but can view the content\n\n\nIf your organisation uses an LMS system a URL of the grading detail will also be passed to your LMS that you can access from the grading area in the LMS.", 
            "title": "Students"
        }, 
        {
            "location": "/students/#joining-a-course", 
            "text": "If your course is working with an LMS platform such as Canvas, Blackboard, Moodle etc. then you will access Codio directly from it.  If you are not using and LMS then your instructor should have given you one of the following ways of joining.    If your teacher has sent you an Invitation URL, copy/paste that into your browser.    If your teacher has sent you a 2 word token, go to  Join a course  button on our website and enter the token.    To access your course after this point, log in to your Codio account and go to the Coursesarea", 
            "title": "Joining a course"
        }, 
        {
            "location": "/students/#courses", 
            "text": "The  Courses  area is where you can see the modules and assignments that have been assigned to you. Pinned assignments will be displayed more prominently at the top of the page.  Below is an example of a student\u2019s * Courses  area:  Using the  Courses  area, you can easily re-open the assignment you were last working on, or start/open any of the other assignments that have been assigned to you. You  start or open assignments using the navigation buttons displayed.", 
            "title": "Courses"
        }, 
        {
            "location": "/students/#creating-projects", 
            "text": "You can create your own projects using the web-based IDE in Codio. To access the project area, use the  BUILD  links in the left-hand navigation panel.  To learn about how to create projects, jump to the main  Creating Project  section.", 
            "title": "Creating projects"
        }, 
        {
            "location": "/students/#dyslexia-support", 
            "text": "Codio has a built in dyslexia support feature. If you have students who would prefer to view their screen in dyslexia support mode they should do the following:    Open the assignment they are working on.    From the menu at the top right of the screen, select the setting icon (the gear icon), then  Theme , then select the  Dyslexic  option.    The screen should now display like this:", 
            "title": "Dyslexia support"
        }, 
        {
            "location": "/students/#forgotten-passwords", 
            "text": "If you have forgotten your password, you should use the  lost password  link on the log-in page to reset your password automatically via email. If you do not have access to the email address you used in creating your Codio account, contact your teachers who can reset the password for you.  If you wish to change your password (you should also do this if you forgot your password and/or it was reset by your teacher) follow these steps:   Click on your name and profile picture (bottom left of screen)     From the options along the top of the page, choose  Account     About halfway down the  Account  page is the  Change Password  area. The student should enter their new password, and then click  Update password .", 
            "title": "Forgotten passwords"
        }, 
        {
            "location": "/students/#play-mode", 
            "text": "To see your content running, you need to  Play  it. If the content does not automatically start or if you have closed it, go to  Tools- Guide- Play  menu option or click the  Start Guide  icon in the file tree:   At this point the panel layout is set up automatically according to the layout specified in the first section and it will be displayed.", 
            "title": "Play mode"
        }, 
        {
            "location": "/students/#player-options", 
            "text": "Within the player various options can be controlled by the user    Navigation Buttons  allows the user to navigate forward/backward in the content.    Settings  allows the user to change the Theme (light/dyslexic), Mark as Complete, change the font size, reset both the theme and fonts and to restore the current files (see below). See  Dyslexia Support  section   Show/Hide Section List Hamburger Ico  allows the user to show/hide the section list.", 
            "title": "Player Options"
        }, 
        {
            "location": "/students/#guides", 
            "text": "", 
            "title": "Guides"
        }, 
        {
            "location": "/students/#restore-current-files", 
            "text": "Sometimes you might make changes to your work that you don\u2019t like or that you don\u2019t want to keep.  The easiest way to get rid of these is to restore the original files in a assignment.\nTo do this:   Open the assignment you are working on. In the top right, choose the settings icon, and then  Restore current files    If this does not achieve what you need, you can contact your class instructor who can reset the assignment back to its default state and you can start again as new.", 
            "title": "Restore Current Files"
        }, 
        {
            "location": "/students/#completing-assignments", 
            "text": "When you have completed a assignment you can mark it as completed if the content author has not disabled this option for you. This can be done from either:   In the settings (click the gear icon)      From the last page in the guide.    Going to  Education Mark as Completed  menu item in the assignment    If there are any assessments in the assignment that have not been submitted, details of these will be shown to allow you to review them before completing the assignment.  If you mark a assignment as complete in error, contact your class instructor/teacher who can reset the status of the assignment so you can access it again.", 
            "title": "Completing assignments"
        }, 
        {
            "location": "/students/#lexikon", 
            "text": "The Codio Lexikon is an integrated help system that lets you lookup information on a variety of languages and topics quickly and easily. Having access to concise reference information as new topics are learned is extremely useful and saves having to search the web and separate the wheat from the chaff!  You can access the Lexikon at any time from within a coding project or assignment if enabled by the author or by going to  Tools Lexicon  in the top menu. If the top menu is restricted for you, the default keyboard shortcut is  Ctrl+Alt+L . If that does not open the Lexicon, contact your class instructor/teacher for assistance.  The Lexikon is organized into Topics. We currently have added   Crunch  CSS  HTML  Javascript  Linux  CyberSecurity", 
            "title": "Lexikon"
        }, 
        {
            "location": "/students/#grade-feedback", 
            "text": "When your work has been graded and released by your class instructor, you will see 'graded' showing in your dashboard   To view details of the grades given, either open the project and go to  Education Feedback  in the top menu   or click on the 'Grade' field showing in the dashboard   Click on 'details' for the assessment and you can drill down to see more information on that assessment   Note  If the project has been marked as completed, you can click on the 'completed' button to access the grade feedback but if you wish to view the project, click on the name of the project on the left hand side. As the assignment is completed you will not be able to edit anything but can view the content  If your organisation uses an LMS system a URL of the grading detail will also be passed to your LMS that you can access from the grading area in the LMS.", 
            "title": "Grade Feedback"
        }, 
        {
            "location": "/courses/assessments-library/", 
            "text": "Overview\n\uf0c1\n\n\nAn \nassessment library\n in Codio is a collection of existing assessment items.\n\n\nYou can \ncreate assessments libraries within your organization\n. You can organize your libraries by course number, programming language, department, etc.\n\n\nYou can \nuse existing assessments from Codio's Global library.\n\n\nTo navigate through an assessments library, \nyou filter based on tags.\n The Codio assessments library has a number of tags - your organization can come up with a convention that works for you!\n\n\nAdding Questions to an Assessments Library\n\uf0c1\n\n\nOnce an assessment is added to an assessment library, it can be accessed later and added to a project or course with ease. Adding assessments to an assessment library has a few simple steps. Before you begin, you or someone else in your organization with \nadminstrator access\n needs to \ncreate an organization assessments library\n if you do not already have one.\n\n\n\n\n\n\nThe first step is creating the assessment. It is similar to how you \nnormally create an assessment\n with a few things you should note:\n\n\n\n\n\n\nAssessments on pages set to the \n1 Panel without tree\n layout\n will be saved with a \nsimple layout\n.\n\n\n\n\n\n\nUse \nthe metadata tab\n to tag your assessment so it appears when the \nassessments library is searched\n\n\n\n\n\n\nUse \nthe files tab\n to ensure all dependent files such as grading scripts, images used in the guides pane, etc. are associated with the assessment so it works properly when added from the library\n\n\n\n\n\n\nOnce the assessment is written, we can add it to an assessment library. Click the \n\"SAVE IN LIBRARY\"\n button on the bottom right of the window:\n   \n\n\n\n\nA window will appear with a dropdown menu of all the available libraries that the question can be added to. Choose the desired library from the dropdown menu.\n\n\n\n\n\n\n\n\nOnce the desired library has been chosen, press the blue \n\"SELECT\"\n button.\n\n\n\n\n\n\nThe assessment has now been added to the chosen library.\n\n\nIf you get an error message, you may not have \nwrite access to your organization's assessment library\n.\n\n\nOnce a question has been added, \nfollow these steps to update the assessment in your organization's library.\n\n\nAdditionally, you can \ndisconnnect questions\n!\n\n\nCodio's Global Assessments Library\n\uf0c1\n\n\nThe Global Assessments Library is an assessment library that all Codio users have read-only access to. The library contains auto-graded assessment questions covering a wide variety of topics, difficulties, and assessment types. We are currently populating it with assessments in:\n\n\n\n\nJava\n\n\nC / C++\n\n\nPython\n\n\nJavaScript\n\n\nData Structures (in Java)\n\n\n\n\nRead more about assessment libraries \nhere\n.\n\n\nFeatures of Global Assessments Library\n\uf0c1\n\n\nAll assessments in the global library are auto-graded, there is no manual grading necessary. All assessments also contain example solutions and answer explanations for the student. Some will also have teacher notes to help better convey the intended learning objective of the assessment.\n\n\nUsing the Global Assessments Library\n\uf0c1\n\n\nUsing the library is similar to using any other assessment library in your organization. Simply go to the assessments drop-down in the guides editor, click on \"Assessment Library\", and choose the \nCodio Main\n under \"Library Name\".\n\n\nYou can filter through the different assessments\n by:\n- Programming language\n- Assessment type\n- Category (topic-level)\n- Content (sub-topic level)\n- Learning Objective (in SWBAT form - \"Students will be able to....\")\n- Bloom's Taxonomy level\n   \n\n\nHere is an example of the tags in a Codio library assessment:\n\n\n\nAssessment type is auto-detected and not manually specified.\n\n\nYou can even get a small preview of the question text!\n Once you find a suitable assessment, \nadd it to your project\n.\n\n\nRemixing questions from the Global Assessments Library\n\uf0c1\n\n\nIf you like an assessment in our assessments library but want to add your own twist to it, you can \ndisconnect the question from the library\n.\n\n\nThen, simply modify the assessment as you'd like!\n\n\nAdditionally, you can then \nadd your version of the assessments to your organization's assessment library\n.\n\n\nBugs\n\uf0c1\n\n\nIf you find a bug or error with an assessment, please \ncontact us\n\n\nUnlinking and Updating Assessments from Library\n\uf0c1\n\n\nUpdating an Existing Assessment\n\uf0c1\n\n\n\n\n\n\nClick on the \"Add Assessment Icon\"\n\n\n\n\n\n\n\nClick on the assessment you want to edit in the \"Edit assessments\" portion of the dropdown menu\n\n\n\n\n\n\n\nChange whatever it is you want to change\n\n\n\n\n\n\nClick \"Update In Library\"\n\n\n\n\n\n\n\n\n\nUnlinking an Assessment\n\uf0c1\n\n\n\n\n\n\nClick on the \"Add Assessment Icon\"\n\n\n\n\n\n\n\nClick on the assessment you want to disconnect in the \"Edit assessments\" portion of the dropdown menu\n\n\n\n\n\n\n\nClick \"disconnect\"\n\n\n\n\n\n\n\nCodio will display a message confirming that the assessment has been successfully disconnected from the appropriate library. You should also notice the link icon is no longer present next to the assessment in the \"Edit assessments\" portion of the dropdown menu\n\n\n\n\n\n\nSearching and Adding questions from the Assessments Library\n\uf0c1\n\n\nRegardless of whether you are using \nCodio's global assessments library\n or \nyour organization's assessment library\n, the steps for searching for and adding assessments from them are the same.\n\n\nSearching Assessments Library\n\uf0c1\n\n\nFrom the assessments drop down, select the \"Assessment Library\" option.\n\n\n\nUse the drop down on the left to indicate which assessments library you want to search.\n\n\n\nTo narrow down the assessments, input a tag and value pair. For example, you can search by the \"Programming Language\" (tag) and indicate you want \"Python\" (value) questions. The search is \nnot\n case-sensitive. You will notice that Codio tries to help you by presenting auto-complete suggestions.\n\n\n\nOnce you have completed inputting the tag and value pair, you will get a list of results.\n\n\n\nYou can add as many additional tag and value pairs to narrow your results by clicking the plus sign to the right of the vale box.\n\n\n\nTo navigate through your search results, you can use the scroll bar on the right to scroll through assessments on a page. Once you reach the bottom, you can use the page navigation in the top left to move backwards/forwards a page or jump to a certain page of results.\n\n\n\n\n\nPreviewing Question\n\uf0c1\n\n\nYou can get a sneak peek of the question text by clicking within a listed assessment's white box. The question text will appear below the listed value/tag pairs.\n\n\n\nIf you preview a second question, the first preview will collapse.\n\n\n\nSaving Searches\n\uf0c1\n\n\nIf you find a set of particular search parameters you want to save, you can do so by simply clicking the \"Save\" button to the right of the tags and values boxes.\n\n\n\nA prompt will ask you for the \"Search Name\" - this is how it will be listed in your saved search list.\n\n\n\nUsing Saved Searches\n\uf0c1\n\n\nTo use a saved search, you click on the \"Saved\" drop down to the right of the tags and values boxes. Select the search you want to use by clicking on it's name.\n\n\n\nYou will then be able to see all the parameters you saved previously. You can edit these search parameters freely without changing your saved search.\n\n\n\nIf you find a set of search parameters you like better, you can simply save the new set and delete your old search.\n\n\nDeleting Saved Searches\n\uf0c1\n\n\nTo remove a saved search, you click on the \"Saved\" drop down to the right of the tags and values boxes. Delete the saved search by clicking on the red \"x\" to the right of it's name.\n\n\n\n\n\nAdding Questions from Assessments Library\n\uf0c1\n\n\nOnce you have found an assessment you would like to add to, simply press the \"Select\" button to the right.\n\n\n\nPlease note the difference between layouts to know how it will be inserted.\n\n\n\n\nSimple vs Complex Layouts\n\uf0c1\n\n\nIn Codio's assessments libraries, there are two types of layouts:\n\n\n\n\n\n\nSimple\n  An assessment in the library has a \nsimple\n layout if it was added with the \n1 Panel without tree\n layout\n. When adding a simple layout question to your project or book, the assessment will be inserted into the current page at your cursor's location.\n\n\n\n\n\n\nComplex\n  An assessment in the library has a \ncomplex\n layout if it was added with any layout besides 1 Panel without tree. When adding a complex layout question to your project or book, the assessment will be inserted on a new page directly after the current page.\n\n\n\n\n\n\nHow do you tell the difference?\n\uf0c1\n\n\nWhen you are filtering the assessments library, you will notice the \"complex layout\" icon on assessments saved with a complex layout. All assessments without the icon are simple layout assessments.", 
            "title": "Assessments Library"
        }, 
        {
            "location": "/courses/assessments-library/#overview", 
            "text": "An  assessment library  in Codio is a collection of existing assessment items.  You can  create assessments libraries within your organization . You can organize your libraries by course number, programming language, department, etc.  You can  use existing assessments from Codio's Global library.  To navigate through an assessments library,  you filter based on tags.  The Codio assessments library has a number of tags - your organization can come up with a convention that works for you!", 
            "title": "Overview"
        }, 
        {
            "location": "/courses/assessments-library/#adding-questions-to-an-assessments-library", 
            "text": "Once an assessment is added to an assessment library, it can be accessed later and added to a project or course with ease. Adding assessments to an assessment library has a few simple steps. Before you begin, you or someone else in your organization with  adminstrator access  needs to  create an organization assessments library  if you do not already have one.    The first step is creating the assessment. It is similar to how you  normally create an assessment  with a few things you should note:    Assessments on pages set to the  1 Panel without tree  layout  will be saved with a  simple layout .    Use  the metadata tab  to tag your assessment so it appears when the  assessments library is searched    Use  the files tab  to ensure all dependent files such as grading scripts, images used in the guides pane, etc. are associated with the assessment so it works properly when added from the library    Once the assessment is written, we can add it to an assessment library. Click the  \"SAVE IN LIBRARY\"  button on the bottom right of the window:\n      A window will appear with a dropdown menu of all the available libraries that the question can be added to. Choose the desired library from the dropdown menu.     Once the desired library has been chosen, press the blue  \"SELECT\"  button.    The assessment has now been added to the chosen library.  If you get an error message, you may not have  write access to your organization's assessment library .  Once a question has been added,  follow these steps to update the assessment in your organization's library.  Additionally, you can  disconnnect questions !", 
            "title": "Adding Questions to an Assessments Library"
        }, 
        {
            "location": "/courses/assessments-library/#codios-global-assessments-library", 
            "text": "The Global Assessments Library is an assessment library that all Codio users have read-only access to. The library contains auto-graded assessment questions covering a wide variety of topics, difficulties, and assessment types. We are currently populating it with assessments in:   Java  C / C++  Python  JavaScript  Data Structures (in Java)   Read more about assessment libraries  here .", 
            "title": "Codio's Global Assessments Library"
        }, 
        {
            "location": "/courses/assessments-library/#features-of-global-assessments-library", 
            "text": "All assessments in the global library are auto-graded, there is no manual grading necessary. All assessments also contain example solutions and answer explanations for the student. Some will also have teacher notes to help better convey the intended learning objective of the assessment.", 
            "title": "Features of Global Assessments Library"
        }, 
        {
            "location": "/courses/assessments-library/#using-the-global-assessments-library", 
            "text": "Using the library is similar to using any other assessment library in your organization. Simply go to the assessments drop-down in the guides editor, click on \"Assessment Library\", and choose the  Codio Main  under \"Library Name\".  You can filter through the different assessments  by:\n- Programming language\n- Assessment type\n- Category (topic-level)\n- Content (sub-topic level)\n- Learning Objective (in SWBAT form - \"Students will be able to....\")\n- Bloom's Taxonomy level\n     Here is an example of the tags in a Codio library assessment:  Assessment type is auto-detected and not manually specified.  You can even get a small preview of the question text!  Once you find a suitable assessment,  add it to your project .", 
            "title": "Using the Global Assessments Library"
        }, 
        {
            "location": "/courses/assessments-library/#remixing-questions-from-the-global-assessments-library", 
            "text": "If you like an assessment in our assessments library but want to add your own twist to it, you can  disconnect the question from the library .  Then, simply modify the assessment as you'd like!  Additionally, you can then  add your version of the assessments to your organization's assessment library .", 
            "title": "Remixing questions from the Global Assessments Library"
        }, 
        {
            "location": "/courses/assessments-library/#bugs", 
            "text": "If you find a bug or error with an assessment, please  contact us", 
            "title": "Bugs"
        }, 
        {
            "location": "/courses/assessments-library/#unlinking-and-updating-assessments-from-library", 
            "text": "", 
            "title": "Unlinking and Updating Assessments from Library"
        }, 
        {
            "location": "/courses/assessments-library/#updating-an-existing-assessment", 
            "text": "Click on the \"Add Assessment Icon\"    Click on the assessment you want to edit in the \"Edit assessments\" portion of the dropdown menu    Change whatever it is you want to change    Click \"Update In Library\"", 
            "title": "Updating an Existing Assessment"
        }, 
        {
            "location": "/courses/assessments-library/#unlinking-an-assessment", 
            "text": "Click on the \"Add Assessment Icon\"    Click on the assessment you want to disconnect in the \"Edit assessments\" portion of the dropdown menu    Click \"disconnect\"    Codio will display a message confirming that the assessment has been successfully disconnected from the appropriate library. You should also notice the link icon is no longer present next to the assessment in the \"Edit assessments\" portion of the dropdown menu", 
            "title": "Unlinking an Assessment"
        }, 
        {
            "location": "/courses/assessments-library/#searching-and-adding-questions-from-the-assessments-library", 
            "text": "Regardless of whether you are using  Codio's global assessments library  or  your organization's assessment library , the steps for searching for and adding assessments from them are the same.", 
            "title": "Searching and Adding questions from the Assessments Library"
        }, 
        {
            "location": "/courses/assessments-library/#searching-assessments-library", 
            "text": "From the assessments drop down, select the \"Assessment Library\" option.  Use the drop down on the left to indicate which assessments library you want to search.  To narrow down the assessments, input a tag and value pair. For example, you can search by the \"Programming Language\" (tag) and indicate you want \"Python\" (value) questions. The search is  not  case-sensitive. You will notice that Codio tries to help you by presenting auto-complete suggestions.  Once you have completed inputting the tag and value pair, you will get a list of results.  You can add as many additional tag and value pairs to narrow your results by clicking the plus sign to the right of the vale box.  To navigate through your search results, you can use the scroll bar on the right to scroll through assessments on a page. Once you reach the bottom, you can use the page navigation in the top left to move backwards/forwards a page or jump to a certain page of results.", 
            "title": "Searching Assessments Library"
        }, 
        {
            "location": "/courses/assessments-library/#previewing-question", 
            "text": "You can get a sneak peek of the question text by clicking within a listed assessment's white box. The question text will appear below the listed value/tag pairs.  If you preview a second question, the first preview will collapse.", 
            "title": "Previewing Question"
        }, 
        {
            "location": "/courses/assessments-library/#saving-searches", 
            "text": "If you find a set of particular search parameters you want to save, you can do so by simply clicking the \"Save\" button to the right of the tags and values boxes.  A prompt will ask you for the \"Search Name\" - this is how it will be listed in your saved search list.", 
            "title": "Saving Searches"
        }, 
        {
            "location": "/courses/assessments-library/#using-saved-searches", 
            "text": "To use a saved search, you click on the \"Saved\" drop down to the right of the tags and values boxes. Select the search you want to use by clicking on it's name.  You will then be able to see all the parameters you saved previously. You can edit these search parameters freely without changing your saved search.  If you find a set of search parameters you like better, you can simply save the new set and delete your old search.", 
            "title": "Using Saved Searches"
        }, 
        {
            "location": "/courses/assessments-library/#deleting-saved-searches", 
            "text": "To remove a saved search, you click on the \"Saved\" drop down to the right of the tags and values boxes. Delete the saved search by clicking on the red \"x\" to the right of it's name.", 
            "title": "Deleting Saved Searches"
        }, 
        {
            "location": "/courses/assessments-library/#adding-questions-from-assessments-library", 
            "text": "Once you have found an assessment you would like to add to, simply press the \"Select\" button to the right.  Please note the difference between layouts to know how it will be inserted.", 
            "title": "Adding Questions from Assessments Library"
        }, 
        {
            "location": "/courses/assessments-library/#simple-vs-complex-layouts", 
            "text": "In Codio's assessments libraries, there are two types of layouts:    Simple\n  An assessment in the library has a  simple  layout if it was added with the  1 Panel without tree  layout . When adding a simple layout question to your project or book, the assessment will be inserted into the current page at your cursor's location.    Complex\n  An assessment in the library has a  complex  layout if it was added with any layout besides 1 Panel without tree. When adding a complex layout question to your project or book, the assessment will be inserted on a new page directly after the current page.", 
            "title": "Simple vs Complex Layouts"
        }, 
        {
            "location": "/courses/assessments-library/#how-do-you-tell-the-difference", 
            "text": "When you are filtering the assessments library, you will notice the \"complex layout\" icon on assessments saved with a complex layout. All assessments without the icon are simple layout assessments.", 
            "title": "How do you tell the difference?"
        }, 
        {
            "location": "/courses/assessments/", 
            "text": "Assessments\n\uf0c1\n\n\nAssessments allow you to ask any number of automatically or manually graded questions within your content.\n\n\n\n\nThey allow a student or a teacher to assess how well they are grasping the subject matter.\n\n\nMany assessment types are automatically graded, saving precious time for teachers and giving students instant feedback.\n\n\nA wide range of assessment types (automatic code tests, multiple choice tests, fill in the blanks, drop-down selection, free text responses and project grading) allow the broadest possible measurement of a student's progress.\n\n\nIn course scenarios, all assessment responses feed through to a teacher dashboard.\n\n\nFor multiple choice tests, fill in the blanks and drop-down selection assessment types, each individual assessment can only be answered once, giving a true reflection of understanding rather than being able to carry on answering until the correct answer is achieved.\n\n\nWhen an answer is submitted, the correct answer is shown to the student by default, but this can be disabled if required.\n\n\n\n\nYou can choose to weave assessments into the tutorial materials or to create dedicated assessments content.\n\n\nExample Project\n\uf0c1\n\n\nhttps://codio.com/codio-units/java-example is a project that you can \nfork\n into your own Codio account and shows you how to create code tests and setup automatic marking. We would also recommend that you check out our \nGuides Cheat Sheet\n and \nUse Pack\n to create into your Codio account to review.\n\n\nSubmit buttons and marking as complete\n\uf0c1\n\n\nThere are two concepts that are important to understand in order to control the way the student submits questions and the way a student marks a project as complete. \nClick here\n for a detailed discussion on these.\n\n\nAdding a new assessment\n\uf0c1\n\n\nTo add a new assessment, you should first position the cursor in your content where you want it to appear. Then, from the assessments drop-down, select the type of assessment you wish to insert.\n\n\n\n\nEditing an existing assessment\n\uf0c1\n\n\nIf you want to edit an existing assessment on the page you are viewing, you should press the settings button in the guide toolbar. In the lower section of the drop down list you will find any assessments on that page. Select one to edit.\n\n\nDeleting an assessment\n\uf0c1\n\n\nSelect the page where your assessment is located. Then remove the assessment token from the page. As assessment token looks like this.\n\n\n\n\nOnce deleted, an assessment remains hidden. To fully remove it, press the \nSettings\n icon in the authoring toolbar then select the \nAssessments\n tab. All assessments present in the current project are listed. Deleted ones are highlighted in red. Press the red \nx\n button to delete it.\n\n\nAutograding when a student completes a assignment\n\uf0c1\n\n\nCodio allows you to run a special auto-grading script as soon as an assignment is completed by the student. This special type of assessment is managed from the assignment settings page in a course. \nClick here\n for details.\n\n\n\n\nSecure Script execution\n\uf0c1\n\n\nIf you store assessment scripts in the \n.guides/secure\n folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data. Codio ensures that only the original project author is able to access this folder but when it is assigned to Students as an assignment, it is not accessible in any way and the script runs in an ephemeral container isolated from the students assignment.\nAny other scripts in the assignment that are not in this folder can be accessible to the students\n\n\nStudent submission options\n\uf0c1\n\n\nThere are two important settings that control\n\n\n\n\nthe way that a student submits individual questions and\n\n\nthe way a student notifies the course instructors that a assignment is completed.\n\n\n\n\nThe submit button\n\uf0c1\n\n\nUntil November 20th 2017, each assessment has a submit button beneath the assessment. Once pressed, the answer is autograded, if an MCQ, Fill In The Blank or Free Text question. If the \nOne attempt only\n setting is selected for the assessment, then the student will be warned that they will not be able to resubmit. If this setting is not selected, then they will be able to resubmit a response.\n\n\nIt is now possible to suppress the submit button entirely. The advantage of this is that students do not need to worry about the effect of pressing the button. They can simply provide a response and then move on to other assessments or pages in the guide.\n\n\nTo suppress the use of the \nSubmit\n button, you should go to the global settings tab in the guide and disable \nUse submit buttons\n.\n\n\n\n\nOnce the project is marked as complete (see below) then all assessment responses are fully submitted automatically. You should make sure that all students' work is marked as complete either manually or using the automated mark as complete option on the final deadline.\n\n\nMark as Complete\n\uf0c1\n\n\nTo suppress the student \nMark as complete\n action, you should go to the guide global settings (see above screenshot) and disable \nUse mark as complete\n.\n\n\nA student can proactively mark as assignment as complete. This can trigger a \nassignment level autograde script\n and it is also flagged up in the teacher dashboard against that student.\n\n\nThe drawback to using the student driven mark as complete option is that once students mark a assignment as complete, they are no longer able to make changes to the assignment, including answering assessments. The advantage is that instructors are able to grade those students' work ahead of a deadline.\n\n\nIf the project has been marked as completed, students can click on the 'completed' button to access the grade feedback but if they wish to view the project, direct them to click on the name of the project on the left hand side. As the assignment is completed they will not be able to edit anything but can view the content.\n\n\nIt is possible to disable the student side mark as complete option entirely so students do not need to think about doing it. It also means that instructors don't get requests from students to re-enable the assignment if they submitted by mistake or decided they want to change something.\n\n\nIf you do not want students to mark as complete, then you will likely want to do one of the following\n\n\n\n\nOnce an arbitrary deadline has been reached, after which you want to start grading student work, you should \nmark all students' work as complete\n from the assignment actions area.\n\n\nSet an \nend of assignment date\n and specify that once the date is reached, the students' work should be marked as complete automatically.\n\n\n\n\nPenalty deadlines\n\uf0c1\n\n\nAnother powerful feature that you may want to use is \nPenalty deadlines\n. This allows you to specify deadlines, before the final grading deadline, where a percentage deduction of the final grade is made. \nClick here\n for more information on managing penalty deadlines.\n\n\nStandard code tests\n\uf0c1\n\n\nIf you want to write code tests that give you in depth control by allowing you to write your own code to execute tests, then please \nrefer to the advanced code tests\n. The majority of code tests, however, can be produced without writing any code at all using standard code tests.\n\n\nStandard code tests are dialog driven. You specify input data and the expected output for that input data. Codio will then execute the student code, supply the specified input data, and compare the expected output to the student code's actual output.\n\n\nSample Starter Pack\n\uf0c1\n\n\nThere is a Starter Pack project that you can add to your account. \nClick here to install\n and \nUse Pack\n to create into your Codio account to review. This project contains examples for all assessment types as well as a guides authoring cheat sheet.\n\n\nBasic setup\n\uf0c1\n\n\nThe configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files.\n\n\nGeneral\n\uf0c1\n\n\nThe screenshot below shows the basic configuration fields for the \nGeneral\n section:\n\n\n\n\n\n\nName\n is a short name that describes the test. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the \nShow Name\n switch next to the name field.\n\n\nInstructions\n is the actual text that should be shown to the user, written in Markdown.\n\n\n\n\nExecution\n\uf0c1\n\n\nThe screenshot below shows the configuration fields for the \nExecution\n section:\n\n\n\n\n\n\nCommand\n is the command that executes the student code itself. If you store the assessment scripts in the \n.guides/secure\n folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data.\n\n\nPre-exec command\n is the command to execute before you run each test. This will normally be a compile command.\n\n\n\n\nGrading\n\uf0c1\n\n\nThe screenshot below shows the configuration fields for the \nGrading\n section:\n\n\n\n\n\n\nPoints\n is the score given to the student if the code test passes. You can enter any positive numeric value.\n\n\nCase insensitive\n tells Codio to make a case insensitive output comparison. By default, the comparison will be case sensitive.\n\n\nIgnore white space\n tells Codio to strip out any white space characters (carriage return, line feed, tab etc.) from both the expected output and the student output. It can be very helpful to enable this as it means you do not have to be over precise when specifying the fields or instructions. More information is provided below.\n\n\nSubstring match\n tells Codio to perform a substring match when comparing the expected output to the student output.\n\n\nOne attempt only\n allows the assessment to run only once. The student will be warned that they will not be able to resubmit. You would usually want to provide a \nrun button\n or other means for the user to test the code before running the actual assessment.\n\n\nShow expected answer\n will show the students the expected output when they have submitted an answer for the question. To suppress this, flip the switch.\n\n\nAnswer and rationale\n is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened using the \nTODO\nOpen as Teacher\n method. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the \nShow Answer and Rationale to Student\n switch below the guidance field.\n\n\n\n\n\n\nMetadata\n\uf0c1\n\n\n\n\nThe Metadata section contains fields that further describe the current assessment using a variety of factors:\n\n\n\n\nBloom's Level\n: The options for this field correspond to the general levels of \nBloom's Taxonomy\n, which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment.\n\n\nLearning Objectives\n:  What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \n\"SWBAT follow the flow of recursive execution\"\n.\n\n\nTags\n: In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, \nContent\n and \nProgramming Language\n, are required. To add your own tags, click \nAdd Tag\n and populate their names and values in the empty input boxes at the bottom.\n\n\n\n\n\n\nFiles\n\uf0c1\n\n\nSometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an \nAdvanced Code Test\n, your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included.\n\n\n\n\nTo mark a file to be included with the assessment, simply locate it in the file tree under \nProject files\n and tick the checkbox next to its name. Ticked files will appear under \nAdditional content\n.\n\n\nCheating opportunities\n\uf0c1\n\n\nIf you show the expected output and allow multiple attempts, students may figure out that all they need to do is run the test, look at the expected output and then write the required output data. To avoid this, we recommend that you create one standard code assessment that shows expected inputs and outputs so the student can test. You award no points for this assessment.\n\n\nYou then would create a second assessment that does not show expected output and allows only a single attempt. This way, the student will not know what input data is being passed in and does not have another opportunity to modify their code and re-run the assessment.\n\n\nSpecifying inputs and outputs\n\uf0c1\n\n\nThe final step in configuring an assessment is to set up the inputs and outputs in the \nGrading\n section. There are some important details to understand.\n\n\n\n\nThe first set of empty input/output fields is provided. You should choose between supplying your inputs as arguments or as \nstdin\n data. These are explained in more detail below.\n\n\nYou should be aware of case sensitivity and whitespace characters as explained above. Generally speaking, using the 'ignore whitespace' setting is a good idea unless you do need to be exact in this respect.\n\n\nIf you only have one input/output pair then the student could write code that simply outputs the expected output without writing any real logic. To protect against this you can create multiple input/output test cases that are run through sequentially.\n\n\nTo add a new test case, press the \nAdd item to check\n button which generates a new pair.\n\n\nInputs using arguments\n\uf0c1\n\n\nThe easiest way of supplying input data is in the \nInput - Arguments\n field as shown in the previous image. The argument data can then be read by the student code.\n\n\nInputs using \nstdin\n\uf0c1\n\n\nIf you want to handle manual data input cases such as \"Enter your Name: \" then you would use the \nInput - Stdin\n field. This field allows you to supply the data that would normally be entered manually in the console. The following is important to avoid mistakes.\n\n\n\n\nThe input data should have a new line if this would be expected in the actual program execution.\n\n\nIn the output field, you need to be aware that the prompt text that is displayed to the user appears in \nstdout\n and so it should be reflected in your output field but without the data entered by the user. Normally, you would \nnot\n put a new line in the output field between each input prompt as the new line character is generated by the user when pressing the enter key is not a part of the output.\n\n\nWe recommend that you enable the \nIgnore white space\n and \nSubstring match\n options to be more tolerant.\n\n\n\n\nThe following image shows how to format input and output fields if you are \nnot\n ignoring white space or doing a \nSubstring match\n. Note how the input field only supplied the values to be input, not the prompt itself (which is actually a part of \nstdout\n). It is important to accurately account for all spaces and carriage returns.\n\n\n\n\nThe following image shows the more tolerant approach that has the \nIgnore whitespace\n option set. In this case, we have put everything on its own line for readability. The whitespace characters will be stripped out of both the expected output and the student output at runtime.\n\n\n\n\n\n\nError Feedback\n\uf0c1\n\n\nTo provide extended feedback about issues in the student's code, you can enable this option if you wish to show feedback to the student in the event the test fails.\n\n\n\n\nAdvanced code tests\n\uf0c1\n\n\nBefore you read about the advanced code test, please be sure to check the \nstandard code tests\n as these require no coding at all, are very quick to set up and cover the majority of test cases you are likely to want to create.\n\n\nThe advanced code test assessment type allows you to write code that checks code a student has written. You can write the code in any language you like provided it can be run from the command line.\n\n\nYou should be aware that if students are able to access the command line, they are able to explore the box and find the folder where your test scripts are located. For scripting languages, this would allow them to modify the script. For compiled executables they could theoretically create their own executable and then replace yours with their own one. They would need to know how the callbacks work to succeed at this.\n\n\nIf you want to make your scripts as secure as possible, please \nclick here\n for information on secure scripts run when an assignment is marked as complete.\n\n\nSample Starter Pack\n\uf0c1\n\n\nThere is a Starter Pack project that you can add to your account. \nClick here to install\n and \nUse Pack\n to create into your Codio account to review. This project contains examples for all types of auto-graded assessments as well as a Codio authoring cheat sheet.\n\n\nTest definition\n\uf0c1\n\n\nSetting up a Code Test within the Guide editor is very simple. The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files.\n\n\nGeneral\n\uf0c1\n\n\nThe screenshot below shows the basic configuration fields for the \nGeneral\n section:\n\n\n\n\n\n\nName\n is a short name that describes the test. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the \nShow Name\n switch next to the name field.\n\n\nInstructions\n is the actual text that should be shown to the user, written in Markdown.\n\n\n\n\nExecution\n\uf0c1\n\n\nYou can evaluate student code using a variety of languages and frameworks that are already supported. You can also use a custom grading script.\n\n\nSupported languages and frameworks:\n\n\n\n\nRuby\n: \nrubocop\n or \nrspec\n\n\nJava\n: \nJUnit\n or \ncheckstyle\n\n\nPython\n: \npycodestyle\n or \nUnitTest\n\n\nJavaScript\n: \njshint\n or \njslint\n\n\n\n\nUsing \npycodestyle\n\uf0c1\n\n\nBefore using the \npycodestyle\n option, \npycodestyle\n has to be installed. You may use the following commands to do so:\n\n\nsudo apt update\nsudo apt install python3-pip\nsudo python3 -m pip install pycodestyle\n\n\n\n\n\n\nTo add individual Python source files whose style should be checked, either enter their relative path to \n~/namespace\n or drag them from the Filetree into the \nAdd Case\n input box, and click \nAdd Case\n. You may add as many cases as needed. When the assessment executes, \npycodestyle\n will inspect each added file and output all styling issues that it found.\n\n\nUsing \njshint\n or \njslint\n\uf0c1\n\n\nBefore using them, \njshint\n or \njslint\n must be installed as a Node.js global package. You may use the following command to do so:\n\n\nsudo npm install -g jshint jslint\n\n\nTo add individual JavaScript source files whose style should be checked, either enter their relative path to \n~/namespace\n or drag them from the Filetree into the \nAdd Case\n input box, and click \nAdd Case\n. You may add as many cases as needed. You may also select either JSLint or JSHint in the \nLanguage Assessment Subtype\n dropdown. When the assessment executes, your choice of either \njshint\n or \njslint\n will inspect each added file and output all styling issues that it found.\n\n\nCustom\n\uf0c1\n\n\n\n\n\n\nCommand\n is the command to run to invoke your test. See the section \nTest code location\n below for more details. If you store the assessment scripts in the \n.guides/secure\n folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data.\n\n\nEnabling the \nAllow Partial Points\n switch will allow partial points to be given. See the section \nPartial Score\n lower down on this page.\n\n\nTimeout\n is the period of time (seconds) the test will run before terminating.\n\n\n\n\nGrading\n\uf0c1\n\n\n\n\n\n\nPoints\n is the score given to the student if the code test passes. You can choose any positive numeric value.\n\n\nOne attempt only\n allows the assessment to be run only once. This generally not advised unless you make it clear to the student that a failed test cannot be repeated. You should also provide a Run button in the Guide (or provide other instructions) so the user can test the code before running the actual assessment.\n\n\nAnswer and rationale\n is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened using the \nTODO\n(Open as Teacher](/classes/unitmanagement/settings-info/teachersolutions) method. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the \nShow Answer and Rationale to Student\n switch below the guidance field.\n\n\n\n\nMetadata\n\uf0c1\n\n\n\n\nThe Metadata section contains fields that further describe the current assessment using a variety of factors:\n\n\n\n\nBloom's Level\n: The options for this field correspond to the general levels of \nBloom's Taxonomy\n, which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment.\n\n\nLearning Objectives\n:  What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \n\"SWBAT follow the flow of recursive execution\"\n.\n\n\nTags\n: In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, \nContent\n and \nProgramming Language\n, are required. To add your own tags, click \nAdd Tag\n and populate their names and values in the empty input boxes at the bottom.\n\n\n\n\nFiles\n\uf0c1\n\n\nSometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an \nAdvanced Code Test\n, your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included.\n\n\n\n\nTo mark a file to be included with the assessment, simply locate it in the file tree under \nProject files\n and tick the checkbox next to its name. Ticked files will appear under \nAdditional content\n.\n\n\nTest code location\n\uf0c1\n\n\nYou can place your test code anywhere you like, but if you store the assessment scripts in the \n.guides/secure\n folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data. Another suitable location could be to to create a \n.guides/tests\n folder.\n\n\nWhen specifying a command to run, you could specify it in either of these ways (the ~/workspace folder is assumed if you do not specify a full path).\n\n\nnode .guides/tests/mytest.js\nnode /home/codio/workspace/.guides/tests/mytest.js\n\n\n\n\nThis example uses Node.js, but you can use any language you'd like.\n\n\nTest framework\n\uf0c1\n\n\nCodio provides a simple framework for communicating with the Codio authored content. When defining a test, you specify the points that should be awarded for a successful answer.\n\n\nSuccess or Failure\n\uf0c1\n\n\nTo let Codio know whether the test passed, your code should simply exit with 0. A Bash script would return with \nexit(0)\n, Node.js with \nprocess.exit(0)\n etc.\n\n\nTo indicate failure, exit with a non-zero value.\n\n\nPartial Score\n\uf0c1\n\n\nCodio also provides a way for you to award a partial score rather than the all or nothing approach described above.\n\n\nIf your test was written using a bash script, it would be done like this.\n\n\nPOINTS=5\ncurl -s \n$CODIO_PARTIAL_POINTS_URL\npoints=${POINTS}\n \n /dev/null\n\n\n\n\nA Python script might look like this.\n\n\n#!/usr/bin/env python\nimport os, requests, sys\n\npoints = 5\nurl = \n{0}\npoints={1}\n.format(os.environ['CODIO_PARTIAL_POINTS_URL'], points)\nr = requests.get(url)\n\n\n\n\nThe score you award should be any value between 0 and the maximum score you specified when defining the assessment in the Codio authoring editor.\n\n\nDisplaying information to the student\n\uf0c1\n\n\nYou can return text to the user that is shown once the test has concluded. Your test output is captured from \nstderr\n and \nstdout\n, so for Node.js, for example, \nconsole.log('Well done!!')\n would work.\n\n\nFor success, you might simply return \n'Well done!'\n. For failure, aim to provide as much explanation to the student as possible regarding why they failed.\n\n\nYou can return plain text, but if you want to format your response text, you can return HTML. To do so, make sure you enclose your HTML within \nhtml\n \n/html\n tags.\n\n\nDashboard score\n\uf0c1\n\n\nIf \nAllow Partial Points\n is disabled and your test returns 0, then Codio will give a dashboard score specified in the Points field; if it returns a non-zero value, then a score of 0 is assumed.\n\n\nIf \nAllow Partial Points\n is enabled, then Codio will give a dashboard score based on the request it received at \nCODIO_PARTIAL_POINTS_URL\n. If no request was received, then a score of 0 is assumed.\n\n\nInputs and outputs to student code\n\uf0c1\n\n\nIf your assessment requires that inputs are passed into the student code or data should be returned from the student code, then it is your responsibility to implement this. You should make it clear how the student should process your test's inputs and how to return data back to your test.\n\n\nMultiple choice\n\uf0c1\n\n\nCodio support both single and multiple response versions of MCQs.\n\n\nAssessment definition\n\uf0c1\n\n\nThe configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files.\n\n\nGeneral\n\uf0c1\n\n\n\n\n\n\nName\n is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the \nShow Name\n switch next to the name field.\n\n\nQuestion\n is the question instruction that is shown to the student.\n\n\n\n\nExecution\n\uf0c1\n\n\n\n\n\n\nThe \nMultiple Response\n slider indicates whether the user can select more than one answer, in which case check boxes are used instead of radio buttons to specify correct answers.\n\n\nAnswers\n is where you add as many individual answers as you require. To indicate the correct answer(s), toggle the sliders for multiple response or the radio button for single response.\n\n\n\n\nGrading\n\uf0c1\n\n\n\n\n\n\nShow Expected Answer\n will show the students the correct answer when they have submitted an answer for this question. To suppress this, flip the switch.\n\n\nCorrect Points\n is the score given to the student if the student makes the correct selection. You can choose any positive numeric value.\n\n\nIncorrect Points\n is the score to be deducted if the student makes an incorrect selection. Typically, this value will be 0 but you can assign any positive numeric value if you wish to penalize guessing.\n\n\nAnswer and Rationale\n is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened using the \nTODO\nOpen as Teacher\n method. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the \nShow Answer and Rationale to Student\n switch below the guidance field.\n\n\n\n\nMetadata\n\uf0c1\n\n\n\n\nThe Metadata section contains fields that further describe the current assessment using a variety of factors:\n\n\n\n\nBloom's Level\n: The options for this field correspond to the general levels of \nBloom's Taxonomy\n, which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment.\n\n\nLearning Objectives\n:  What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \n\"SWBAT follow the flow of recursive execution\"\n.\n\n\nTags\n: In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, \nContent\n and \nProgramming Language\n, are required. To add your own tags, click \nAdd Tag\n and populate their names and values in the empty input boxes at the bottom.\n\n\n\n\nFiles\n\uf0c1\n\n\nSometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an \nAdvanced Code Test\n, your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included.\n\n\n\n\nTo mark a file to be included with the assessment, simply locate it in the file tree under \nProject files\n and tick the checkbox next to its name. Ticked files will appear under \nAdditional content\n.\n\n\nOne attempt only\n\uf0c1\n\n\nCodio allows users to make their selections and move on to other content pages or assessments without actually submitting their answer. However, once the answer has been submitted, it cannot be resubmitted. This gives teachers a far clearer understanding of which students are understanding the materials properly. There is little point to tests if the student simply changes the answers until the correct one appears.\n\n\nFill in the blank\n\uf0c1\n\n\nA 'fill in the blank' question comes in two flavours.\n\n\nFree Text\n\uf0c1\n\n\nThe example below shows a typical question where the student has to complete the missing words. This is then auto-marked by the Guide as explained below.\n\n\n\n\nDrop Down\n\uf0c1\n\n\nThe example below shows a variation, where the student is given a list of possible answers and has to select the right answer from a drop down list of possible answers. This is then auto-graded as explained below.\n\n\n\n\nAssessment definition\n\uf0c1\n\n\nThe configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files.\n\n\nGeneral\n\uf0c1\n\n\n\n\n\n\nName\n is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the \nShow Name\n switch next to the name field.\n\n\nInstruction\n contains any general instructions you want to provide to the student.\n\n\n\n\nExecution\n\uf0c1\n\n\n\n\nText\n is the Markdown that you write including the correct answer specification. Below is an example of how the question should be specified.\n\n\nA prime number (or a prime) is a \nnatural\n number greater than \n1\n that has no positive divisors other than \n1\n and \nitself\n.\n\n\nFor a free text question (\nShow Possible Values\n slider to the left), Codio shows blank text fields. The student should then enter the correct text. Codio ensures that the response is case insensitive. For obvious reasons, the longer and more complex the correct answer, the easier it is for the student to make minor spelling errors that will then be scored as an incorrect answer.\n\n\nFor a drop-down question (\nShow Possible Values\n slider to the right) Codio will gather all correct values (anything within the \n \n chevrons) into a drop-down list and offer the same list in each of the answer positions.\n\n\nGrading\n\uf0c1\n\n\n\n\n\n\nPoints\n is the score given to the student if the student answers all parts of the assessment correctly. You can choose any positive numeric value. A score of 0 is given if any of the responses is incorrect.\n\n\nThe \nShow Possible Values\n switch determines whether the question is text based (the slider is gray and in the left position) or drop-down based (the slider is blue and in the right position).\n\n\nShow Expected Answer\n will show the students the correct answer when they have submitted an answer for this question. To suppress this, flip the switch.\n\n\nAnswer and Rationale\n is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened using the  \nTODO\nOpen as Teacher\n method. This guidance information can also be shown to students after they have submitted their answer and also if they reload the unit after marking it as completed. To enable this, flip the \nShow Answer and Rationale to Student\n switch below the guidance field.\n\n\n\n\nMetadata\n\uf0c1\n\n\n\n\nThe Metadata section contains fields that further describe the current assessment using a variety of factors:\n\n\n\n\nBloom's Level\n: The options for this field correspond to the general levels of \nBloom's Taxonomy\n, which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment.\n\n\nLearning Objectives\n:  What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \n\"SWBAT follow the flow of recursive execution\"\n.\n\n\nTags\n: In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, \nContent\n and \nProgramming Language\n, are required. To add your own tags, click \nAdd Tag\n and populate their names and values in the empty input boxes at the bottom.\n\n\n\n\nFiles\n\uf0c1\n\n\nSometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an \nAdvanced Code Test\n, your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included.\n\n\n\n\nTo mark a file to be included with the assessment, simply locate it in the file tree under \nProject files\n and tick the checkbox next to its name. Ticked files will appear under \nAdditional content\n.\n\n\nFree text\n\uf0c1\n\n\nFree text assessments allow students to answer questions in their own words. Teachers are then able to review and manually grade their answers.\n\n\nAssessment definition\n\uf0c1\n\n\nSetting up a free text assessment is very simple. The configuration fields for a free text assessment are split into four sections: General, Grading, Metadata, and Files.\n\n\nGeneral\n\uf0c1\n\n\n\n\n\n\nName\n is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the \nShow Name\n switch next to the name field.\n\n\nInstructions\n is the actual text that should be shown to the user, written in Markdown.\n\n\n\n\nGrading\n\uf0c1\n\n\n\n\n\n\nThe \nPoints\n field is the number of points allocated for the question. You can choose any positive numeric value. Enabling the \nAllow Partial Points\n switch will allow the teacher when grading the answer to select the points to give for the students answer.\n\n\nPreview Type\n specified the expected input by the student. Codio offers plaintext and markdown options. LaTeX is also supported. Please refer to the \nPreview type\n section below for details.\n\n\nOne Attempt Only\n can be used to restrict the student to answering the question once. If not enabled, students will be able to edit their answer until the assignment is marked as Completed.\n\n\nAnswer and Rationale\n is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened using the \nTODO\nOpen as Teacher\n method. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the \nShow Answer and Rationale to Student\n switch below the guidance field.\n\n\n\n\nMetadata\n\uf0c1\n\n\n\n\nThe Metadata section contains fields that further describe the current assessment using a variety of factors:\n\n\n\n\nBloom's Level\n: The options for this field correspond to the general levels of \nBloom's Taxonomy\n, which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment.\n\n\nLearning Objectives\n:  What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \n\"SWBAT follow the flow of recursive execution\"\n.\n\n\nTags\n: In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, \nContent\n and \nProgramming Language\n, are required. To add your own tags, click \nAdd Tag\n and populate their names and values in the empty input boxes at the bottom.\n\n\n\n\nFiles\n\uf0c1\n\n\nSometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an \nAdvanced Code Test\n, your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included.\n\n\n\n\nTo mark a file to be included with the assessment, simply locate it in the file tree under \nProject files\n and tick the checkbox next to its name. Ticked files will appear under \nAdditional content\n.\n\n\nPreview type\n\uf0c1\n\n\nThe following preview options are available. They dictate the expected input format and whether a fully rendered preview pane appears below the student input. Markdown is useful if the student wants to enter text formatting commands.\nHere is a reference for Markdown:\n\n\n\n\nDaring Fireball\n - the author of Markdown\n\n\n\n\nLaTeX is useful where you want students to enter mathematical formulae in their answers. \nClick here\n for information on LaTeX.\n\n\n\n\nPlaintext\n - the student is expected to enter ordinary text, without support for markdown formatting. There is no preview window.\n\n\nPlaintext + LaTeX\n - this expects plaintext to be entered, therefore no support for markdown with additional support for LaTeX commands. A preview pane is shown beneath so the student is able to see the rendered LaTeX output.\n\n\nMarkdown + LaTeX\n - this supports markdown input with LaTeX support. A preview pane is shown beneath so the student is able to see the rendered markdown and LaTeX output.\n\n\n\n\nCompleting a free text assessment\n\uf0c1\n\n\nIf \nOne Attempt Only\n is enabled, students will only be able to submit their answer once. If this is not enabled them students will be able to revisit the question and edit their answer until they mark the assignment as completed\n\n\n\n\nGrading free text assessments\n\uf0c1\n\n\nTo review and grade answers given by student, select the student and a list of all the assessments in the assignment are shown.\n\n\n\n\nFree text assessments are identifiable from the icon\n\n\n\n\nClick one line and you will then see the question asked of the student and the answer they submitted.\n\n\nIf the question was not set to \nAllow Partial Points\n, the teacher can select \nCorrect\n or \nIncorrect\n\n\n\n\nIf the question was set to use \nAllow Partial Points\n the teacher can select the points to give to the answer up to the maximum \nPoints\n.\n\n\n\n\nComments can also be added and will be shown to the student when grades are released. The comment field supports \nLATex\n and \nmarkdown\n with a preview area below the text area to allow the grader review the input. The comment field will autoexpand as required\n\n\n\n\nNavigating students assessments\n\uf0c1\n\n\nUsing the \n and \n buttons at the top of the assessments grading dialog you can quickly navigate either to the same assessment for other students or to other assessments for the select student\n\n\n\n\nViewing graded free text assessments\n\uf0c1\n\n\nFor any free text assessments that have been graded by a teacher in an assignment, you will see the points given and the field in the \nCorrect\n column checked.\n\n\n\n\nAutograde Free text\n\uf0c1\n\n\nThe Autograde Free text assessment is similar to the \nfree text\n assessment but includes a field for a command line to execute a script allowing autograding.\n\n\nThe answer will be passed to the script as \nstdin\n.\n\n\nAssessment definition\n\uf0c1\n\n\nSetting up an assessment is very simple. The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files.\n\n\nGeneral\n\uf0c1\n\n\n\n\n\n\nName\n is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the \nShow Name\n switch next to the name field.\n\n\nInstructions\n is the actual text that should be shown to the user, written in Markdown.\n\n\n\n\nExecution\n\uf0c1\n\n\n\n\n\n\nCommand\n is the command to execute a script to autograde. If you store the assessment scripts in the \n.guides/secure\n folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data.\n\n\nTimeout\n is the time to abort the script from executing in the event of a problem.\n\n\n\n\nGrading\n\uf0c1\n\n\n\n\n\n\nThe \nPoints\n field is the number of points allocated for the question. You can choose any positive numeric value. Enabling the \nAllow Partial Points\n switch will allow the teacher when grading the answer to select the points to give for the students answer.\n\n\nPreview Type\n specified the expected input by the student. Codio offers plaintext and markdown options. Latex is also supported. Please refer to the \nPreview type\n section below for details.\n\n\nOne Attempt Only\n can be used to restrict the student to answering the question once. If not enabled, students will be able to edit their answer until the assignment is marked as Completed.\n\n\nAnswer and Rationale\n is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened using the \nTODO\nOpen as Teacher\n method. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the \nShow Answer and Rationale to Student\n switch below the guidance field.\n\n\n\n\nMetadata\n\uf0c1\n\n\n\n\nThe Metadata section contains fields that further describe the current assessment using a variety of factors:\n\n\n\n\nBloom's Level\n: The options for this field correspond to the general levels of \nBloom's Taxonomy\n, which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment.\n\n\nLearning Objectives\n:  What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \n\"SWBAT follow the flow of recursive execution\"\n.\n\n\nTags\n: In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, \nContent\n and \nProgramming Language\n, are required. To add your own tags, click \nAdd Tag\n and populate their names and values in the empty input boxes at the bottom.\n\n\n\n\nFiles\n\uf0c1\n\n\nSometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an \nAdvanced Code Test\n, your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included.\n\n\n\n\nTo mark a file to be included with the assessment, simply locate it in the file tree under \nProject files\n and tick the checkbox next to its name. Ticked files will appear under \nAdditional content\n.\n\n\nStudent Feedback\n\uf0c1\n\n\nIf your autograde script is to return feedback to your students as they submit the assessment, enable \nRelease Grades Automatically\n.\n\n\nPreview type\n\uf0c1\n\n\nThe following preview options are available. They dictate the expected input format and whether a fully rendered preview pane appears below the student input. Markdown is useful if the student wants to enter text formatting commands.\nHere is a reference for Markdown:\n\n\n\n\nDaring Fireball\n - the author of Markdown\n\n\n\n\nLaTeX is useful where you want students to enter mathematical formulae in their answers. \nClick here\n for information on LaTeX.\n\n\n\n\nPlaintext\n - the student is expected to enter ordinary text, without support for markdown formatting. There is no preview window.\n\n\nPlaintext + LaTeX\n - this expects plaintext to be entered, therefore no support for markdown with additional support for LaTeX commands. A preview pane is shown beneath so the student is able to see the rendered LaTeX output.\n\n\nMarkdown + LaTeX\n - this supports markdown input with LaTeX support. A preview pane is shown beneath so the student is able to see the rendered markdown and LaTeX output.\n\n\n\n\nCompleting an autograde free text assessment\n\uf0c1\n\n\nIf \nOne Attempt Only\n is enabled, students will only be able to submit their answer once. If this is not enabled them students will be able to revisit the question and edit their answer until they mark the assignment as completed\n\n\nExamples\n\uf0c1\n\n\nA simple Bash script example\n\uf0c1\n\n\n#!/usr/bin/env bash\nPOINTS=0\nif [ \n${CODIO_FREE_TEXT_ANSWER}\n == \nanswer1\n ]\nthen\n  POINTS=1\nfi\nif [ \n${CODIO_FREE_TEXT_ANSWER}\n == \nanswer5\n ]\nthen\n  POINTS=5\nfi\nif [ \n${CODIO_FREE_TEXT_ANSWER}\n == \nanswer10\n ]\nthen\n  POINTS=10\nfi\ncurl \n$CODIO_PARTIAL_POINTS_URL\npoints=${POINTS}\n \n /dev/null\n\n\n\n\nA complex Python example\n\uf0c1\n\n\n#!/usr/bin/env python\nimport sqlite3\nimport tempfile\nimport os, requests, sys\nnew_file, filename = tempfile.mkstemp()\nconn = sqlite3.connect(filename)\ntext = os.environ['CODIO_FREE_TEXT_ANSWER']\ntry:\n  conn.execute(text)\nexcept Exception as e:\n  os.remove(filename)\n  raise e\ncur = conn.cursor()\npoints = 2\ntry:\n  # check empty values\n  cur.execute(\ninsert into users values (?, ?, ?, ?)\n, (1, None, None, None))\n  points = points - 2\nexcept sqlite3.IntegrityError as e:\n  points = points + 2\ntry:\n  # check optional years\n  cur.execute(\ninsert into users values (?, ?, ?, ?)\n, (2, \n2\n, \n2\n, None))\n  points = points + 2\nexcept sqlite3.IntegrityError as e:\n  points = points - 2\n\n\ntry:\n  # check constraint check for years\n  cur.execute(\ninsert into users values (?, ?, ?, ?)\n, (3, \n2\n, \n2\n, -10))\n  points = points - 2\nexcept sqlite3.IntegrityError as e:\n  points = points + 2\n\ntry:\n  # check correct values\n  cur.execute(\ninsert into users values (?, ?, ?, ?)\n, (4, \n2\n, \n2\n, 10))\n  points = points + 2\nexcept sqlite3.IntegrityError as e:\n  points = points - 2\nos.remove(filename)\nurl = \n{0}\npoints={1}\n.format(os.environ['CODIO_PARTIAL_POINTS_URL'], points)\nr = requests.get(url)\n\n\n\n\nExample Instructions\n\uf0c1\n\n\nIt is recommended that clear instructions are given to students on any specific items that are expected to be included in their answer. The following is an example:\n\n\nCreate a table `users` with the fields:\n- id - primary key\n- name - text\n- email - text\n- years - integer\n- name and email should be required\n- years - optional, but if present - should be more or equal to 0\n\n\n\n\nExpected Solution\n\uf0c1\n\n\nCREATE TABLE users(\n  id int PRIMARY KEY,\n  name text NOT NULL,\n  email text NOT NULL,\n  years int CHECK(years \n 0)\n);\n\n\n\n\nMath assessments\n\uf0c1\n\n\nCodio allows you to set and grade math questions for any type and level of mathematics. As of September 2017, we only offer manual grading of mathematical expressions or proofs.\n\n\nIf you require math assessments, please \ncontact us\n and we can arrange to enable this for your organisation\n\n\nManually graded assessments using free text\n\uf0c1\n\n\nTo create a manually graded math question, you can use the \nFree text\n assessment type. This allows the students to enter expressions or even full proofs and worked answers using Latex. For more information about Latex, please \nclick here\n.\n\n\nYou can enter Latex in the \nQuestion\n and \nAnswer rationale\n fields.\n\n\nYou should also set the \nPreview type\n drop down to either \nPlaintext + Latex\n or \nMarkdown + Latex\n. Both of these ensure that the student sees a preview pane beneath their answer entry fully rendered in markdown and/or Latex. Please \nclick here\n to review the free text assessment.\n\n\nMultiple choice\n\uf0c1\n\n\nYou can also use the multiple choice assessment type to create answers containing properly rendered Latex expressions.\n\n\nGrade Book assessments\n\uf0c1\n\n\nA Grade book assessment is for manually graded assessments. A student does not need to answer it, and it is available for grading immediately\n\n\nComments and points given will be visible to the student when the assessment is graded and the grades are released.\n\n\nTest definition\n\uf0c1\n\n\nThe configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files.\n\n\nGeneral\n\uf0c1\n\n\n\n\n\n\nName\n is a short name that describes the test. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely what the assessment is. In many cases, you do not want to see this text appear to the student. To suppress this text, flip the \nShow Name\n switch next to the name field.\n\n\n\n\nExecution\n\uf0c1\n\n\n\n\n\n\nCollapsed on start\n allows the assessment field to be collapsed when the page opens.\n\n\n\n\nGrading\n\uf0c1\n\n\n\n\n\n\nPoints\n is the score given to the student. You can choose any positive numeric value. Enabling the \nAllow Partial Points\n switch will allow partial points to be given.\n\n\n\n\nMetadata\n\uf0c1\n\n\n\n\nThe Metadata section contains fields that further describe the current assessment using a variety of factors:\n\n\n\n\nBloom's Level\n: The options for this field correspond to the general levels of \nBloom's Taxonomy\n, which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment.\n\n\nLearning Objectives\n:  What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \n\"SWBAT follow the flow of recursive execution\"\n.\n\n\nTags\n: In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, \nContent\n and \nProgramming Language\n, are required. To add your own tags, click \nAdd Tag\n and populate their names and values in the empty input boxes at the bottom.\n\n\n\n\nFiles\n\uf0c1\n\n\nSometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an \nAdvanced Code Test\n, your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included.\n\n\n\n\nTo mark a file to be included with the assessment, simply locate it in the file tree under \nProject files\n and tick the checkbox next to its name. Ticked files will appear under \nAdditional content\n.\n\n\nParsons Puzzle assessments\n\uf0c1\n\n\nWhat are Parsons Puzzles?\n\uf0c1\n\n\nParson\u2019s Problems are available on Codio as Parsons Puzzles. Parson\u2019s Problems are great formative assessments that ask students to arrange blocks of scrambled code, allowing them to focus on the purpose and flow of the code (often including a new pattern or feature) while not worrying about syntax.\n\n\nCodio uses a client-side implementation of Parson's Problems named \njs-parsons\n, whose official documentation is available \nhere\n.\n\n\nAssessment definition\n\uf0c1\n\n\nThe configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata and Files.\n\n\nGeneral\n\uf0c1\n\n\n\n\n\n\nName\n is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the \nShow Name\n switch next to the name field.\n\n\nInstructions\n is the actual text that should be shown to the user. It can be written in Markdown or HTML.\n\n\n\n\nExecution\n\uf0c1\n\n\n\n\n\n\nInitial Values\n is where you create the initial state of the puzzle for the students.\n\n\nOptions\n is where you can set options for the puzzle. For the available options for each grader type, see \nParson's Problems\n documentation.\n\n\nGrader\n is where you select the grader appropriate to the puzzle. Refer to the \"Grader Description\" section below for more details.\n\n\n\n\nGrading\n\uf0c1\n\n\n\n\n\n\nThe \nPoints\n field is the number of points allocated for the question. You can choose any positive numeric value.\n\n\nOne Attempt Only\n can be used to restrict the student to answering the question once. If not enabled, students will be able to edit their answer until the assignment is marked as Completed.\n\n\nAnswer and Rationale\n is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened using the \nTODO\nOpen as Teacher\n method. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the \nShow Answer and Rationale to Student\n switch below the guidance field.\n\n\n\n\nMetadata\n\uf0c1\n\n\n\n\nThe Metadata section contains fields that further describe the current assessment using a variety of factors:\n\n\n\n\nBloom's Level\n: The options for this field correspond to the general levels of \nBloom's Taxonomy\n, which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment.\n\n\nLearning Objectives\n:  What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \n\"SWBAT follow the flow of recursive execution\"\n.\n\n\nTags\n: In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, \nContent\n and \nProgramming Language\n, are required. To add your own tags, click \nAdd Tag\n and populate their names and values in the empty input boxes at the bottom.\n\n\n\n\nFiles\n\uf0c1\n\n\nSometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an \nAdvanced Code Test\n, your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included.\n\n\n\n\nTo mark a file to be included with the assessment, simply locate it in the file tree under \nProject files\n and tick the checkbox next to its name. Ticked files will appear under \nAdditional content\n.\n\n\nGrader Description\n\uf0c1\n\n\nVariableCheckGrader\n\uf0c1\n\n\nVariableCheckGrader\n is a grader that executes the code in the order submitted by the student and checks variable values afterwards.\n\n\nExpected and supported options:\n- \nvartests\n (required): array of variable test objects\nEach variable test object can/must have the following properties:\n- \ninitcode\n: code that will be prepended before the learner solution code\n- \ncode\n: code that will be appended after the learner solution code\n- \nmessage\n (required): a textual description of the test, shown to learner\nProperties specifying what is tested:\n- \nvariables\n: an object with properties for each variable name to be tested; the value of the property is the expected value\nor\n- \nvariable\n: a variable name to be tested\n- \nexpected\n: expected value of the variable after code execution\n\n\n\n\n\nTurtleGrader\n\uf0c1\n\n\nTurtleGrader\n is a grader for exercises that draw turtle graphics in Python.\n\n\nRequired options:\n\n\n\n\nturtleModelCode\n: The code constructing the model drawing. The turtle is initialized to modelTurtle variable, so your code should use that variable.\nOptions that can be specified (that is, optional):\n\n\nturtlePenDown\n: a boolean specifying whether or not the pen should be put down initially for the student constructed code\n\n\nturtleModelCanvas\n: ID of the canvas DOM element where the model solution will be drawn. Defaults to \nmodelCanvas\n.\n\n\nturtleStudentCanvas\n: ID of the canvas DOM element where student turtle will draw. Defaults to \nstudentCanvas\n.\n\n\n\n\nGrading is based on comparing the commands executed by the model and student turtle. If the \nexecutable_code\n option is also specified, the code on each line of that option will be executed instead of the code in the student constructed lines. Note that the student code should use the variable \nmyTurtle\n for commands to control the turtle in order for the grading to work.\n\n\nUnitTestGrader\n\uf0c1\n\n\nUnitTestGrader\n is a grader that executes student code and Skulpt unit tests\n\n\nLanguageTranslationGrader\n\uf0c1\n\n\nCode \"Translating\" grader\n\n\nLineBasedGrader\n\uf0c1\n\n\nLineBasedGrader\n is a grader that treats student answers as correct if and only if they match the order and indentation found in \nInitial Values\n. For incorrect answers, it highlights the lines that were not ordered or indented properly.\n\n\nSample Starter Pack\n\uf0c1\n\n\nThere is a Starter Pack project that you can add to your account that includes examples of Parson's Puzzle assessments.\n\n\n\n\nFor Codio.com users: \nClick here to install\n\n\nFor Codio.co.uk users: \nClick here to install\n\n\n\n\nand \nUse Pack\n to create into your Codio account to review.\n\n\nSense Network\n\uf0c1\n\n\nSense.Education\n is an AI-Based code analysis package to give students feedback on their code submissions and is supported in Codio in the Sense.Network assessment type.\n\n\nStudents can submit their work and will be able to view feedback from Sense and if \nOne Attempt Only\n is not enabled can review their code and submit again.\n\n\nTo help and track students activity through sense, \ncustom script\n can be enabled.\n\n\nThis assessment type is only visible when the sense.network api key is entered in the \nOrganisation\nIntegrations\n area. See \norganisation admin roles\n for more on this.\n\n\n\n\nAssessment definition\n\uf0c1\n\n\nThe configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files.\n\n\nGeneral\n\uf0c1\n\n\n\n\n\n\nName\n (required) is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the \nShow Name\n switch next to the name field.\n\n\nInstructions\n (optional) is the text that should be shown to the user, written in Markdown.\n\n\n\n\nExecution\n\uf0c1\n\n\n\n\n\n\nPre-exec command\n (optional) is where a check can be run to confirm any code is compiling as required. If you store the scripts in the \n.guides/secure\n folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data.\n\n\nPre-exec feedback\n (optional) field is used to show feedback if \nPre-exec command\n fails,  otherwise will show pre-exec output.\n\n\nSense feedback Url\n (required) to extract assignment id\n\n\nFilename\n (optional) is the path to the file to pass. If empty, will send the currently opened file\n\n\n\n\nGrading\n\uf0c1\n\n\n\n\n\n\nGradable\n enable if the assignment is to be used within the grade total for the assignment. If this is not enabled students can be given feedback on their submission for this assessment without it being graded. Please note \nAnswer and Rationale\n will not return anything to the student if the assignment is not gradable. When enabled, each submission will override any previous submissions for grading purposes.\n\n\nOne Attempt Only\n can be used to restrict the student to answering the question once. If not enabled, students will be able to edit their answer until the assignment is marked as Completed.\n\n\nThe \nPoints\n field is the number of points allocated for the question. You can choose any positive numeric value.\n\n\nAnswer and Rationale\n is where guidance for the assessment can be entered where the assessment is \nGradable\n. This is not required if the assignment is not gradable. This will be visible to the teacher when the project is opened using the \nTODO\nOpen as Teacher\n method. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the \nShow Answer and Rationale to Student\n switch below the guidance field.\n\n\n\n\nMetadata\n\uf0c1\n\n\n\n\nThe Metadata section contains fields that further describe the current assessment using a variety of factors:\n\n\n\n\nBloom's Level\n: The options for this field correspond to the general levels of \nBloom's Taxonomy\n, which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment.\n\n\nLearning Objectives\n:  What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be: \n\"SWBAT follow the flow of recursive execution\"\n.\n\n\nTags\n: In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags, \nContent\n and \nProgramming Language\n, are required. To add your own tags, click \nAdd Tag\n and populate their names and values in the empty input boxes at the bottom.\n\n\n\n\nFiles\n\uf0c1\n\n\nSometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an \nAdvanced Code Test\n, your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included.\n\n\n\n\nTo mark a file to be included with the assessment, simply locate it in the file tree under \nProject files\n and tick the checkbox next to its name. Ticked files will appear under \nAdditional content\n.", 
            "title": "Codio Assessments"
        }, 
        {
            "location": "/courses/assessments/#assessments", 
            "text": "Assessments allow you to ask any number of automatically or manually graded questions within your content.   They allow a student or a teacher to assess how well they are grasping the subject matter.  Many assessment types are automatically graded, saving precious time for teachers and giving students instant feedback.  A wide range of assessment types (automatic code tests, multiple choice tests, fill in the blanks, drop-down selection, free text responses and project grading) allow the broadest possible measurement of a student's progress.  In course scenarios, all assessment responses feed through to a teacher dashboard.  For multiple choice tests, fill in the blanks and drop-down selection assessment types, each individual assessment can only be answered once, giving a true reflection of understanding rather than being able to carry on answering until the correct answer is achieved.  When an answer is submitted, the correct answer is shown to the student by default, but this can be disabled if required.   You can choose to weave assessments into the tutorial materials or to create dedicated assessments content.", 
            "title": "Assessments"
        }, 
        {
            "location": "/courses/assessments/#example-project", 
            "text": "https://codio.com/codio-units/java-example is a project that you can  fork  into your own Codio account and shows you how to create code tests and setup automatic marking. We would also recommend that you check out our  Guides Cheat Sheet  and  Use Pack  to create into your Codio account to review.", 
            "title": "Example Project"
        }, 
        {
            "location": "/courses/assessments/#submit-buttons-and-marking-as-complete", 
            "text": "There are two concepts that are important to understand in order to control the way the student submits questions and the way a student marks a project as complete.  Click here  for a detailed discussion on these.", 
            "title": "Submit buttons and marking as complete"
        }, 
        {
            "location": "/courses/assessments/#adding-a-new-assessment", 
            "text": "To add a new assessment, you should first position the cursor in your content where you want it to appear. Then, from the assessments drop-down, select the type of assessment you wish to insert.", 
            "title": "Adding a new assessment"
        }, 
        {
            "location": "/courses/assessments/#editing-an-existing-assessment", 
            "text": "If you want to edit an existing assessment on the page you are viewing, you should press the settings button in the guide toolbar. In the lower section of the drop down list you will find any assessments on that page. Select one to edit.", 
            "title": "Editing an existing assessment"
        }, 
        {
            "location": "/courses/assessments/#deleting-an-assessment", 
            "text": "Select the page where your assessment is located. Then remove the assessment token from the page. As assessment token looks like this.   Once deleted, an assessment remains hidden. To fully remove it, press the  Settings  icon in the authoring toolbar then select the  Assessments  tab. All assessments present in the current project are listed. Deleted ones are highlighted in red. Press the red  x  button to delete it.", 
            "title": "Deleting an assessment"
        }, 
        {
            "location": "/courses/assessments/#autograding-when-a-student-completes-a-assignment", 
            "text": "Codio allows you to run a special auto-grading script as soon as an assignment is completed by the student. This special type of assessment is managed from the assignment settings page in a course.  Click here  for details.", 
            "title": "Autograding when a student completes a assignment"
        }, 
        {
            "location": "/courses/assessments/#secure-script-execution", 
            "text": "If you store assessment scripts in the  .guides/secure  folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data. Codio ensures that only the original project author is able to access this folder but when it is assigned to Students as an assignment, it is not accessible in any way and the script runs in an ephemeral container isolated from the students assignment.\nAny other scripts in the assignment that are not in this folder can be accessible to the students", 
            "title": "Secure Script execution"
        }, 
        {
            "location": "/courses/assessments/#student-submission-options", 
            "text": "There are two important settings that control   the way that a student submits individual questions and  the way a student notifies the course instructors that a assignment is completed.", 
            "title": "Student submission options"
        }, 
        {
            "location": "/courses/assessments/#the-submit-button", 
            "text": "Until November 20th 2017, each assessment has a submit button beneath the assessment. Once pressed, the answer is autograded, if an MCQ, Fill In The Blank or Free Text question. If the  One attempt only  setting is selected for the assessment, then the student will be warned that they will not be able to resubmit. If this setting is not selected, then they will be able to resubmit a response.  It is now possible to suppress the submit button entirely. The advantage of this is that students do not need to worry about the effect of pressing the button. They can simply provide a response and then move on to other assessments or pages in the guide.  To suppress the use of the  Submit  button, you should go to the global settings tab in the guide and disable  Use submit buttons .   Once the project is marked as complete (see below) then all assessment responses are fully submitted automatically. You should make sure that all students' work is marked as complete either manually or using the automated mark as complete option on the final deadline.", 
            "title": "The submit button"
        }, 
        {
            "location": "/courses/assessments/#mark-as-complete", 
            "text": "To suppress the student  Mark as complete  action, you should go to the guide global settings (see above screenshot) and disable  Use mark as complete .  A student can proactively mark as assignment as complete. This can trigger a  assignment level autograde script  and it is also flagged up in the teacher dashboard against that student.  The drawback to using the student driven mark as complete option is that once students mark a assignment as complete, they are no longer able to make changes to the assignment, including answering assessments. The advantage is that instructors are able to grade those students' work ahead of a deadline.  If the project has been marked as completed, students can click on the 'completed' button to access the grade feedback but if they wish to view the project, direct them to click on the name of the project on the left hand side. As the assignment is completed they will not be able to edit anything but can view the content.  It is possible to disable the student side mark as complete option entirely so students do not need to think about doing it. It also means that instructors don't get requests from students to re-enable the assignment if they submitted by mistake or decided they want to change something.  If you do not want students to mark as complete, then you will likely want to do one of the following   Once an arbitrary deadline has been reached, after which you want to start grading student work, you should  mark all students' work as complete  from the assignment actions area.  Set an  end of assignment date  and specify that once the date is reached, the students' work should be marked as complete automatically.", 
            "title": "Mark as Complete"
        }, 
        {
            "location": "/courses/assessments/#penalty-deadlines", 
            "text": "Another powerful feature that you may want to use is  Penalty deadlines . This allows you to specify deadlines, before the final grading deadline, where a percentage deduction of the final grade is made.  Click here  for more information on managing penalty deadlines.", 
            "title": "Penalty deadlines"
        }, 
        {
            "location": "/courses/assessments/#standard-code-tests", 
            "text": "If you want to write code tests that give you in depth control by allowing you to write your own code to execute tests, then please  refer to the advanced code tests . The majority of code tests, however, can be produced without writing any code at all using standard code tests.  Standard code tests are dialog driven. You specify input data and the expected output for that input data. Codio will then execute the student code, supply the specified input data, and compare the expected output to the student code's actual output.", 
            "title": "Standard code tests"
        }, 
        {
            "location": "/courses/assessments/#sample-starter-pack", 
            "text": "There is a Starter Pack project that you can add to your account.  Click here to install  and  Use Pack  to create into your Codio account to review. This project contains examples for all assessment types as well as a guides authoring cheat sheet.", 
            "title": "Sample Starter Pack"
        }, 
        {
            "location": "/courses/assessments/#basic-setup", 
            "text": "The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files.", 
            "title": "Basic setup"
        }, 
        {
            "location": "/courses/assessments/#general", 
            "text": "The screenshot below shows the basic configuration fields for the  General  section:    Name  is a short name that describes the test. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the  Show Name  switch next to the name field.  Instructions  is the actual text that should be shown to the user, written in Markdown.", 
            "title": "General"
        }, 
        {
            "location": "/courses/assessments/#execution", 
            "text": "The screenshot below shows the configuration fields for the  Execution  section:    Command  is the command that executes the student code itself. If you store the assessment scripts in the  .guides/secure  folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data.  Pre-exec command  is the command to execute before you run each test. This will normally be a compile command.", 
            "title": "Execution"
        }, 
        {
            "location": "/courses/assessments/#grading", 
            "text": "The screenshot below shows the configuration fields for the  Grading  section:    Points  is the score given to the student if the code test passes. You can enter any positive numeric value.  Case insensitive  tells Codio to make a case insensitive output comparison. By default, the comparison will be case sensitive.  Ignore white space  tells Codio to strip out any white space characters (carriage return, line feed, tab etc.) from both the expected output and the student output. It can be very helpful to enable this as it means you do not have to be over precise when specifying the fields or instructions. More information is provided below.  Substring match  tells Codio to perform a substring match when comparing the expected output to the student output.  One attempt only  allows the assessment to run only once. The student will be warned that they will not be able to resubmit. You would usually want to provide a  run button  or other means for the user to test the code before running the actual assessment.  Show expected answer  will show the students the expected output when they have submitted an answer for the question. To suppress this, flip the switch.  Answer and rationale  is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened using the  TODO Open as Teacher  method. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the  Show Answer and Rationale to Student  switch below the guidance field.", 
            "title": "Grading"
        }, 
        {
            "location": "/courses/assessments/#metadata", 
            "text": "The Metadata section contains fields that further describe the current assessment using a variety of factors:   Bloom's Level : The options for this field correspond to the general levels of  Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment.  Learning Objectives :  What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be:  \"SWBAT follow the flow of recursive execution\" .  Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags,  Content  and  Programming Language , are required. To add your own tags, click  Add Tag  and populate their names and values in the empty input boxes at the bottom.", 
            "title": "Metadata"
        }, 
        {
            "location": "/courses/assessments/#files", 
            "text": "Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an  Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included.   To mark a file to be included with the assessment, simply locate it in the file tree under  Project files  and tick the checkbox next to its name. Ticked files will appear under  Additional content .", 
            "title": "Files"
        }, 
        {
            "location": "/courses/assessments/#cheating-opportunities", 
            "text": "If you show the expected output and allow multiple attempts, students may figure out that all they need to do is run the test, look at the expected output and then write the required output data. To avoid this, we recommend that you create one standard code assessment that shows expected inputs and outputs so the student can test. You award no points for this assessment.  You then would create a second assessment that does not show expected output and allows only a single attempt. This way, the student will not know what input data is being passed in and does not have another opportunity to modify their code and re-run the assessment.", 
            "title": "Cheating opportunities"
        }, 
        {
            "location": "/courses/assessments/#specifying-inputs-and-outputs", 
            "text": "The final step in configuring an assessment is to set up the inputs and outputs in the  Grading  section. There are some important details to understand.   The first set of empty input/output fields is provided. You should choose between supplying your inputs as arguments or as  stdin  data. These are explained in more detail below.  You should be aware of case sensitivity and whitespace characters as explained above. Generally speaking, using the 'ignore whitespace' setting is a good idea unless you do need to be exact in this respect.  If you only have one input/output pair then the student could write code that simply outputs the expected output without writing any real logic. To protect against this you can create multiple input/output test cases that are run through sequentially.  To add a new test case, press the  Add item to check  button which generates a new pair.", 
            "title": "Specifying inputs and outputs"
        }, 
        {
            "location": "/courses/assessments/#inputs-using-arguments", 
            "text": "The easiest way of supplying input data is in the  Input - Arguments  field as shown in the previous image. The argument data can then be read by the student code.", 
            "title": "Inputs using arguments"
        }, 
        {
            "location": "/courses/assessments/#inputs-using-stdin", 
            "text": "If you want to handle manual data input cases such as \"Enter your Name: \" then you would use the  Input - Stdin  field. This field allows you to supply the data that would normally be entered manually in the console. The following is important to avoid mistakes.   The input data should have a new line if this would be expected in the actual program execution.  In the output field, you need to be aware that the prompt text that is displayed to the user appears in  stdout  and so it should be reflected in your output field but without the data entered by the user. Normally, you would  not  put a new line in the output field between each input prompt as the new line character is generated by the user when pressing the enter key is not a part of the output.  We recommend that you enable the  Ignore white space  and  Substring match  options to be more tolerant.   The following image shows how to format input and output fields if you are  not  ignoring white space or doing a  Substring match . Note how the input field only supplied the values to be input, not the prompt itself (which is actually a part of  stdout ). It is important to accurately account for all spaces and carriage returns.   The following image shows the more tolerant approach that has the  Ignore whitespace  option set. In this case, we have put everything on its own line for readability. The whitespace characters will be stripped out of both the expected output and the student output at runtime.", 
            "title": "Inputs using stdin"
        }, 
        {
            "location": "/courses/assessments/#error-feedback", 
            "text": "To provide extended feedback about issues in the student's code, you can enable this option if you wish to show feedback to the student in the event the test fails.", 
            "title": "Error Feedback"
        }, 
        {
            "location": "/courses/assessments/#advanced-code-tests", 
            "text": "Before you read about the advanced code test, please be sure to check the  standard code tests  as these require no coding at all, are very quick to set up and cover the majority of test cases you are likely to want to create.  The advanced code test assessment type allows you to write code that checks code a student has written. You can write the code in any language you like provided it can be run from the command line.  You should be aware that if students are able to access the command line, they are able to explore the box and find the folder where your test scripts are located. For scripting languages, this would allow them to modify the script. For compiled executables they could theoretically create their own executable and then replace yours with their own one. They would need to know how the callbacks work to succeed at this.  If you want to make your scripts as secure as possible, please  click here  for information on secure scripts run when an assignment is marked as complete.", 
            "title": "Advanced code tests"
        }, 
        {
            "location": "/courses/assessments/#sample-starter-pack_1", 
            "text": "There is a Starter Pack project that you can add to your account.  Click here to install  and  Use Pack  to create into your Codio account to review. This project contains examples for all types of auto-graded assessments as well as a Codio authoring cheat sheet.", 
            "title": "Sample Starter Pack"
        }, 
        {
            "location": "/courses/assessments/#test-definition", 
            "text": "Setting up a Code Test within the Guide editor is very simple. The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files.", 
            "title": "Test definition"
        }, 
        {
            "location": "/courses/assessments/#general_1", 
            "text": "The screenshot below shows the basic configuration fields for the  General  section:    Name  is a short name that describes the test. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the  Show Name  switch next to the name field.  Instructions  is the actual text that should be shown to the user, written in Markdown.", 
            "title": "General"
        }, 
        {
            "location": "/courses/assessments/#execution_1", 
            "text": "You can evaluate student code using a variety of languages and frameworks that are already supported. You can also use a custom grading script.  Supported languages and frameworks:   Ruby :  rubocop  or  rspec  Java :  JUnit  or  checkstyle  Python :  pycodestyle  or  UnitTest  JavaScript :  jshint  or  jslint", 
            "title": "Execution"
        }, 
        {
            "location": "/courses/assessments/#using-pycodestyle", 
            "text": "Before using the  pycodestyle  option,  pycodestyle  has to be installed. You may use the following commands to do so:  sudo apt update\nsudo apt install python3-pip\nsudo python3 -m pip install pycodestyle   To add individual Python source files whose style should be checked, either enter their relative path to  ~/namespace  or drag them from the Filetree into the  Add Case  input box, and click  Add Case . You may add as many cases as needed. When the assessment executes,  pycodestyle  will inspect each added file and output all styling issues that it found.", 
            "title": "Using pycodestyle"
        }, 
        {
            "location": "/courses/assessments/#using-jshint-or-jslint", 
            "text": "Before using them,  jshint  or  jslint  must be installed as a Node.js global package. You may use the following command to do so:  sudo npm install -g jshint jslint  To add individual JavaScript source files whose style should be checked, either enter their relative path to  ~/namespace  or drag them from the Filetree into the  Add Case  input box, and click  Add Case . You may add as many cases as needed. You may also select either JSLint or JSHint in the  Language Assessment Subtype  dropdown. When the assessment executes, your choice of either  jshint  or  jslint  will inspect each added file and output all styling issues that it found.", 
            "title": "Using jshint or jslint"
        }, 
        {
            "location": "/courses/assessments/#custom", 
            "text": "Command  is the command to run to invoke your test. See the section  Test code location  below for more details. If you store the assessment scripts in the  .guides/secure  folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data.  Enabling the  Allow Partial Points  switch will allow partial points to be given. See the section  Partial Score  lower down on this page.  Timeout  is the period of time (seconds) the test will run before terminating.", 
            "title": "Custom"
        }, 
        {
            "location": "/courses/assessments/#grading_1", 
            "text": "Points  is the score given to the student if the code test passes. You can choose any positive numeric value.  One attempt only  allows the assessment to be run only once. This generally not advised unless you make it clear to the student that a failed test cannot be repeated. You should also provide a Run button in the Guide (or provide other instructions) so the user can test the code before running the actual assessment.  Answer and rationale  is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened using the  TODO (Open as Teacher](/classes/unitmanagement/settings-info/teachersolutions) method. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the  Show Answer and Rationale to Student  switch below the guidance field.", 
            "title": "Grading"
        }, 
        {
            "location": "/courses/assessments/#metadata_1", 
            "text": "The Metadata section contains fields that further describe the current assessment using a variety of factors:   Bloom's Level : The options for this field correspond to the general levels of  Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment.  Learning Objectives :  What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be:  \"SWBAT follow the flow of recursive execution\" .  Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags,  Content  and  Programming Language , are required. To add your own tags, click  Add Tag  and populate their names and values in the empty input boxes at the bottom.", 
            "title": "Metadata"
        }, 
        {
            "location": "/courses/assessments/#files_1", 
            "text": "Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an  Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included.   To mark a file to be included with the assessment, simply locate it in the file tree under  Project files  and tick the checkbox next to its name. Ticked files will appear under  Additional content .", 
            "title": "Files"
        }, 
        {
            "location": "/courses/assessments/#test-code-location", 
            "text": "You can place your test code anywhere you like, but if you store the assessment scripts in the  .guides/secure  folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data. Another suitable location could be to to create a  .guides/tests  folder.  When specifying a command to run, you could specify it in either of these ways (the ~/workspace folder is assumed if you do not specify a full path).  node .guides/tests/mytest.js\nnode /home/codio/workspace/.guides/tests/mytest.js  This example uses Node.js, but you can use any language you'd like.", 
            "title": "Test code location"
        }, 
        {
            "location": "/courses/assessments/#test-framework", 
            "text": "Codio provides a simple framework for communicating with the Codio authored content. When defining a test, you specify the points that should be awarded for a successful answer.", 
            "title": "Test framework"
        }, 
        {
            "location": "/courses/assessments/#success-or-failure", 
            "text": "To let Codio know whether the test passed, your code should simply exit with 0. A Bash script would return with  exit(0) , Node.js with  process.exit(0)  etc.  To indicate failure, exit with a non-zero value.", 
            "title": "Success or Failure"
        }, 
        {
            "location": "/courses/assessments/#partial-score", 
            "text": "Codio also provides a way for you to award a partial score rather than the all or nothing approach described above.  If your test was written using a bash script, it would be done like this.  POINTS=5\ncurl -s  $CODIO_PARTIAL_POINTS_URL points=${POINTS}    /dev/null  A Python script might look like this.  #!/usr/bin/env python\nimport os, requests, sys\n\npoints = 5\nurl =  {0} points={1} .format(os.environ['CODIO_PARTIAL_POINTS_URL'], points)\nr = requests.get(url)  The score you award should be any value between 0 and the maximum score you specified when defining the assessment in the Codio authoring editor.", 
            "title": "Partial Score"
        }, 
        {
            "location": "/courses/assessments/#displaying-information-to-the-student", 
            "text": "You can return text to the user that is shown once the test has concluded. Your test output is captured from  stderr  and  stdout , so for Node.js, for example,  console.log('Well done!!')  would work.  For success, you might simply return  'Well done!' . For failure, aim to provide as much explanation to the student as possible regarding why they failed.  You can return plain text, but if you want to format your response text, you can return HTML. To do so, make sure you enclose your HTML within  html   /html  tags.", 
            "title": "Displaying information to the student"
        }, 
        {
            "location": "/courses/assessments/#dashboard-score", 
            "text": "If  Allow Partial Points  is disabled and your test returns 0, then Codio will give a dashboard score specified in the Points field; if it returns a non-zero value, then a score of 0 is assumed.  If  Allow Partial Points  is enabled, then Codio will give a dashboard score based on the request it received at  CODIO_PARTIAL_POINTS_URL . If no request was received, then a score of 0 is assumed.", 
            "title": "Dashboard score"
        }, 
        {
            "location": "/courses/assessments/#inputs-and-outputs-to-student-code", 
            "text": "If your assessment requires that inputs are passed into the student code or data should be returned from the student code, then it is your responsibility to implement this. You should make it clear how the student should process your test's inputs and how to return data back to your test.", 
            "title": "Inputs and outputs to student code"
        }, 
        {
            "location": "/courses/assessments/#multiple-choice", 
            "text": "Codio support both single and multiple response versions of MCQs.", 
            "title": "Multiple choice"
        }, 
        {
            "location": "/courses/assessments/#assessment-definition", 
            "text": "The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files.", 
            "title": "Assessment definition"
        }, 
        {
            "location": "/courses/assessments/#general_2", 
            "text": "Name  is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the  Show Name  switch next to the name field.  Question  is the question instruction that is shown to the student.", 
            "title": "General"
        }, 
        {
            "location": "/courses/assessments/#execution_2", 
            "text": "The  Multiple Response  slider indicates whether the user can select more than one answer, in which case check boxes are used instead of radio buttons to specify correct answers.  Answers  is where you add as many individual answers as you require. To indicate the correct answer(s), toggle the sliders for multiple response or the radio button for single response.", 
            "title": "Execution"
        }, 
        {
            "location": "/courses/assessments/#grading_2", 
            "text": "Show Expected Answer  will show the students the correct answer when they have submitted an answer for this question. To suppress this, flip the switch.  Correct Points  is the score given to the student if the student makes the correct selection. You can choose any positive numeric value.  Incorrect Points  is the score to be deducted if the student makes an incorrect selection. Typically, this value will be 0 but you can assign any positive numeric value if you wish to penalize guessing.  Answer and Rationale  is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened using the  TODO Open as Teacher  method. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the  Show Answer and Rationale to Student  switch below the guidance field.", 
            "title": "Grading"
        }, 
        {
            "location": "/courses/assessments/#metadata_2", 
            "text": "The Metadata section contains fields that further describe the current assessment using a variety of factors:   Bloom's Level : The options for this field correspond to the general levels of  Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment.  Learning Objectives :  What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be:  \"SWBAT follow the flow of recursive execution\" .  Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags,  Content  and  Programming Language , are required. To add your own tags, click  Add Tag  and populate their names and values in the empty input boxes at the bottom.", 
            "title": "Metadata"
        }, 
        {
            "location": "/courses/assessments/#files_2", 
            "text": "Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an  Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included.   To mark a file to be included with the assessment, simply locate it in the file tree under  Project files  and tick the checkbox next to its name. Ticked files will appear under  Additional content .", 
            "title": "Files"
        }, 
        {
            "location": "/courses/assessments/#one-attempt-only", 
            "text": "Codio allows users to make their selections and move on to other content pages or assessments without actually submitting their answer. However, once the answer has been submitted, it cannot be resubmitted. This gives teachers a far clearer understanding of which students are understanding the materials properly. There is little point to tests if the student simply changes the answers until the correct one appears.", 
            "title": "One attempt only"
        }, 
        {
            "location": "/courses/assessments/#fill-in-the-blank", 
            "text": "A 'fill in the blank' question comes in two flavours.", 
            "title": "Fill in the blank"
        }, 
        {
            "location": "/courses/assessments/#free-text", 
            "text": "The example below shows a typical question where the student has to complete the missing words. This is then auto-marked by the Guide as explained below.", 
            "title": "Free Text"
        }, 
        {
            "location": "/courses/assessments/#drop-down", 
            "text": "The example below shows a variation, where the student is given a list of possible answers and has to select the right answer from a drop down list of possible answers. This is then auto-graded as explained below.", 
            "title": "Drop Down"
        }, 
        {
            "location": "/courses/assessments/#assessment-definition_1", 
            "text": "The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files.", 
            "title": "Assessment definition"
        }, 
        {
            "location": "/courses/assessments/#general_3", 
            "text": "Name  is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the  Show Name  switch next to the name field.  Instruction  contains any general instructions you want to provide to the student.", 
            "title": "General"
        }, 
        {
            "location": "/courses/assessments/#execution_3", 
            "text": "Text  is the Markdown that you write including the correct answer specification. Below is an example of how the question should be specified.  A prime number (or a prime) is a  natural  number greater than  1  that has no positive divisors other than  1  and  itself .  For a free text question ( Show Possible Values  slider to the left), Codio shows blank text fields. The student should then enter the correct text. Codio ensures that the response is case insensitive. For obvious reasons, the longer and more complex the correct answer, the easier it is for the student to make minor spelling errors that will then be scored as an incorrect answer.  For a drop-down question ( Show Possible Values  slider to the right) Codio will gather all correct values (anything within the     chevrons) into a drop-down list and offer the same list in each of the answer positions.", 
            "title": "Execution"
        }, 
        {
            "location": "/courses/assessments/#grading_3", 
            "text": "Points  is the score given to the student if the student answers all parts of the assessment correctly. You can choose any positive numeric value. A score of 0 is given if any of the responses is incorrect.  The  Show Possible Values  switch determines whether the question is text based (the slider is gray and in the left position) or drop-down based (the slider is blue and in the right position).  Show Expected Answer  will show the students the correct answer when they have submitted an answer for this question. To suppress this, flip the switch.  Answer and Rationale  is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened using the   TODO Open as Teacher  method. This guidance information can also be shown to students after they have submitted their answer and also if they reload the unit after marking it as completed. To enable this, flip the  Show Answer and Rationale to Student  switch below the guidance field.", 
            "title": "Grading"
        }, 
        {
            "location": "/courses/assessments/#metadata_3", 
            "text": "The Metadata section contains fields that further describe the current assessment using a variety of factors:   Bloom's Level : The options for this field correspond to the general levels of  Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment.  Learning Objectives :  What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be:  \"SWBAT follow the flow of recursive execution\" .  Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags,  Content  and  Programming Language , are required. To add your own tags, click  Add Tag  and populate their names and values in the empty input boxes at the bottom.", 
            "title": "Metadata"
        }, 
        {
            "location": "/courses/assessments/#files_3", 
            "text": "Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an  Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included.   To mark a file to be included with the assessment, simply locate it in the file tree under  Project files  and tick the checkbox next to its name. Ticked files will appear under  Additional content .", 
            "title": "Files"
        }, 
        {
            "location": "/courses/assessments/#free-text_1", 
            "text": "Free text assessments allow students to answer questions in their own words. Teachers are then able to review and manually grade their answers.", 
            "title": "Free text"
        }, 
        {
            "location": "/courses/assessments/#assessment-definition_2", 
            "text": "Setting up a free text assessment is very simple. The configuration fields for a free text assessment are split into four sections: General, Grading, Metadata, and Files.", 
            "title": "Assessment definition"
        }, 
        {
            "location": "/courses/assessments/#general_4", 
            "text": "Name  is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the  Show Name  switch next to the name field.  Instructions  is the actual text that should be shown to the user, written in Markdown.", 
            "title": "General"
        }, 
        {
            "location": "/courses/assessments/#grading_4", 
            "text": "The  Points  field is the number of points allocated for the question. You can choose any positive numeric value. Enabling the  Allow Partial Points  switch will allow the teacher when grading the answer to select the points to give for the students answer.  Preview Type  specified the expected input by the student. Codio offers plaintext and markdown options. LaTeX is also supported. Please refer to the  Preview type  section below for details.  One Attempt Only  can be used to restrict the student to answering the question once. If not enabled, students will be able to edit their answer until the assignment is marked as Completed.  Answer and Rationale  is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened using the  TODO Open as Teacher  method. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the  Show Answer and Rationale to Student  switch below the guidance field.", 
            "title": "Grading"
        }, 
        {
            "location": "/courses/assessments/#metadata_4", 
            "text": "The Metadata section contains fields that further describe the current assessment using a variety of factors:   Bloom's Level : The options for this field correspond to the general levels of  Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment.  Learning Objectives :  What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be:  \"SWBAT follow the flow of recursive execution\" .  Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags,  Content  and  Programming Language , are required. To add your own tags, click  Add Tag  and populate their names and values in the empty input boxes at the bottom.", 
            "title": "Metadata"
        }, 
        {
            "location": "/courses/assessments/#files_4", 
            "text": "Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an  Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included.   To mark a file to be included with the assessment, simply locate it in the file tree under  Project files  and tick the checkbox next to its name. Ticked files will appear under  Additional content .", 
            "title": "Files"
        }, 
        {
            "location": "/courses/assessments/#preview-type", 
            "text": "The following preview options are available. They dictate the expected input format and whether a fully rendered preview pane appears below the student input. Markdown is useful if the student wants to enter text formatting commands.\nHere is a reference for Markdown:   Daring Fireball  - the author of Markdown   LaTeX is useful where you want students to enter mathematical formulae in their answers.  Click here  for information on LaTeX.   Plaintext  - the student is expected to enter ordinary text, without support for markdown formatting. There is no preview window.  Plaintext + LaTeX  - this expects plaintext to be entered, therefore no support for markdown with additional support for LaTeX commands. A preview pane is shown beneath so the student is able to see the rendered LaTeX output.  Markdown + LaTeX  - this supports markdown input with LaTeX support. A preview pane is shown beneath so the student is able to see the rendered markdown and LaTeX output.", 
            "title": "Preview type"
        }, 
        {
            "location": "/courses/assessments/#completing-a-free-text-assessment", 
            "text": "If  One Attempt Only  is enabled, students will only be able to submit their answer once. If this is not enabled them students will be able to revisit the question and edit their answer until they mark the assignment as completed", 
            "title": "Completing a free text assessment"
        }, 
        {
            "location": "/courses/assessments/#grading-free-text-assessments", 
            "text": "To review and grade answers given by student, select the student and a list of all the assessments in the assignment are shown.   Free text assessments are identifiable from the icon   Click one line and you will then see the question asked of the student and the answer they submitted.  If the question was not set to  Allow Partial Points , the teacher can select  Correct  or  Incorrect   If the question was set to use  Allow Partial Points  the teacher can select the points to give to the answer up to the maximum  Points .   Comments can also be added and will be shown to the student when grades are released. The comment field supports  LATex  and  markdown  with a preview area below the text area to allow the grader review the input. The comment field will autoexpand as required", 
            "title": "Grading free text assessments"
        }, 
        {
            "location": "/courses/assessments/#navigating-students-assessments", 
            "text": "Using the   and   buttons at the top of the assessments grading dialog you can quickly navigate either to the same assessment for other students or to other assessments for the select student", 
            "title": "Navigating students assessments"
        }, 
        {
            "location": "/courses/assessments/#viewing-graded-free-text-assessments", 
            "text": "For any free text assessments that have been graded by a teacher in an assignment, you will see the points given and the field in the  Correct  column checked.", 
            "title": "Viewing graded free text assessments"
        }, 
        {
            "location": "/courses/assessments/#autograde-free-text", 
            "text": "The Autograde Free text assessment is similar to the  free text  assessment but includes a field for a command line to execute a script allowing autograding.  The answer will be passed to the script as  stdin .", 
            "title": "Autograde Free text"
        }, 
        {
            "location": "/courses/assessments/#assessment-definition_3", 
            "text": "Setting up an assessment is very simple. The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files.", 
            "title": "Assessment definition"
        }, 
        {
            "location": "/courses/assessments/#general_5", 
            "text": "Name  is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the  Show Name  switch next to the name field.  Instructions  is the actual text that should be shown to the user, written in Markdown.", 
            "title": "General"
        }, 
        {
            "location": "/courses/assessments/#execution_4", 
            "text": "Command  is the command to execute a script to autograde. If you store the assessment scripts in the  .guides/secure  folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data.  Timeout  is the time to abort the script from executing in the event of a problem.", 
            "title": "Execution"
        }, 
        {
            "location": "/courses/assessments/#grading_5", 
            "text": "The  Points  field is the number of points allocated for the question. You can choose any positive numeric value. Enabling the  Allow Partial Points  switch will allow the teacher when grading the answer to select the points to give for the students answer.  Preview Type  specified the expected input by the student. Codio offers plaintext and markdown options. Latex is also supported. Please refer to the  Preview type  section below for details.  One Attempt Only  can be used to restrict the student to answering the question once. If not enabled, students will be able to edit their answer until the assignment is marked as Completed.  Answer and Rationale  is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened using the  TODO Open as Teacher  method. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the  Show Answer and Rationale to Student  switch below the guidance field.", 
            "title": "Grading"
        }, 
        {
            "location": "/courses/assessments/#metadata_5", 
            "text": "The Metadata section contains fields that further describe the current assessment using a variety of factors:   Bloom's Level : The options for this field correspond to the general levels of  Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment.  Learning Objectives :  What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be:  \"SWBAT follow the flow of recursive execution\" .  Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags,  Content  and  Programming Language , are required. To add your own tags, click  Add Tag  and populate their names and values in the empty input boxes at the bottom.", 
            "title": "Metadata"
        }, 
        {
            "location": "/courses/assessments/#files_5", 
            "text": "Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an  Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included.   To mark a file to be included with the assessment, simply locate it in the file tree under  Project files  and tick the checkbox next to its name. Ticked files will appear under  Additional content .", 
            "title": "Files"
        }, 
        {
            "location": "/courses/assessments/#student-feedback", 
            "text": "If your autograde script is to return feedback to your students as they submit the assessment, enable  Release Grades Automatically .", 
            "title": "Student Feedback"
        }, 
        {
            "location": "/courses/assessments/#preview-type_1", 
            "text": "The following preview options are available. They dictate the expected input format and whether a fully rendered preview pane appears below the student input. Markdown is useful if the student wants to enter text formatting commands.\nHere is a reference for Markdown:   Daring Fireball  - the author of Markdown   LaTeX is useful where you want students to enter mathematical formulae in their answers.  Click here  for information on LaTeX.   Plaintext  - the student is expected to enter ordinary text, without support for markdown formatting. There is no preview window.  Plaintext + LaTeX  - this expects plaintext to be entered, therefore no support for markdown with additional support for LaTeX commands. A preview pane is shown beneath so the student is able to see the rendered LaTeX output.  Markdown + LaTeX  - this supports markdown input with LaTeX support. A preview pane is shown beneath so the student is able to see the rendered markdown and LaTeX output.", 
            "title": "Preview type"
        }, 
        {
            "location": "/courses/assessments/#completing-an-autograde-free-text-assessment", 
            "text": "If  One Attempt Only  is enabled, students will only be able to submit their answer once. If this is not enabled them students will be able to revisit the question and edit their answer until they mark the assignment as completed", 
            "title": "Completing an autograde free text assessment"
        }, 
        {
            "location": "/courses/assessments/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/courses/assessments/#a-simple-bash-script-example", 
            "text": "#!/usr/bin/env bash\nPOINTS=0\nif [  ${CODIO_FREE_TEXT_ANSWER}  ==  answer1  ]\nthen\n  POINTS=1\nfi\nif [  ${CODIO_FREE_TEXT_ANSWER}  ==  answer5  ]\nthen\n  POINTS=5\nfi\nif [  ${CODIO_FREE_TEXT_ANSWER}  ==  answer10  ]\nthen\n  POINTS=10\nfi\ncurl  $CODIO_PARTIAL_POINTS_URL points=${POINTS}    /dev/null", 
            "title": "A simple Bash script example"
        }, 
        {
            "location": "/courses/assessments/#a-complex-python-example", 
            "text": "#!/usr/bin/env python\nimport sqlite3\nimport tempfile\nimport os, requests, sys\nnew_file, filename = tempfile.mkstemp()\nconn = sqlite3.connect(filename)\ntext = os.environ['CODIO_FREE_TEXT_ANSWER']\ntry:\n  conn.execute(text)\nexcept Exception as e:\n  os.remove(filename)\n  raise e\ncur = conn.cursor()\npoints = 2\ntry:\n  # check empty values\n  cur.execute( insert into users values (?, ?, ?, ?) , (1, None, None, None))\n  points = points - 2\nexcept sqlite3.IntegrityError as e:\n  points = points + 2\ntry:\n  # check optional years\n  cur.execute( insert into users values (?, ?, ?, ?) , (2,  2 ,  2 , None))\n  points = points + 2\nexcept sqlite3.IntegrityError as e:\n  points = points - 2\n\n\ntry:\n  # check constraint check for years\n  cur.execute( insert into users values (?, ?, ?, ?) , (3,  2 ,  2 , -10))\n  points = points - 2\nexcept sqlite3.IntegrityError as e:\n  points = points + 2\n\ntry:\n  # check correct values\n  cur.execute( insert into users values (?, ?, ?, ?) , (4,  2 ,  2 , 10))\n  points = points + 2\nexcept sqlite3.IntegrityError as e:\n  points = points - 2\nos.remove(filename)\nurl =  {0} points={1} .format(os.environ['CODIO_PARTIAL_POINTS_URL'], points)\nr = requests.get(url)", 
            "title": "A complex Python example"
        }, 
        {
            "location": "/courses/assessments/#example-instructions", 
            "text": "It is recommended that clear instructions are given to students on any specific items that are expected to be included in their answer. The following is an example:  Create a table `users` with the fields:\n- id - primary key\n- name - text\n- email - text\n- years - integer\n- name and email should be required\n- years - optional, but if present - should be more or equal to 0", 
            "title": "Example Instructions"
        }, 
        {
            "location": "/courses/assessments/#expected-solution", 
            "text": "CREATE TABLE users(\n  id int PRIMARY KEY,\n  name text NOT NULL,\n  email text NOT NULL,\n  years int CHECK(years   0)\n);", 
            "title": "Expected Solution"
        }, 
        {
            "location": "/courses/assessments/#math-assessments", 
            "text": "Codio allows you to set and grade math questions for any type and level of mathematics. As of September 2017, we only offer manual grading of mathematical expressions or proofs.  If you require math assessments, please  contact us  and we can arrange to enable this for your organisation", 
            "title": "Math assessments"
        }, 
        {
            "location": "/courses/assessments/#manually-graded-assessments-using-free-text", 
            "text": "To create a manually graded math question, you can use the  Free text  assessment type. This allows the students to enter expressions or even full proofs and worked answers using Latex. For more information about Latex, please  click here .  You can enter Latex in the  Question  and  Answer rationale  fields.  You should also set the  Preview type  drop down to either  Plaintext + Latex  or  Markdown + Latex . Both of these ensure that the student sees a preview pane beneath their answer entry fully rendered in markdown and/or Latex. Please  click here  to review the free text assessment.", 
            "title": "Manually graded assessments using free text"
        }, 
        {
            "location": "/courses/assessments/#multiple-choice_1", 
            "text": "You can also use the multiple choice assessment type to create answers containing properly rendered Latex expressions.", 
            "title": "Multiple choice"
        }, 
        {
            "location": "/courses/assessments/#grade-book-assessments", 
            "text": "A Grade book assessment is for manually graded assessments. A student does not need to answer it, and it is available for grading immediately  Comments and points given will be visible to the student when the assessment is graded and the grades are released.", 
            "title": "Grade Book assessments"
        }, 
        {
            "location": "/courses/assessments/#test-definition_1", 
            "text": "The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files.", 
            "title": "Test definition"
        }, 
        {
            "location": "/courses/assessments/#general_6", 
            "text": "Name  is a short name that describes the test. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely what the assessment is. In many cases, you do not want to see this text appear to the student. To suppress this text, flip the  Show Name  switch next to the name field.", 
            "title": "General"
        }, 
        {
            "location": "/courses/assessments/#execution_5", 
            "text": "Collapsed on start  allows the assessment field to be collapsed when the page opens.", 
            "title": "Execution"
        }, 
        {
            "location": "/courses/assessments/#grading_6", 
            "text": "Points  is the score given to the student. You can choose any positive numeric value. Enabling the  Allow Partial Points  switch will allow partial points to be given.", 
            "title": "Grading"
        }, 
        {
            "location": "/courses/assessments/#metadata_6", 
            "text": "The Metadata section contains fields that further describe the current assessment using a variety of factors:   Bloom's Level : The options for this field correspond to the general levels of  Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment.  Learning Objectives :  What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be:  \"SWBAT follow the flow of recursive execution\" .  Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags,  Content  and  Programming Language , are required. To add your own tags, click  Add Tag  and populate their names and values in the empty input boxes at the bottom.", 
            "title": "Metadata"
        }, 
        {
            "location": "/courses/assessments/#files_6", 
            "text": "Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an  Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included.   To mark a file to be included with the assessment, simply locate it in the file tree under  Project files  and tick the checkbox next to its name. Ticked files will appear under  Additional content .", 
            "title": "Files"
        }, 
        {
            "location": "/courses/assessments/#parsons-puzzle-assessments", 
            "text": "", 
            "title": "Parsons Puzzle assessments"
        }, 
        {
            "location": "/courses/assessments/#what-are-parsons-puzzles", 
            "text": "Parson\u2019s Problems are available on Codio as Parsons Puzzles. Parson\u2019s Problems are great formative assessments that ask students to arrange blocks of scrambled code, allowing them to focus on the purpose and flow of the code (often including a new pattern or feature) while not worrying about syntax.  Codio uses a client-side implementation of Parson's Problems named  js-parsons , whose official documentation is available  here .", 
            "title": "What are Parsons Puzzles?"
        }, 
        {
            "location": "/courses/assessments/#assessment-definition_4", 
            "text": "The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata and Files.", 
            "title": "Assessment definition"
        }, 
        {
            "location": "/courses/assessments/#general_7", 
            "text": "Name  is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the  Show Name  switch next to the name field.  Instructions  is the actual text that should be shown to the user. It can be written in Markdown or HTML.", 
            "title": "General"
        }, 
        {
            "location": "/courses/assessments/#execution_6", 
            "text": "Initial Values  is where you create the initial state of the puzzle for the students.  Options  is where you can set options for the puzzle. For the available options for each grader type, see  Parson's Problems  documentation.  Grader  is where you select the grader appropriate to the puzzle. Refer to the \"Grader Description\" section below for more details.", 
            "title": "Execution"
        }, 
        {
            "location": "/courses/assessments/#grading_7", 
            "text": "The  Points  field is the number of points allocated for the question. You can choose any positive numeric value.  One Attempt Only  can be used to restrict the student to answering the question once. If not enabled, students will be able to edit their answer until the assignment is marked as Completed.  Answer and Rationale  is where guidance for the assessment can be entered. This will be visible to the teacher when the project is opened using the  TODO Open as Teacher  method. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the  Show Answer and Rationale to Student  switch below the guidance field.", 
            "title": "Grading"
        }, 
        {
            "location": "/courses/assessments/#metadata_7", 
            "text": "The Metadata section contains fields that further describe the current assessment using a variety of factors:   Bloom's Level : The options for this field correspond to the general levels of  Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment.  Learning Objectives :  What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be:  \"SWBAT follow the flow of recursive execution\" .  Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags,  Content  and  Programming Language , are required. To add your own tags, click  Add Tag  and populate their names and values in the empty input boxes at the bottom.", 
            "title": "Metadata"
        }, 
        {
            "location": "/courses/assessments/#files_7", 
            "text": "Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an  Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included.   To mark a file to be included with the assessment, simply locate it in the file tree under  Project files  and tick the checkbox next to its name. Ticked files will appear under  Additional content .", 
            "title": "Files"
        }, 
        {
            "location": "/courses/assessments/#grader-description", 
            "text": "", 
            "title": "Grader Description"
        }, 
        {
            "location": "/courses/assessments/#variablecheckgrader", 
            "text": "VariableCheckGrader  is a grader that executes the code in the order submitted by the student and checks variable values afterwards.  Expected and supported options:\n-  vartests  (required): array of variable test objects\nEach variable test object can/must have the following properties:\n-  initcode : code that will be prepended before the learner solution code\n-  code : code that will be appended after the learner solution code\n-  message  (required): a textual description of the test, shown to learner\nProperties specifying what is tested:\n-  variables : an object with properties for each variable name to be tested; the value of the property is the expected value\nor\n-  variable : a variable name to be tested\n-  expected : expected value of the variable after code execution", 
            "title": "VariableCheckGrader"
        }, 
        {
            "location": "/courses/assessments/#turtlegrader", 
            "text": "TurtleGrader  is a grader for exercises that draw turtle graphics in Python.  Required options:   turtleModelCode : The code constructing the model drawing. The turtle is initialized to modelTurtle variable, so your code should use that variable.\nOptions that can be specified (that is, optional):  turtlePenDown : a boolean specifying whether or not the pen should be put down initially for the student constructed code  turtleModelCanvas : ID of the canvas DOM element where the model solution will be drawn. Defaults to  modelCanvas .  turtleStudentCanvas : ID of the canvas DOM element where student turtle will draw. Defaults to  studentCanvas .   Grading is based on comparing the commands executed by the model and student turtle. If the  executable_code  option is also specified, the code on each line of that option will be executed instead of the code in the student constructed lines. Note that the student code should use the variable  myTurtle  for commands to control the turtle in order for the grading to work.", 
            "title": "TurtleGrader"
        }, 
        {
            "location": "/courses/assessments/#unittestgrader", 
            "text": "UnitTestGrader  is a grader that executes student code and Skulpt unit tests", 
            "title": "UnitTestGrader"
        }, 
        {
            "location": "/courses/assessments/#languagetranslationgrader", 
            "text": "Code \"Translating\" grader", 
            "title": "LanguageTranslationGrader"
        }, 
        {
            "location": "/courses/assessments/#linebasedgrader", 
            "text": "LineBasedGrader  is a grader that treats student answers as correct if and only if they match the order and indentation found in  Initial Values . For incorrect answers, it highlights the lines that were not ordered or indented properly.", 
            "title": "LineBasedGrader"
        }, 
        {
            "location": "/courses/assessments/#sample-starter-pack_2", 
            "text": "There is a Starter Pack project that you can add to your account that includes examples of Parson's Puzzle assessments.   For Codio.com users:  Click here to install  For Codio.co.uk users:  Click here to install   and  Use Pack  to create into your Codio account to review.", 
            "title": "Sample Starter Pack"
        }, 
        {
            "location": "/courses/assessments/#sense-network", 
            "text": "Sense.Education  is an AI-Based code analysis package to give students feedback on their code submissions and is supported in Codio in the Sense.Network assessment type.  Students can submit their work and will be able to view feedback from Sense and if  One Attempt Only  is not enabled can review their code and submit again.  To help and track students activity through sense,  custom script  can be enabled.  This assessment type is only visible when the sense.network api key is entered in the  Organisation Integrations  area. See  organisation admin roles  for more on this.", 
            "title": "Sense Network"
        }, 
        {
            "location": "/courses/assessments/#assessment-definition_5", 
            "text": "The configuration fields for an assessment are split into five sections: General, Execution, Grading, Metadata, and Files.", 
            "title": "Assessment definition"
        }, 
        {
            "location": "/courses/assessments/#general_8", 
            "text": "Name  (required) is a short name that describes the assessment. This name will appear in teacher dashboards, so naming it clearly is important so teachers can see precisely which challenges are successfully met (or not) by students. In many cases, you do not want to see this text appear within the challenge text the student sees. To suppress this text, flip the  Show Name  switch next to the name field.  Instructions  (optional) is the text that should be shown to the user, written in Markdown.", 
            "title": "General"
        }, 
        {
            "location": "/courses/assessments/#execution_7", 
            "text": "Pre-exec command  (optional) is where a check can be run to confirm any code is compiling as required. If you store the scripts in the  .guides/secure  folder, they will run securely such that the student has no way of either viewing the script or viewing other files in that folder that might contain secure data.  Pre-exec feedback  (optional) field is used to show feedback if  Pre-exec command  fails,  otherwise will show pre-exec output.  Sense feedback Url  (required) to extract assignment id  Filename  (optional) is the path to the file to pass. If empty, will send the currently opened file", 
            "title": "Execution"
        }, 
        {
            "location": "/courses/assessments/#grading_8", 
            "text": "Gradable  enable if the assignment is to be used within the grade total for the assignment. If this is not enabled students can be given feedback on their submission for this assessment without it being graded. Please note  Answer and Rationale  will not return anything to the student if the assignment is not gradable. When enabled, each submission will override any previous submissions for grading purposes.  One Attempt Only  can be used to restrict the student to answering the question once. If not enabled, students will be able to edit their answer until the assignment is marked as Completed.  The  Points  field is the number of points allocated for the question. You can choose any positive numeric value.  Answer and Rationale  is where guidance for the assessment can be entered where the assessment is  Gradable . This is not required if the assignment is not gradable. This will be visible to the teacher when the project is opened using the  TODO Open as Teacher  method. This guidance information can also be shown to students after they have submitted their answer and also if they reload the assignment after marking it as completed. To enable this, flip the  Show Answer and Rationale to Student  switch below the guidance field.", 
            "title": "Grading"
        }, 
        {
            "location": "/courses/assessments/#metadata_8", 
            "text": "The Metadata section contains fields that further describe the current assessment using a variety of factors:   Bloom's Level : The options for this field correspond to the general levels of  Bloom's Taxonomy , which is a comprehensive system of classification for educational content. Your selection in this field should reflect the Bloom's level of the current assessment.  Learning Objectives :  What you enter in this field should reflect the specific educational goal of the current assessment. It is conventional that learning objective statements begin with \"SWBAT\" (Students Will Be Able To). For example, if an assessment asks the student to predict the output of a recursive code segment, then its Learning Objectives could be:  \"SWBAT follow the flow of recursive execution\" .  Tags : In addition to Bloom's Level and Learning Objectives, you may add arbitrary tags to an assessment. The existing tags,  Content  and  Programming Language , are required. To add your own tags, click  Add Tag  and populate their names and values in the empty input boxes at the bottom.", 
            "title": "Metadata"
        }, 
        {
            "location": "/courses/assessments/#files_8", 
            "text": "Sometimes, an assessment requires external files to function correctly. For example, if you wish to include an image in an assessment's instructions, your assessment would require the image to be present; if you have a custom grading script for an  Advanced Code Test , your assessment would require the script to be present. The Files section allows you to specify the current assessment's file dependencies such that if the assessment is ever distributed to students or other instructors, its dependencies are also included.   To mark a file to be included with the assessment, simply locate it in the file tree under  Project files  and tick the checkbox next to its name. Ticked files will appear under  Additional content .", 
            "title": "Files"
        }, 
        {
            "location": "/courses/authoring/", 
            "text": "Introduction\n\uf0c1\n\n\nCodio Guides is a powerful authoring tool creating rich tutorial and instructional content as well as assessments. Here are a few of the key features.\n\n\n\n\nEach page of content can \ncontrol the layout of the IDE\n\n\nOpen and close files, terminal windows and html page previews\n\n\nLaunch commands\n from the content page and pipe terminal output into the content page\n\n\nCreate manually and automatically graded \nquestions and assessments\n\n\nManage a \ntable of contents\n\n\n\n\nWhere is it?\n\uf0c1\n\n\nYou can launch the content authoring from\n\n\n\n\nThe menu, \nTools-\nGuide-\nEdit\n\n\nThe button at the top of the file tree as shown below\n\n\n\n\n\n\nProject, course assignment or book?\n\uf0c1\n\n\nBefore you start to author content you should be aware of the three different places you can create content using guides. Let's look at each of the three ways to create content and why you might choose each one.\n\n\nProjects\n\uf0c1\n\n\nA \nproject\n is simply a standalone Codio box. It may or may not have guides content. Projects are to be found in the \nProjects\n page on the main Codio dashboard.\n\n\n\n\nYou would want to choose a project as the place to create your content if you have individual, ad hoc assignments or examples that do not constitute more extensive coursework or are not part of a larger series of associated projects.\n\n\nA project can be \nassigned to a course\n at any time. All the students in that course will then be able to access that project and its content.\n\n\nThere are drawbacks to using projects to assign to students. If you have related projects and the number of projects grows, it can be hard to quickly find a project you want to assign to a course. There is also no way to arrange your projects into chronological order. Courses and books offer excellent solutions to this organizational problem.\n\n\nAssignments\n\uf0c1\n\n\nAn \nassignment\n is essentially the same as a project. The only difference is that your project assignments are located in the courses area in the main Codio dashboard and accessible to other teachers who can edit the item and to students in the course. Assignments are very easy to locate as they are tidily organized within the course module they belong to. You can also arrange your assignments within a course module.\n\n\n\n\nYou would typically use an ssignment if either of the following apply.\n\n\n\n\nYou have a logically related series of projects that you want to assign to a student that form a course module.\n\n\nYou have a collection of assessments relate to a course that are used for homework, lab assessments, projects etc.\n\n\n\n\nA course allows you to subdivide your course into modules and then chronologically arrange your assignments within your modules. When you create a course, you have to create at least one module. A module does nothing special other than contain assignments and are simply a nice way to group your assignments.\n\n\nThere is one minor drawback to project based assignments that you should be aware of. If students are working with a project assignment and want to look at tutorial content that is contained in another assignment, they have to switch assignments. This can take several seconds and can be irritating during a revision phase when they want to frequently switch assignments. For this reason, we created the book, which we will look at next.\n\n\nBook assignments\n\uf0c1\n\n\nA \nbook\n is intended to replicate a hard-copy book. It contains a lot of content, often an entire course of content. Let's look at the case of a course called \nIntroduction to Java\n. If this was a regular book, it might contain 500 pages. If you used project assignments to create this content, you might end up with a very large number of assignments, say 50.  As we mentioned above, when students are revising and want to randomly move between different assignments to review content, the can get frustrated by the time it takes to switch assignments.\n\n\nA book addresses this issue by offering sophisticated table to contents management with nested chapters and sections. As a result, you can put all of your content into a single book, with a single box running in the background. This means that when students want to revise, they are able to move to any location in the book without any delays.\n\n\nHowever, faculty will still often want to teach a course based on a book. To do this, you use a course but rather than creating a project assignment, you create a book based assignment. This allows you to point to any parts of a book for that assignment. Students can see the parts of the book that the assignment related to in the table of contents. The course and course manager is also able to specify that parts of the book not mapped to by the assignment either a) can be seen or b) cannot be seen in the course. See \nBook Visibility\n for more information.\n\n\n\n\nBook or project assignment?\n\uf0c1\n\n\nIt can still be a little confusing whether you should use a book based assignment or a project assignment, so here are some typical use cases.\n\n\n\n\n\n\nProject assignments\n - use when you have a collection of assessments with no or minimal tutorial content. Best used for homework or lab type assessments. If a student is not going to regularly switch assignments in a single session.\n\n\n\n\n\n\nBook assignments\n - use for tutorial content, examples and non-critical assessments. If students, when looking at one assignment, need to review content in another assignment, then a book is preferable as they can access all parts of the book if they need to.\n\n\n\n\n\n\nNote that you can mix both book and project assignments in a course.\n\n\nAuthor and student views\n\uf0c1\n\n\nThe experience when authoring differs from that of a student. Students are not able to view the authoring tools. When they start a assignment or project, if there is content present, it will automatically be shown. The author can also specify whether the student is able to close the content or not.\n\n\nIf you are an author, you will often want to view the content as a student will see it.\n\n\nEditing\n\uf0c1\n\n\nOnly an author is able to edit the content. Students and users with read-only rights will not be able to. \nClick here\n for details on page editing.\n\n\nPreview\n\uf0c1\n\n\nYou can press the preview button in the top right area of the edit pane. This will switch to preview mode. You can then switch back to editor mode by pressing the \nEditor\n button.\n\n\nYou can also start the preview mode from the \nTools-\nGuide-\nPlay\n.\n\n\nFinally, there is also a button at the top of the file tree that launches the content.\n\n\n\n\n\n\nCustomising IDE menu\n\uf0c1\n\n\nTo simplify the educational process for students, the top menu can be customised to remove options from students that they cannot override.\n\n\nThrough a \n.codio-menu\n file, a teacher can specify what menu items should be hidden.\nExample:\n\n\n{\n    \nLogo\n: false, // hides the Codio logo\n    \nCodio\n: false, // hides the Codio menu dropdown\n    \nProject\n: {\n         \nPermissions\n: false // hides the Permissions option in the Project menu dropdown\n    },\n    \nHelp\n: false, // hides the Help menu dropdown\n    \nRun\n: false, // hides the Run menu dropdown\n    \nPreview\n: false, // hides the Preview menu dropdown\n    \nDebugger\n: false, // hides the Debugger menu dropdown\n    \nStatus\n: false // hides the Status icon, user Avatar, user name and exit button\n}\n\n\n\n\nPlease note that if setting Status=false, students will need to use the 'Back to Dashboard' button shown on the last page of the guides to return to their dashboard area\n\n\nSetting up .codio-menu file:\n\n\n\n\nMenu items that the student will see:\n\n\n\n\nThe student will not see the .codio-menu file to be able to edit/change it.\n\n\nPlayer Options\n\uf0c1\n\n\n\n\nWhen the content is rendered to a student, various options can be controlled\n\n\n\n\nThe \nCollapse table of contents\n  button allows the user to collapse the content pane to provide larger working area if required.\n\n\nNavigation Buttons\n allows the user to navigate forward/backward in the guide.\n\n\nSettings\n allows the user to view the assignment as a teacher (e.g. show solution information hidden to students) change the Theme (light/dyslexic), Mark as Complete, change the font size, reset both the theme and fonts and to restore the current files (see below). See \nDyslexia Support\n section\n\n\nShow/Hide Section List\n Hamburger Icon allows the user to show/hide the section list.\n\n\n\n\nRestore current files\n\uf0c1\n\n\nThe Restore Current Files feature is a great way to reset/restore any files on that page to its initial state after hacking sample code around. Files can be restored from the menu as shown below.\n\n\n\n\nTable of contents management\n\uf0c1\n\n\nOnce you are in the Codio IDE, you are able to create and manage content. There are two ways to access the Codio Guide.\n\n\n\n\nPress then right arrow at the top of the file tree.\n\n\n\n\n\n- From the menu, select \nTools-\nGuide-\nEdit\n.\n\n\nEditing page content and actions\n\uf0c1\n\n\nPlease refer to the following pages for details in how to edit page content and control page actions.\n\n\n\n\nPage Editing\n for details on how to edit a pages content using markdown or HTML, hiding folders and other actions.\n\n\nSettings and page actions\n : Opening and closing files, panel configuration and other settings\n\n\n\n\nEditing content\n\uf0c1\n\n\nThe image below highlights the main components of the editing page.\n\n\n\n\nAccessing the table of contents\n\uf0c1\n\n\nTo open and close the table of contents, press the \nHamburger Icon\n at the top right. From here you can add and organize content.\n\n\n\n\nChapters, sections and pages\n\uf0c1\n\n\nA guide is comprised of pages organized into chapters and sections. A chapter is a top level item only. Sections can be placed at any location and nested to any depth.\n\n\nYou can add a new chapter, section or page by\n\n\n\n\nright clicking on the appropriate location within the table of contents.\n\n\nby first selecting the item in the table of contents below which the new element should be added and then pressing one of the buttons underneath the table of contents.\n\n\n\n\nAdding content to a chapter or section\n\uf0c1\n\n\nBy default, chapters and sections are passive and do not have page content assigned to them. However, you can add content by right-clicking the item and then selecting \nAdd content\n from the menu.\n\n\nIf you want to reverse the procedure, you right click and select \nRemove content\n.\n\n\nMultiple selection\n\uf0c1\n\n\nYou can multi-select pages as follows\n\n\n\n\nSelect an item then \nshift+click\n on a latter item to select all pages between the two items. This only works for items at the same level.\n\n\nUse \nctrl+click\n (PC/Linux) or  \ncmd+click\n (Mac) to multi select individual pages.\n\n\n\n\n\n\nDrag and Drop\n\uf0c1\n\n\nIt is very important to understand how drag and drop works within a table of contents as it is very powerful but can be confusing if you don\u2019t understand that drop process. Drag and drop works with individual or multiple selected pages.\n\n\nWhat is unusual about our drag and drop support is that the destination folder location is determined by where you drop.\n\n\n\n\nIf you drop in the top portion of the target item, the selection will be dropped above it at the same level.\n\n\nIf you drop in middle portion of the target item, the selection will be dropped within it if the target is a section.\n\n\nIf you drop in the lower portion of the target item, the selection will be dropped below the target at the same level.\n\n\n\n\nPage editing overview\n\uf0c1\n\n\nTo create new content or to edit existing content, go to the \nTools-\nGuide-\nEdit\n menu option.\n\n\nUse the layout modes to switch between editor, preview, and split view modes.\n\n\nWhen in preview mode, you can quickly switch back to editor mode by selecting the \nEditor\n button:\n\n\n\n\nAnatomy of the content editor\n\uf0c1\n\n\nBelow is a screenshot of the editor with the main components highlighted.\n\n\n\nEditor settings\n\uf0c1\n\n\nEditor settings gives you access to the key functions:\n\n\nPage\n\uf0c1\n\n\n\n\nLayout\n allows you to specify the panel layout you want to choose for this section,\n\n\nShow Folders\n allows you to define specific folders in your project that you wish to be visible when the current section is displayed,\n\n\nClose Tabs\n allows you to close all tabs open from previous section,\n\n\nSet Section as Chapter\n allows you to set the section as a chapter in your content,\n\n\nTeacher Only\n allows you to show content that only teachers are able to see.\n\n\nContent Type\n allows you to write your content in either \nMarkdown\n or \nHTML\n\n\n\n\nOpen Tabs\n\uf0c1\n\n\nThis allows you to specify:\n\n\n\n\nwhich files you want to automatically open when the current section is displayed,\n\n\nPreview (including external websites),\n\n\nOpen a Terminal window (including running a terminal command),\n\n\nwhich lines (if any) you wish to highlight within each file.\n\n\n\n\nAssessments\n\uf0c1\n\n\nThis allows you to set up assessments.\n\n\nMedia\n\uf0c1\n\n\nThis allows you to play audio files within your project.\n\n\nGlobal\n\uf0c1\n\n\n\n\n\n\nScripts\n allows you to point to one or more \n.js\n files in your project (usually you would have this somewhere within the \n.guides\n folder) that is run when the page is shown. This is especially useful when interacting with a button in a page of content.\n\n\nTheme\n allows you to select the default theme for people viewing the content. We currently have a light theme and will be adding a dark theme shortly. Dyslexic users can also choose a special theme from the Settings drop down in the content player.\n\n\nLexicon Topic\n  if you use this option, an icon will appear in the toolbar that will load the Lexikon window with the selected topic automatically selected. Students can still access the Lexicon from the \nTools\nLexicon\n menu (unless of course you are restricting the top menu available to them)\n\n\nSuppress page numbering\n allows you to suppress the section page numbers when in Play Mode.\n\n\nHide Menu\n allows you to hide the main Codio menu items in the IDE (Codio/Project/File/Edit etc) when the assignment is run in a \ncourse\n.\n\n\nAllow guide to be closed\n allows students to be able to close the content. It can be restarted by selecting the Start icon in the file tree:\n\n\n\n\n\n\n\n\nUse submit buttons\n see \nStudent submission options\n for more information\n\n\nUse mark as completed\n see \nStudent submission options\n for more information\n\n\nCollapsed on start\n starts the assignment with the guides pane collapsed. Students can show the content clicking on the hamburger icon on the right\n\n\n\nHide Section List\n hides the sections list in your content for the students. \n\n\nHide Back to Dashboard button\n hides this button that would otherwise show on the last page of the guides.\n\n\nProtect Layout\n prevents students from closing files in tabs.\n\n\n\n\nAuthoring guidelines\n\uf0c1\n\n\nHere are some guidelines for creating good quality content.\n\n\nMarkdown\n\uf0c1\n\n\nThe best way to author content is using markdown. It is extremely easy to write content that renders very nicely and without having to fiddle with HTML. You can embed HTML snippets into a markdown as well where you need full control.\n\n\nWe have a Cheat Sheet project that you can use to see the full capabilities. To fork this starter pack into your own account, please \nclick here\n. You should select the \nUse Pack\n option to create the project.\n\n\nCourses and Books\n\uf0c1\n\n\nWe strongly recommend that when you are creating content at scale then you have a thorough understanding of \nthe differences between projects, course assignments and books\n before starting.\n\n\nMedia assets\n\uf0c1\n\n\nWhen creating a book or a guide, you will often be working with images, video and other media. We recommend the following.\n\n\n\n\nImages should be placed in the \n.guides/img\n folder. You can create sub-folders for organizational purposes.\n\n\nVideos should be hosted on a 3rd party platform such as YouTube or Vimeo. You can embed these using regular HTML embed tags as available from those platforms.\n\n\nWeb based media such as Google Doc documents can be embedded using regular HTML embed tags as available from those platforms.\n\n\n\n\nCallout blocks\n\uf0c1\n\n\nOur markdown supports the use of special callout blocks. These provide icons and highlighted backgrounds for various concepts such as : Important, Info, Challenge, Topic, Definition, Meetups, Headline, Hackathon, Create, Calendar, Growth Hack, Debugging, Cross Discipline and more.\n\n\nPlease refer to the \nCallout\n section of the Books Cheat Sheet. If you have not done so already, fork \nthis starter pack\n into your own account. You should select the \nUse Pack\n option to create the project.\n\n\nDon't make pages too long\n\uf0c1\n\n\nAgain, this depends on your intended audience but try to keep each page reasonably brief. If the topic is a long one, you may want to break it up into several pages. This prevents lots of scrolling and allows students to digest information in manageable chunks.\n\n\nHidden folders\n\uf0c1\n\n\nYour content will often want to show code samples. Codio's recommended approach is to put each set of code samples into a dedicated folder. Then, using the page settings, you can specify this folder with the consequence that all non-specified folders are hidden from view in the file tree (if you choose to show it).\n\n\nThe benefit of hiding folders is that the student is not distracted by folders and files that are not relevant to the topic you are explaining.\n\n\nClick here\n for more details on folder hiding.\n\n\nAssessments\n\uf0c1\n\n\nCodio offers a range of \nmanually and auto-graded assessments\n. When used as a part of content, assessments are a very important way of giving students challenges and exercises that help internalize what they have been learning.\n\n\nWhen used in a course situation, assessments are extremely helpful to the teacher as all assessment results are fed automatically through to the teacher course dashboard, allowing them to monitor students' progress across a Course.\n\n\nMany of Codio's assessment types (code tests, multiple choice questions, text, fill in the blank and list-based) are auto-graded, saving teachers considerable amounts of time and can also offer students instant feedback on the correct answers.\n\n\nYou can also use the \nfree-text\n assessment type for answers that require a typed answer that can be manually graded by faculty. The free text type also support Latex, so math questions can be answered and graded.\n\n\nAssessments you create can be saved in your own library for use in other assignments. See \nhere\n for more information on this. We also have an extensive library of assessments that you are free to use as you wish. See \nhere\n for more details\n\n\nLayouts\n\uf0c1\n\n\nThe editor lets you create different panel layouts for your guide content and the layout can change from section to section.\n\n\nClick here\n for more information on panel layouts.\n\n\nMarkdown content editing\n\uf0c1\n\n\nCheat Sheet\n\uf0c1\n\n\nPlease refer to the \nCallout\n section of the Cheat Sheet. If you have not done so already, fork \nthis starter pack\n into your own account. You should select the \nUse Pack\n option to create the project.\n\n\nContent can be written in\n\n\n\n\nMarkdown\n - the recommended option and described on this page\n\n\nHTML\n allowing more detailed control but requiring more time; described on the next page.\n\n\n\n\nWhen you are in edit mode, you can select a section by\n\n\n\n\nusing the navigation buttons in the header area\n\n\nselecting a section from the section list\n\n\n\n\n\n\nRenaming the Section\n\uf0c1\n\n\nYou can rename your section by clicking on the section title in the header area.\n\n\nWriting content\n\uf0c1\n\n\nYou can then start writing your content in the main content area.\n\n\nMarkdown\n\uf0c1\n\n\nFor those of you not familiar with Markdown, it is an extremely easy way of writing content without having to worry about HTML.\n\n\nWhen in Play Mode or as you preview, your content is rendered as students will see it. You can also override the default CSS styling if you wish. Go to \nTools\nGuide\nAdd Custom CSS\n\n\n\n\n'Reset Custom CSS' will restore the default CSS styling\n\n\nClick here for details on how to insert \nimages, videos and hyperlinks\n.\n\n\nHere is a summary of the Markdown formatting codes\n\n\nHeaders/Titles\n\uf0c1\n\n\nTo display a header or title, you can use the \n#\n character at the start of the line. The more \n#\n characters you add, the smaller the font.\n\n\n# Big title\n## Smaller title\n# Even smaller title\n## etc.\n\n\n\n\nBold and Italic\n\uf0c1\n\n\nTo create bold or italic text, you use \n**\n and \n*\n either side of the respective words.\n\n\nI want to say that **this is really important**, you know\nI *really* like chocolate\n\n\n\n\nBullet Lists\n\uf0c1\n\n\nTo create a list of bullet points, you start the line with a \n-\n\n\n- Bullet 1\n- Bullet 2\n- Bullet 3\n- etc\n\n\n\n\nNumbered Lists\n\uf0c1\n\n\nTo create a numbered list, you start the line with a \n1.\n The numbers are automatically calculated for you.\n\n\n1. Item 1\n1. Item 2\n1. Item 3\n1. etc\n\n\n\n\nCode Blocks\n\uf0c1\n\n\nIf you want to show some code, styled with the courier font, in a box and with syntax highlighting applied you surround your code block with three backticks \n```\n. For example, the following javascript snippet\n\n\nvar i;\nfor(i = 0; i \n 10; i++) {\n   document.write(i);\n}\n\n\n\n\nis written as\n\n\n```js\n\nvar i;\nfor(i = 0; i \n 10; i++) {\n   document.write(i);\n}\n\n```\n\n\nNote that you can specify a language type after the top 3 back ticks. Entering \npython\n after the backticks would apply syntax highlighting for python. Many languages are supported. \nSee a full list of supported languages here\n. You should search for your language and then use the \nalias\n shown.\n\n\nCode Segments\n\uf0c1\n\n\nIf you want to insert a piece of code inline with the rest of your text, then you use a single ` (backtick) character either side of the text. For example,\n\n\nWe can define a variable \nvar x;\n if we like\n\n\n... is written in markdown as\n\n\nWe can define a variable `var x;` if we like\n\n\nIndented Lists\n\uf0c1\n\n\nIf you want to indent a list, then indent just 2 spaces and it will indent.\n\n\n  - Bullet 1\n  - Bullet 2\n  - Bullet 3\n  - etc\n\n\n\n\nCallout Blocks\n\uf0c1\n\n\nIf you want to show a callout block a number of options are available and others can be easily added if required\n\n\n\n\nimportant\n\n\ninfo\n\n\nwarning\n\n\ntopic\n\n\ndefinition\n\n\nchallenge\n\n\nguidance\n\n\nmeetup\n\n\nhackathon\n\n\ncreate\n\n\ncalendar\n\n\ngrowthhack\n\n\nxdiscipline\n\n\ndebugging\n\n\n\n\ne.g.\n\n\n|||info\n# My Title\n\nSome text\n\n|||\n\n\n\n\n\n\nThe \nGuidance\n callout block is only visible in play mode to designated teachers within a course. It is not visible for students.\n\n\nHyperlinks, Images, Videos \n iframes\n\uf0c1\n\n\nWe describe these in \nthis section\n.\n\n\nHTML\n\uf0c1\n\n\nYou can include HTML tags\n\n\nLatex / MathJax\n\uf0c1\n\n\nLatex is supported using \nMathJax\n. For example\n\n\nWhen $a \\ne 0$ there are two solutions to $(ax^2 + bx + c = 0)$ and they are $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$\n\nand for multiple lines we do the following\n\n$$\ny=x^2\ny=\\frac{x^2}{x+1}\n$$\n\n\n\n\nClick here\n for more details on Latex and Mathjax.\n\n\n\n\nInline math equations are encapsulated in a single \n$\n like this: $\\omega = d\\phi / dt$.\n\n\nCheat Sheet\n\uf0c1\n\n\nCheck out our \nCheat Sheet\n and \nUse Pack\n to create the Cheet Sheet project in your Codio account.\n\n\nPreviewing content\n\uf0c1\n\n\nPreview mode\n\uf0c1\n\n\nYou will regularly want to switch from editing your page content to preview it as users will see it. The best way to do this is to press the preview button in the top right of the content window. When the guide renders, it would open at the current page you were editing.\n\n\n\n\nTo return to the edit mode, press the \nEditor\n button and you will be returned to edit mode on the page that you were viewing in Play mode.\n\n\n\n\nSplit screen\n\uf0c1\n\n\nAnother approach that works for the current page is to switch layout mode to split view mode by selecting the 2nd from left button in the header bar.\n\n\n\n\nPlay\n\uf0c1\n\n\nYou can start the Guide player from the \nTools-\nGuide-\nPlay\n menu or selecting the '\n' icon in the file tree\n\n\nHTML content editing\n\uf0c1\n\n\nWe do not recommend this setting unless you have very specific reasons. It is much harder to use and maintain than markdown but for those who want ultimate control over appearance it is a good option.\n\n\nSetting HTML\n\uf0c1\n\n\nYou can specify that an individual page be authored using HTML from the content \nSettings\n. You will find the \nContent type\n dropdown where you can switch between HTML and markdown.\n\n\nCSS header and footer\n\uf0c1\n\n\nIn order to style your content properly, you should use the \nEdit HTML header\n and \nEdit HTML footer\n settings. These can be found in the main \nSettings\n area on the \nGlobal\n tab.\n\n\nThe header and footer information wrap the HTML content for your page. Below is a typical example of a header.\n\n\nhtml\n\n\nhead\n\n  \nmeta charset=\nUTF-8\n\n        \ntitle\nbjlo2e_ch04-1\n/title\n\n        \nlink href=\n.guides/content/css/my-style.css\n rel=\nstylesheet\n type=\ntext/css\n /\n\n        \nscript src=\nhttps://codio.com/codio-client.js\n type=\ntext/javascript\n/script\n\n        \nscript src=\n.guides/content/script/my-script.js\n type=\ntext/javascript\n/script\n\n    \n/head\n\n\n\nbody\n\n\n\n\n\nAnd here is the footer.\n\n\n/body\n\n\n/html\n\n\n\n\n\nSupport functions\n\uf0c1\n\n\nIn a page authored using Markdown, you are able to create buttons and other actions. We provide some javascript functions that support the same functionality.\n\n\nImportant\n : if you use any of the functions listed below then you must load \nhttps://codio.com/codio-client.js\nin the HTML Header as shown in the example above.\n\n\n\n\ncodio.run(command, callback)\n - Run a command on the box. \ncallback\n will fire once executed and should be used to communicate back to the user.\n\n\ncodio.runAndShow(command, outputElementId)\n - Run a command on the box. All \nstdout\n will be displayed in \noutputElementId\n.\n\n\ncodio.open('file', path, panel_num)\n - Opens a file located in \npath\n in the \npanel_num\n panel, where \n0\n is the first panel from top left\n\n\ncodio.open('terminal', command, panel_num)\n-  Opens a terminal window and executes \ncommand\n. \npanel_num\n specifies the location of the panel, where \n0\n is the first panel from top left.\n\n\ncodio.open('preview', url, panel_num)\n - Opens a preview window at \nurl\n. \npanel_num\n specifies the location of the panel, where \n0\n is the first panel from top left.\n\n\ncodio.goToNextSection()\n - Moves to the next page in the guide.\n\n\ncodio.goToPreviousSection()\n - Moves to the previous page in the guide.\n\n\ncodio.switchUnit(unitId)\n - Changes to a different assignment. The assignment ID is found by opening the assignment and getting the ID from the URL.\n\n\ncodio.goToSectionTitled('Section Title')\n - Switches to the page whose title is \"Section Title'.\n\n\ncodio.assessments.check(assessmentId)\n - Executes the assessment\n\n\ncodio.assessments.reset(assessmentId)\n - Resets any response and score that the user may have already provided for \nassessmentId\n.\n\n\ncodio.assessments.get(assessmentId, callback)\n - Gets the result data for a completed assessment\n\n\ncodio.assessments.send(assessmentId, answer, points, callback)\n - Sends result data for a custom assessment. \nanswer\n contains the custom result data for \nassessment\n and will be stored in Codio. You can use \ncodio.assessments.get()\n to reconstruct the output for an already answered question.\n\n\ncodio.resetCurrentFiles()\n - Allows students to restore current files in guides within your content.\n\n\n\n\nTeacher only content  TODO\n\uf0c1\n\n\nTeacher only content can be viewed by teachers when:\n\n\n\n\nusing \nopen as teacher\n opening a assignment within a course module in a course\n\n\nviewing student code\n within a course\n\n\nworking on a assignment in a \ncourse\n with the 'View as teacher' function enabled\n\n\n\n\n\nWarning\n\n\n\n\nIf your project is public and a user accesses this project via the public listing of your account then they will have access to the solutions.\n\n\n\n\nYou can make content available only to course teachers in the following ways.\n\n\nEntire page\n\uf0c1\n\n\nIf you want a page and its appearance in the table of contents to be only visible to a teacher, then you should enable the \nTeacher Only\n slider in the \npage settings\n.\n\n\nSelected content within page\n\uf0c1\n\n\nIf you want to hide a certain piece of information \nwithin a page\n from students then you should include all such content within a page within \n|||guidance ..... |||\n. An example is shown below.\n\n\n|||guidance\n# Solution\nThis solution will only be shown\n\n- to teachers\n- provided the content is published within a assignment\n- if you share a project normally or it is public and a student loads it, they have access to this content.\n\n|||\n\n\n\n\nTeacher only content can also be shown to teachers within an assessment question. This allows an question's answer rationale to be shown. Please refer to the \nassessments section\n for more details.\n\n\nCustom Buttons\n\uf0c1\n\n\nCustom buttons are a powerful feature that let you insert a button into your guide content that when pressed can carry out any custom action.\n\n\nThere are a number of ways to use a custom button\n\n\nTo jump to a page in the content\n\uf0c1\n\n\nThis will jump to a specific page in the guide\n\n\n{Button Text | go-to-section-titled}(section title)\n\n\n\n\ne.g.\n\n\n{Go to Section: LTI | go-to-section-titled}(LTI)\n\n\n\n\nTo launch a process\n\uf0c1\n\n\nThis will launch a process and execute a terminal command.\n\n\n{Button Text}(command paramater1 parameter2 parameterN)\n\n\n\n\nLaunching a process in a terminal window\n\uf0c1\n\n\nThere are cases where you will want to launch a command in a dedicated terminal window. A typical example is when student code requires input from the user. Codio cannot handle standard input through the guides window, so use the following button command.\n\n\n{Button Text | terminal}(command)\n\n\n\n\nLaunching a debugger configuration\n\uf0c1\n\n\nYou can launch a debugger configuration as shown below. It is important to specify the configuration name exactly.\n\n\n{Button text | debugger}(debugger configuration name)\n\n\n\n\n\n\nTo restore current files in guides\n\uf0c1\n\n\nStudents can restore current files to the default setting from the \nsetting\n menu but you can also offer them a button within your guides content as well.\n\n\n{Button text | reset}(optional commands to run)\n\n\n\n\nWriting a custom event handler\n\uf0c1\n\n\nThis offers you the most flexibility and allows you to write your own custom button press handler. A common use case is executing tests on user code.\n\n\nTo do this, you should use the following format for your custom button.\n\n\n{Button Text|custom}(myId)\n\n\n\n\nIf you wish to use a custom event handler to allow students to restore current files and handle other functions, you can do so but you will need to include this code in your custom script\n\n\nwindow.addEventListener('codio-button-custom', function (ev) {\n  if(codio) {\n    codio.resetCurrentFiles()\n  }\n});\n\n\n\n\nLoading Scripts\n\uf0c1\n\n\nYou should point your content page to a script file to load javascript scripts. You can do this from \nSettings\nGlobal\nScripts\n.\n\n\n\n\n\n\nEvent Listener\n\uf0c1\n\n\nThe event listener is able to execute your custom task. It will display a custom message area beneath it into which you can write your own results data. The message data can be a custom message that a test might return and can be plain text or HTML.\n\n\nFor the event listener to run you should include in \nSettings\nGlobal\nScripts\n:\n\n\n\n\nhttps://codio.com/codio-client.js (where your account is running on codio.com)\n\n\nhttps://codio.co.uk/codio-client.js (where your account is running on codio.co.uk)\n\n\n\n\nThe icon that appears in the top left of the message area can be controlled from your event listener, as shown in the example below.\n\n\nwindow.addEventListener('codio-button-custom', function (ev) {\n  console.log('id:', ev.id, 'cmd:', ev.cmd, ev);\n  if (codio) {\n    codio.setButtonValue(ev.id, codio.BUTTON_STATE.PROGRESS, 'Checking');\n    codio.setButtonValue(ev.id, codio.BUTTON_STATE.FAILURE, 'Bad Job :(');\n    codio.setButtonValue(ev.id, codio.BUTTON_STATE.INVALID, 'Internal error');\n    window.setTimeout(function () {\n      codio.setButtonValue(ev.id, codio.BUTTON_STATE.SUCCESS, 'Extremely well done!');\n    },1000);\n\n  }\n});\nconsole.log('test.js script loaded');\n\n\n\n\n\n\nev.id\n is the contents internal id for the button.\n\n\nev.cmd\n is the \nmyId\n text you specified in the button with \n{Button Text|custom}(myId)\n. This is typically used to indicate the id of the test you wish to run or just the specific button that is being pressed.\n\n\n\n\nThe available button commands are\n\n\ncodio.setButtonValue(ev.id, codio.BUTTON_STATE.PROGRESS, 'Checking..');\ncodio.setButtonValue(ev.id, codio.BUTTON_STATE.SUCCESS, 'Good job!');\ncodio.setButtonValue(ev.id, codio.BUTTON_STATE.FAILURE, 'Bad Job :(');\ncodio.setButtonValue(ev.id, codio.BUTTON_STATE.INVALID, 'Internal error');\n\n\n\n\nThe 3rd parameter can contain any text to display in the button's attached message area. It can be plain text or HTML.\n\n\nAdding media\n\uf0c1\n\n\nYou can insert Audio, Images and Videos into a page.\n\n\nAudio\n\uf0c1\n\n\nYou can insert and play audio files within your project.\n\n\nOn the page you wish to play Audio, go to the \nSettings\n area where you can define the source audio file along with any actions the should be triggered at specific times during playback.\n\n\n\n\n\n\nSource Name\n - select the source file either from \n.guides/media\n folder if already uploaded to the project or upload directly from your PC where it will then be stored in the \n.guides/media\n folder.\n\n\nAdd Action\n - specifies actions that are triggered at specific times during playback. The following options are available.\n\n\n\n\nOpen file\n  Close file\n  Open Terminal\n  Close Terminal\n  Run command\n  Highlight\n  Close all tabs\n  Pause\n\n\nImages\n\uf0c1\n\n\nInserting an image is similar. Here are some examples. PNG and JPG image types are supported. Note that the 2nd and 3rd examples point to images within your project.\n\n\nGenerally speaking, you should put your images in the \n.guides/img\n folder in order to keep the rest of your workspace free of extraneous content for the benefit of the student.\n\n\n![optional alt tag](http://any-url-you-like.png)\n![](image-in-project-root.jpg)\n![](.guides/img/best-place-for-images.png)\n\n\n\n\nYou can also drag/drop images from your project file tree into your content. They will be automatically tagged with the correct path.\n\n\nFor Markdown pages:\n\n\n![.guides/img/displayimage](.guides/img/displayimage.png)\n\n\n\n\nFor HTML pages:\n\n\n![.guides/img/displayimage](.guides/img/displayimage.png)\n\n\n\n\nVideos\n\uf0c1\n\n\nIncluding embedded videos are also possible using the standard \niframe\n html tag.\n\n\nYouTube\n\uf0c1\n\n\nIf you wish to embed a YouTube video, go to the Share option and select \nEmbed\n to obtain the code snippet.\n\n\n\n\niframe width=\n560\n height=\n315\n src=\n//www.youtube.com/embed/1JNhoVbmNAo\n frameborder=\n0\n allowfullscreen\n/iframe\n\n\n\n\n\nVimeo\n\uf0c1\n\n\nIf you wish to embed a Vimeo video, go to the Share option and select \nEmbed\n to obtain the code snippet.\n\n\n\n\niframe src=\n//player.vimeo.com/video/110479088\n width=\n500\n height=\n281\n frameborder=\n0\n webkitallowfullscreen mozallowfullscreen allowfullscreen\n/iframe\n \np\na href=\nhttp://vimeo.com/110479088\nCodio - Innovation in Computer Programming Education\n/a\n from \na href=\nhttp://vimeo.com/user20752628\nCodio\n/a\n on \na href=\nhttps://vimeo.com\nVimeo\n/a\n.\n/p\n\n\n\n\n\nHyperlinks\n\uf0c1\n\n\nCreating a hyperlink on a piece of text is easy.\n\n\nGo to [Google](google.com) to look stuff up.\n\n\n\n\niframes\n\uf0c1\n\n\nYou can embed content in an iframe using the \niframe\n html tag.\n\n\nTo embed from Google Docs, go to \nFile\nPublish\n to Web and select \nEmbed\n to get the code snippet\n\n\n\n\nExample Projects\n\uf0c1\n\n\nhttps://codio.com/codio-units/java-example is a project that you can \nfork\n into your own Codio account and shows you how to create code tests and setup automatic marking. We would also recommend that you check out our \nGuides Cheat Sheet\n and \nUse Pack\n to create into your Codio account to review.\n\n\nOpen/close tabs from content\n\uf0c1\n\n\nYou can include links in your content to perform the same open and close actions as you do from the \nopen tabs\n dialog.\n\n\nSyntax Summary\n\uf0c1\n\n\nThe syntax is as follows and actions can be chained together using, separated by a \n;\n.\n\n\n[Hyperlink text](open_file file1, file2; cmd ls -al)\n\n\n\n\nOpening directives\n\uf0c1\n\n\n\n\nopen_file file1 file2 fileN panel=0\n where panel is optional, in which case the default panel (0) will be used if not specified.\n\n\nopen_preview file panel=0\n where panel is optional, in which case the default panel (0) will be used if not specified.\n\n\nopen_terminal command panel=0\n where command (a system command) is optional and where panel is optional, in which case the default panel (0) will be used if not specified.\n\n\ncmd systemcommand argument1 argument2 argumentN\n\n\nopen_tutor file panel=0\n to open \nvisualiser\n and where panel is optional, in which case the default panel (0) will be used if not specified.\n\n\n\n\nClosing directives\n\uf0c1\n\n\n\n\nclose_all\n closes all tabs in all panels, except the Guide itself.\n\n\nclose_all panel=0\n closes all tabs in panel 0.\n\n\nclose_file file1\n closes \nfile1\n in all panels\n\n\nclose_file file1 file2 fileN panel=0\n where panel is optional, in which case the default panel (0) will be used.\n\n\nclose_preview\n behaves like \nclose_file\n for preview tabs.\n\n\nclose_terminal\n behaves like \nclose_file\n for terminal tabs.\n\n\nclose_tutor file panel=0\n where visualiser is closed for file open in panel 0\n\n\n\n\nImportant - spaces and ; in file names and commands\n\uf0c1\n\n\nIf any of your files contain spaces in the names, then you should enclose the file name in double quotes\n\n\n\n\nopen_file \"file name.txt\"\n\n\n\n\nIf you use \ncmd\n and the command has a \n;\n character in it, then you should also use quotes\n\n\n\n\ncmd \"cp file1 file2; cp file3 file4\"\n\n\n\n\nExamples\n\uf0c1\n\n\nOpen a file \nfile.txt\n\n\n[Click here](open_file file.txt)\n\n\n\n\nOpen a file \nfile.txt\n in panel 1\n\n\n[Click here](open_file file.txt panel=1)\n\n\n\n\nOpen a file \nfile.txt\n in panel 1, with a code reference and highlight 3 lines\n\n\n[Click here](open_file file.txt panel=1 ref=\nsome text in your code\n count=3)\n\n\n\n\nOpen files \nfile.txt\n and \nfile2.txt\n\n\n[Click here](open_files file.txt file2.txt)\n\n\n\n\nOpen a file \nfile.txt\n and preview of \nfile.txt\n in panel 2\n\n\n[Click here](open_file file.txt; open_preview file.txt panel=2)\n\n\n\n\nRun a command then open a preview of \nfile.txt\n in panel 2\n\n\n[Click here](cmd cp source.txt target.txt; open_preview file.txt panel=2)\n\n\n\n\nOpen a Terminal window in panel 1\n\n\n[Click here](open_terminal panel=2)\n\n\n\n\nClose \nfile.txt\n and open a preview \nfile.txt\n\n\n[Click here](close_file file.txt; open_preview file.txt)\n\n\n\n\nClose all open files, previews and terminals in all panels, then open a file \nfile.txt\n\n\n[Click here](close_all; open_file file.txt)\n\n\n\n\nClose all open files, previews and terminals, then open a file \nfile.txt\n\n\n[Click here](close_all; open_file file.txt)\n\n\n\n\nClose all open files, previews and terminals that are in panel 2, then open a file \nfile.txt\n\n\n[Click here](close_all panel=2; open_file file.txt)\n\n\n\n\nHiding folders\n\uf0c1\n\n\nYour content will often want to show code samples. Codio's recommended approach is to put each set of code samples into a dedicated folder. Then, using \nShow Folders\n on \npage settings \n, you can specify this folder. All non-specified folders are hidden from view in the file tree.\n\n\nLatex for math expressions\n\uf0c1\n\n\nLatex is ideal for entering mathematical expressions into your pages. You can also insert Latex expressions into many assessment fields. Codio uses \nMathjax\n for the rendering of all Latex expressions, so certain macros are not supported.\n\n\nInline Latex expressions\n\uf0c1\n\n\nAn example of an inline expression is \n$\\frac{x^3+1}{x^2-1}$\n. When your page is shown, the Latex expression will render appropriately.\n\n\nDisplay mode Latex expressions\n\uf0c1\n\n\nYou can also render one more more lines of Latex expressions in a more prominent format as shown below.\n\n\n$$\ny=x^2\n\\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6}\n$$\n\n\n\n\nLatex Resources\n\uf0c1\n\n\nGoogle is often your friend when it comes to discovering Latex syntax. However, here are two very useful references that will accelerate things for you.\n\n\nMathjax\n\uf0c1\n\n\nHere is a list\n of Latex commands supported by Mathjax.\n\n\nStack Exchange\n\uf0c1\n\n\nHere is a page on Math StackExchange that has an excellent overview of Mathjax/Latex syntax as well as explaining general concepts.\n\n\nClick here :\nStack Exchange\n\n\nDetextify\n\uf0c1\n\n\nDetextify\n is an excellent way of finding a Latex symbol by free hand drawing it on the screen using your mouse or touchpad.\n\n\n\n\nImportant:\n you should not use commands that are not in the standard package. In the image above, you can see the last one has a \\usepackage command. Symbols in a special package may not work.", 
            "title": "Content Authoring with Guides"
        }, 
        {
            "location": "/courses/authoring/#introduction", 
            "text": "Codio Guides is a powerful authoring tool creating rich tutorial and instructional content as well as assessments. Here are a few of the key features.   Each page of content can  control the layout of the IDE  Open and close files, terminal windows and html page previews  Launch commands  from the content page and pipe terminal output into the content page  Create manually and automatically graded  questions and assessments  Manage a  table of contents", 
            "title": "Introduction"
        }, 
        {
            "location": "/courses/authoring/#where-is-it", 
            "text": "You can launch the content authoring from   The menu,  Tools- Guide- Edit  The button at the top of the file tree as shown below", 
            "title": "Where is it?"
        }, 
        {
            "location": "/courses/authoring/#project-course-assignment-or-book", 
            "text": "Before you start to author content you should be aware of the three different places you can create content using guides. Let's look at each of the three ways to create content and why you might choose each one.", 
            "title": "Project, course assignment or book?"
        }, 
        {
            "location": "/courses/authoring/#projects", 
            "text": "A  project  is simply a standalone Codio box. It may or may not have guides content. Projects are to be found in the  Projects  page on the main Codio dashboard.   You would want to choose a project as the place to create your content if you have individual, ad hoc assignments or examples that do not constitute more extensive coursework or are not part of a larger series of associated projects.  A project can be  assigned to a course  at any time. All the students in that course will then be able to access that project and its content.  There are drawbacks to using projects to assign to students. If you have related projects and the number of projects grows, it can be hard to quickly find a project you want to assign to a course. There is also no way to arrange your projects into chronological order. Courses and books offer excellent solutions to this organizational problem.", 
            "title": "Projects"
        }, 
        {
            "location": "/courses/authoring/#assignments", 
            "text": "An  assignment  is essentially the same as a project. The only difference is that your project assignments are located in the courses area in the main Codio dashboard and accessible to other teachers who can edit the item and to students in the course. Assignments are very easy to locate as they are tidily organized within the course module they belong to. You can also arrange your assignments within a course module.   You would typically use an ssignment if either of the following apply.   You have a logically related series of projects that you want to assign to a student that form a course module.  You have a collection of assessments relate to a course that are used for homework, lab assessments, projects etc.   A course allows you to subdivide your course into modules and then chronologically arrange your assignments within your modules. When you create a course, you have to create at least one module. A module does nothing special other than contain assignments and are simply a nice way to group your assignments.  There is one minor drawback to project based assignments that you should be aware of. If students are working with a project assignment and want to look at tutorial content that is contained in another assignment, they have to switch assignments. This can take several seconds and can be irritating during a revision phase when they want to frequently switch assignments. For this reason, we created the book, which we will look at next.", 
            "title": "Assignments"
        }, 
        {
            "location": "/courses/authoring/#book-assignments", 
            "text": "A  book  is intended to replicate a hard-copy book. It contains a lot of content, often an entire course of content. Let's look at the case of a course called  Introduction to Java . If this was a regular book, it might contain 500 pages. If you used project assignments to create this content, you might end up with a very large number of assignments, say 50.  As we mentioned above, when students are revising and want to randomly move between different assignments to review content, the can get frustrated by the time it takes to switch assignments.  A book addresses this issue by offering sophisticated table to contents management with nested chapters and sections. As a result, you can put all of your content into a single book, with a single box running in the background. This means that when students want to revise, they are able to move to any location in the book without any delays.  However, faculty will still often want to teach a course based on a book. To do this, you use a course but rather than creating a project assignment, you create a book based assignment. This allows you to point to any parts of a book for that assignment. Students can see the parts of the book that the assignment related to in the table of contents. The course and course manager is also able to specify that parts of the book not mapped to by the assignment either a) can be seen or b) cannot be seen in the course. See  Book Visibility  for more information.", 
            "title": "Book assignments"
        }, 
        {
            "location": "/courses/authoring/#book-or-project-assignment", 
            "text": "It can still be a little confusing whether you should use a book based assignment or a project assignment, so here are some typical use cases.    Project assignments  - use when you have a collection of assessments with no or minimal tutorial content. Best used for homework or lab type assessments. If a student is not going to regularly switch assignments in a single session.    Book assignments  - use for tutorial content, examples and non-critical assessments. If students, when looking at one assignment, need to review content in another assignment, then a book is preferable as they can access all parts of the book if they need to.    Note that you can mix both book and project assignments in a course.", 
            "title": "Book or project assignment?"
        }, 
        {
            "location": "/courses/authoring/#author-and-student-views", 
            "text": "The experience when authoring differs from that of a student. Students are not able to view the authoring tools. When they start a assignment or project, if there is content present, it will automatically be shown. The author can also specify whether the student is able to close the content or not.  If you are an author, you will often want to view the content as a student will see it.", 
            "title": "Author and student views"
        }, 
        {
            "location": "/courses/authoring/#editing", 
            "text": "Only an author is able to edit the content. Students and users with read-only rights will not be able to.  Click here  for details on page editing.", 
            "title": "Editing"
        }, 
        {
            "location": "/courses/authoring/#preview", 
            "text": "You can press the preview button in the top right area of the edit pane. This will switch to preview mode. You can then switch back to editor mode by pressing the  Editor  button.  You can also start the preview mode from the  Tools- Guide- Play .  Finally, there is also a button at the top of the file tree that launches the content.", 
            "title": "Preview"
        }, 
        {
            "location": "/courses/authoring/#customising-ide-menu", 
            "text": "To simplify the educational process for students, the top menu can be customised to remove options from students that they cannot override.  Through a  .codio-menu  file, a teacher can specify what menu items should be hidden.\nExample:  {\n     Logo : false, // hides the Codio logo\n     Codio : false, // hides the Codio menu dropdown\n     Project : {\n          Permissions : false // hides the Permissions option in the Project menu dropdown\n    },\n     Help : false, // hides the Help menu dropdown\n     Run : false, // hides the Run menu dropdown\n     Preview : false, // hides the Preview menu dropdown\n     Debugger : false, // hides the Debugger menu dropdown\n     Status : false // hides the Status icon, user Avatar, user name and exit button\n}  Please note that if setting Status=false, students will need to use the 'Back to Dashboard' button shown on the last page of the guides to return to their dashboard area  Setting up .codio-menu file:   Menu items that the student will see:   The student will not see the .codio-menu file to be able to edit/change it.", 
            "title": "Customising IDE menu"
        }, 
        {
            "location": "/courses/authoring/#player-options", 
            "text": "When the content is rendered to a student, various options can be controlled   The  Collapse table of contents   button allows the user to collapse the content pane to provide larger working area if required.  Navigation Buttons  allows the user to navigate forward/backward in the guide.  Settings  allows the user to view the assignment as a teacher (e.g. show solution information hidden to students) change the Theme (light/dyslexic), Mark as Complete, change the font size, reset both the theme and fonts and to restore the current files (see below). See  Dyslexia Support  section  Show/Hide Section List  Hamburger Icon allows the user to show/hide the section list.", 
            "title": "Player Options"
        }, 
        {
            "location": "/courses/authoring/#restore-current-files", 
            "text": "The Restore Current Files feature is a great way to reset/restore any files on that page to its initial state after hacking sample code around. Files can be restored from the menu as shown below.", 
            "title": "Restore current files"
        }, 
        {
            "location": "/courses/authoring/#table-of-contents-management", 
            "text": "Once you are in the Codio IDE, you are able to create and manage content. There are two ways to access the Codio Guide.   Press then right arrow at the top of the file tree.   \n- From the menu, select  Tools- Guide- Edit .", 
            "title": "Table of contents management"
        }, 
        {
            "location": "/courses/authoring/#editing-page-content-and-actions", 
            "text": "Please refer to the following pages for details in how to edit page content and control page actions.   Page Editing  for details on how to edit a pages content using markdown or HTML, hiding folders and other actions.  Settings and page actions  : Opening and closing files, panel configuration and other settings", 
            "title": "Editing page content and actions"
        }, 
        {
            "location": "/courses/authoring/#editing-content", 
            "text": "The image below highlights the main components of the editing page.", 
            "title": "Editing content"
        }, 
        {
            "location": "/courses/authoring/#accessing-the-table-of-contents", 
            "text": "To open and close the table of contents, press the  Hamburger Icon  at the top right. From here you can add and organize content.", 
            "title": "Accessing the table of contents"
        }, 
        {
            "location": "/courses/authoring/#chapters-sections-and-pages", 
            "text": "A guide is comprised of pages organized into chapters and sections. A chapter is a top level item only. Sections can be placed at any location and nested to any depth.  You can add a new chapter, section or page by   right clicking on the appropriate location within the table of contents.  by first selecting the item in the table of contents below which the new element should be added and then pressing one of the buttons underneath the table of contents.", 
            "title": "Chapters, sections and pages"
        }, 
        {
            "location": "/courses/authoring/#adding-content-to-a-chapter-or-section", 
            "text": "By default, chapters and sections are passive and do not have page content assigned to them. However, you can add content by right-clicking the item and then selecting  Add content  from the menu.  If you want to reverse the procedure, you right click and select  Remove content .", 
            "title": "Adding content to a chapter or section"
        }, 
        {
            "location": "/courses/authoring/#multiple-selection", 
            "text": "You can multi-select pages as follows   Select an item then  shift+click  on a latter item to select all pages between the two items. This only works for items at the same level.  Use  ctrl+click  (PC/Linux) or   cmd+click  (Mac) to multi select individual pages.", 
            "title": "Multiple selection"
        }, 
        {
            "location": "/courses/authoring/#drag-and-drop", 
            "text": "It is very important to understand how drag and drop works within a table of contents as it is very powerful but can be confusing if you don\u2019t understand that drop process. Drag and drop works with individual or multiple selected pages.  What is unusual about our drag and drop support is that the destination folder location is determined by where you drop.   If you drop in the top portion of the target item, the selection will be dropped above it at the same level.  If you drop in middle portion of the target item, the selection will be dropped within it if the target is a section.  If you drop in the lower portion of the target item, the selection will be dropped below the target at the same level.", 
            "title": "Drag and Drop"
        }, 
        {
            "location": "/courses/authoring/#page-editing-overview", 
            "text": "To create new content or to edit existing content, go to the  Tools- Guide- Edit  menu option.  Use the layout modes to switch between editor, preview, and split view modes.  When in preview mode, you can quickly switch back to editor mode by selecting the  Editor  button:", 
            "title": "Page editing overview"
        }, 
        {
            "location": "/courses/authoring/#anatomy-of-the-content-editor", 
            "text": "Below is a screenshot of the editor with the main components highlighted.", 
            "title": "Anatomy of the content editor"
        }, 
        {
            "location": "/courses/authoring/#editor-settings", 
            "text": "Editor settings gives you access to the key functions:", 
            "title": "Editor settings"
        }, 
        {
            "location": "/courses/authoring/#page", 
            "text": "Layout  allows you to specify the panel layout you want to choose for this section,  Show Folders  allows you to define specific folders in your project that you wish to be visible when the current section is displayed,  Close Tabs  allows you to close all tabs open from previous section,  Set Section as Chapter  allows you to set the section as a chapter in your content,  Teacher Only  allows you to show content that only teachers are able to see.  Content Type  allows you to write your content in either  Markdown  or  HTML", 
            "title": "Page"
        }, 
        {
            "location": "/courses/authoring/#open-tabs", 
            "text": "This allows you to specify:   which files you want to automatically open when the current section is displayed,  Preview (including external websites),  Open a Terminal window (including running a terminal command),  which lines (if any) you wish to highlight within each file.", 
            "title": "Open Tabs"
        }, 
        {
            "location": "/courses/authoring/#assessments", 
            "text": "This allows you to set up assessments.", 
            "title": "Assessments"
        }, 
        {
            "location": "/courses/authoring/#media", 
            "text": "This allows you to play audio files within your project.", 
            "title": "Media"
        }, 
        {
            "location": "/courses/authoring/#global", 
            "text": "Scripts  allows you to point to one or more  .js  files in your project (usually you would have this somewhere within the  .guides  folder) that is run when the page is shown. This is especially useful when interacting with a button in a page of content.  Theme  allows you to select the default theme for people viewing the content. We currently have a light theme and will be adding a dark theme shortly. Dyslexic users can also choose a special theme from the Settings drop down in the content player.  Lexicon Topic   if you use this option, an icon will appear in the toolbar that will load the Lexikon window with the selected topic automatically selected. Students can still access the Lexicon from the  Tools Lexicon  menu (unless of course you are restricting the top menu available to them)  Suppress page numbering  allows you to suppress the section page numbers when in Play Mode.  Hide Menu  allows you to hide the main Codio menu items in the IDE (Codio/Project/File/Edit etc) when the assignment is run in a  course .  Allow guide to be closed  allows students to be able to close the content. It can be restarted by selecting the Start icon in the file tree:     Use submit buttons  see  Student submission options  for more information  Use mark as completed  see  Student submission options  for more information  Collapsed on start  starts the assignment with the guides pane collapsed. Students can show the content clicking on the hamburger icon on the right  Hide Section List  hides the sections list in your content for the students.   Hide Back to Dashboard button  hides this button that would otherwise show on the last page of the guides.  Protect Layout  prevents students from closing files in tabs.", 
            "title": "Global"
        }, 
        {
            "location": "/courses/authoring/#authoring-guidelines", 
            "text": "Here are some guidelines for creating good quality content.", 
            "title": "Authoring guidelines"
        }, 
        {
            "location": "/courses/authoring/#markdown", 
            "text": "The best way to author content is using markdown. It is extremely easy to write content that renders very nicely and without having to fiddle with HTML. You can embed HTML snippets into a markdown as well where you need full control.  We have a Cheat Sheet project that you can use to see the full capabilities. To fork this starter pack into your own account, please  click here . You should select the  Use Pack  option to create the project.", 
            "title": "Markdown"
        }, 
        {
            "location": "/courses/authoring/#courses-and-books", 
            "text": "We strongly recommend that when you are creating content at scale then you have a thorough understanding of  the differences between projects, course assignments and books  before starting.", 
            "title": "Courses and Books"
        }, 
        {
            "location": "/courses/authoring/#media-assets", 
            "text": "When creating a book or a guide, you will often be working with images, video and other media. We recommend the following.   Images should be placed in the  .guides/img  folder. You can create sub-folders for organizational purposes.  Videos should be hosted on a 3rd party platform such as YouTube or Vimeo. You can embed these using regular HTML embed tags as available from those platforms.  Web based media such as Google Doc documents can be embedded using regular HTML embed tags as available from those platforms.", 
            "title": "Media assets"
        }, 
        {
            "location": "/courses/authoring/#callout-blocks", 
            "text": "Our markdown supports the use of special callout blocks. These provide icons and highlighted backgrounds for various concepts such as : Important, Info, Challenge, Topic, Definition, Meetups, Headline, Hackathon, Create, Calendar, Growth Hack, Debugging, Cross Discipline and more.  Please refer to the  Callout  section of the Books Cheat Sheet. If you have not done so already, fork  this starter pack  into your own account. You should select the  Use Pack  option to create the project.", 
            "title": "Callout blocks"
        }, 
        {
            "location": "/courses/authoring/#dont-make-pages-too-long", 
            "text": "Again, this depends on your intended audience but try to keep each page reasonably brief. If the topic is a long one, you may want to break it up into several pages. This prevents lots of scrolling and allows students to digest information in manageable chunks.", 
            "title": "Don't make pages too long"
        }, 
        {
            "location": "/courses/authoring/#hidden-folders", 
            "text": "Your content will often want to show code samples. Codio's recommended approach is to put each set of code samples into a dedicated folder. Then, using the page settings, you can specify this folder with the consequence that all non-specified folders are hidden from view in the file tree (if you choose to show it).  The benefit of hiding folders is that the student is not distracted by folders and files that are not relevant to the topic you are explaining.  Click here  for more details on folder hiding.", 
            "title": "Hidden folders"
        }, 
        {
            "location": "/courses/authoring/#assessments_1", 
            "text": "Codio offers a range of  manually and auto-graded assessments . When used as a part of content, assessments are a very important way of giving students challenges and exercises that help internalize what they have been learning.  When used in a course situation, assessments are extremely helpful to the teacher as all assessment results are fed automatically through to the teacher course dashboard, allowing them to monitor students' progress across a Course.  Many of Codio's assessment types (code tests, multiple choice questions, text, fill in the blank and list-based) are auto-graded, saving teachers considerable amounts of time and can also offer students instant feedback on the correct answers.  You can also use the  free-text  assessment type for answers that require a typed answer that can be manually graded by faculty. The free text type also support Latex, so math questions can be answered and graded.  Assessments you create can be saved in your own library for use in other assignments. See  here  for more information on this. We also have an extensive library of assessments that you are free to use as you wish. See  here  for more details", 
            "title": "Assessments"
        }, 
        {
            "location": "/courses/authoring/#layouts", 
            "text": "The editor lets you create different panel layouts for your guide content and the layout can change from section to section.  Click here  for more information on panel layouts.", 
            "title": "Layouts"
        }, 
        {
            "location": "/courses/authoring/#markdown-content-editing", 
            "text": "", 
            "title": "Markdown content editing"
        }, 
        {
            "location": "/courses/authoring/#cheat-sheet", 
            "text": "Please refer to the  Callout  section of the Cheat Sheet. If you have not done so already, fork  this starter pack  into your own account. You should select the  Use Pack  option to create the project.  Content can be written in   Markdown  - the recommended option and described on this page  HTML  allowing more detailed control but requiring more time; described on the next page.   When you are in edit mode, you can select a section by   using the navigation buttons in the header area  selecting a section from the section list", 
            "title": "Cheat Sheet"
        }, 
        {
            "location": "/courses/authoring/#renaming-the-section", 
            "text": "You can rename your section by clicking on the section title in the header area.", 
            "title": "Renaming the Section"
        }, 
        {
            "location": "/courses/authoring/#writing-content", 
            "text": "You can then start writing your content in the main content area.", 
            "title": "Writing content"
        }, 
        {
            "location": "/courses/authoring/#markdown_1", 
            "text": "For those of you not familiar with Markdown, it is an extremely easy way of writing content without having to worry about HTML.  When in Play Mode or as you preview, your content is rendered as students will see it. You can also override the default CSS styling if you wish. Go to  Tools Guide Add Custom CSS   'Reset Custom CSS' will restore the default CSS styling  Click here for details on how to insert  images, videos and hyperlinks .  Here is a summary of the Markdown formatting codes", 
            "title": "Markdown"
        }, 
        {
            "location": "/courses/authoring/#headerstitles", 
            "text": "To display a header or title, you can use the  #  character at the start of the line. The more  #  characters you add, the smaller the font.  # Big title\n## Smaller title\n# Even smaller title\n## etc.", 
            "title": "Headers/Titles"
        }, 
        {
            "location": "/courses/authoring/#bold-and-italic", 
            "text": "To create bold or italic text, you use  **  and  *  either side of the respective words.  I want to say that **this is really important**, you know\nI *really* like chocolate", 
            "title": "Bold and Italic"
        }, 
        {
            "location": "/courses/authoring/#bullet-lists", 
            "text": "To create a list of bullet points, you start the line with a  -  - Bullet 1\n- Bullet 2\n- Bullet 3\n- etc", 
            "title": "Bullet Lists"
        }, 
        {
            "location": "/courses/authoring/#numbered-lists", 
            "text": "To create a numbered list, you start the line with a  1.  The numbers are automatically calculated for you.  1. Item 1\n1. Item 2\n1. Item 3\n1. etc", 
            "title": "Numbered Lists"
        }, 
        {
            "location": "/courses/authoring/#code-blocks", 
            "text": "If you want to show some code, styled with the courier font, in a box and with syntax highlighting applied you surround your code block with three backticks  ``` . For example, the following javascript snippet  var i;\nfor(i = 0; i   10; i++) {\n   document.write(i);\n}  is written as  ```js \nvar i;\nfor(i = 0; i   10; i++) {\n   document.write(i);\n} ```  Note that you can specify a language type after the top 3 back ticks. Entering  python  after the backticks would apply syntax highlighting for python. Many languages are supported.  See a full list of supported languages here . You should search for your language and then use the  alias  shown.", 
            "title": "Code Blocks"
        }, 
        {
            "location": "/courses/authoring/#code-segments", 
            "text": "If you want to insert a piece of code inline with the rest of your text, then you use a single ` (backtick) character either side of the text. For example,  We can define a variable  var x;  if we like  ... is written in markdown as  We can define a variable `var x;` if we like", 
            "title": "Code Segments"
        }, 
        {
            "location": "/courses/authoring/#indented-lists", 
            "text": "If you want to indent a list, then indent just 2 spaces and it will indent.    - Bullet 1\n  - Bullet 2\n  - Bullet 3\n  - etc", 
            "title": "Indented Lists"
        }, 
        {
            "location": "/courses/authoring/#callout-blocks_1", 
            "text": "If you want to show a callout block a number of options are available and others can be easily added if required   important  info  warning  topic  definition  challenge  guidance  meetup  hackathon  create  calendar  growthhack  xdiscipline  debugging   e.g.  |||info\n# My Title\n\nSome text\n\n|||   The  Guidance  callout block is only visible in play mode to designated teachers within a course. It is not visible for students.", 
            "title": "Callout Blocks"
        }, 
        {
            "location": "/courses/authoring/#hyperlinks-images-videos-iframes", 
            "text": "We describe these in  this section .", 
            "title": "Hyperlinks, Images, Videos &amp; iframes"
        }, 
        {
            "location": "/courses/authoring/#html", 
            "text": "You can include HTML tags", 
            "title": "HTML"
        }, 
        {
            "location": "/courses/authoring/#latex-mathjax", 
            "text": "Latex is supported using  MathJax . For example  When $a \\ne 0$ there are two solutions to $(ax^2 + bx + c = 0)$ and they are $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$\n\nand for multiple lines we do the following\n\n$$\ny=x^2\ny=\\frac{x^2}{x+1}\n$$  Click here  for more details on Latex and Mathjax.   Inline math equations are encapsulated in a single  $  like this: $\\omega = d\\phi / dt$.", 
            "title": "Latex / MathJax"
        }, 
        {
            "location": "/courses/authoring/#cheat-sheet_1", 
            "text": "Check out our  Cheat Sheet  and  Use Pack  to create the Cheet Sheet project in your Codio account.", 
            "title": "Cheat Sheet"
        }, 
        {
            "location": "/courses/authoring/#previewing-content", 
            "text": "", 
            "title": "Previewing content"
        }, 
        {
            "location": "/courses/authoring/#preview-mode", 
            "text": "You will regularly want to switch from editing your page content to preview it as users will see it. The best way to do this is to press the preview button in the top right of the content window. When the guide renders, it would open at the current page you were editing.   To return to the edit mode, press the  Editor  button and you will be returned to edit mode on the page that you were viewing in Play mode.", 
            "title": "Preview mode"
        }, 
        {
            "location": "/courses/authoring/#split-screen", 
            "text": "Another approach that works for the current page is to switch layout mode to split view mode by selecting the 2nd from left button in the header bar.", 
            "title": "Split screen"
        }, 
        {
            "location": "/courses/authoring/#play", 
            "text": "You can start the Guide player from the  Tools- Guide- Play  menu or selecting the ' ' icon in the file tree", 
            "title": "Play"
        }, 
        {
            "location": "/courses/authoring/#html-content-editing", 
            "text": "We do not recommend this setting unless you have very specific reasons. It is much harder to use and maintain than markdown but for those who want ultimate control over appearance it is a good option.", 
            "title": "HTML content editing"
        }, 
        {
            "location": "/courses/authoring/#setting-html", 
            "text": "You can specify that an individual page be authored using HTML from the content  Settings . You will find the  Content type  dropdown where you can switch between HTML and markdown.", 
            "title": "Setting HTML"
        }, 
        {
            "location": "/courses/authoring/#css-header-and-footer", 
            "text": "In order to style your content properly, you should use the  Edit HTML header  and  Edit HTML footer  settings. These can be found in the main  Settings  area on the  Global  tab.  The header and footer information wrap the HTML content for your page. Below is a typical example of a header.  html  head \n   meta charset= UTF-8 \n         title bjlo2e_ch04-1 /title \n         link href= .guides/content/css/my-style.css  rel= stylesheet  type= text/css  / \n         script src= https://codio.com/codio-client.js  type= text/javascript /script \n         script src= .guides/content/script/my-script.js  type= text/javascript /script \n     /head  body   And here is the footer.  /body  /html", 
            "title": "CSS header and footer"
        }, 
        {
            "location": "/courses/authoring/#support-functions", 
            "text": "In a page authored using Markdown, you are able to create buttons and other actions. We provide some javascript functions that support the same functionality.  Important  : if you use any of the functions listed below then you must load  https://codio.com/codio-client.js in the HTML Header as shown in the example above.   codio.run(command, callback)  - Run a command on the box.  callback  will fire once executed and should be used to communicate back to the user.  codio.runAndShow(command, outputElementId)  - Run a command on the box. All  stdout  will be displayed in  outputElementId .  codio.open('file', path, panel_num)  - Opens a file located in  path  in the  panel_num  panel, where  0  is the first panel from top left  codio.open('terminal', command, panel_num) -  Opens a terminal window and executes  command .  panel_num  specifies the location of the panel, where  0  is the first panel from top left.  codio.open('preview', url, panel_num)  - Opens a preview window at  url .  panel_num  specifies the location of the panel, where  0  is the first panel from top left.  codio.goToNextSection()  - Moves to the next page in the guide.  codio.goToPreviousSection()  - Moves to the previous page in the guide.  codio.switchUnit(unitId)  - Changes to a different assignment. The assignment ID is found by opening the assignment and getting the ID from the URL.  codio.goToSectionTitled('Section Title')  - Switches to the page whose title is \"Section Title'.  codio.assessments.check(assessmentId)  - Executes the assessment  codio.assessments.reset(assessmentId)  - Resets any response and score that the user may have already provided for  assessmentId .  codio.assessments.get(assessmentId, callback)  - Gets the result data for a completed assessment  codio.assessments.send(assessmentId, answer, points, callback)  - Sends result data for a custom assessment.  answer  contains the custom result data for  assessment  and will be stored in Codio. You can use  codio.assessments.get()  to reconstruct the output for an already answered question.  codio.resetCurrentFiles()  - Allows students to restore current files in guides within your content.", 
            "title": "Support functions"
        }, 
        {
            "location": "/courses/authoring/#teacher-only-content-todo", 
            "text": "Teacher only content can be viewed by teachers when:   using  open as teacher  opening a assignment within a course module in a course  viewing student code  within a course  working on a assignment in a  course  with the 'View as teacher' function enabled   Warning   If your project is public and a user accesses this project via the public listing of your account then they will have access to the solutions.   You can make content available only to course teachers in the following ways.", 
            "title": "Teacher only content  TODO"
        }, 
        {
            "location": "/courses/authoring/#entire-page", 
            "text": "If you want a page and its appearance in the table of contents to be only visible to a teacher, then you should enable the  Teacher Only  slider in the  page settings .", 
            "title": "Entire page"
        }, 
        {
            "location": "/courses/authoring/#selected-content-within-page", 
            "text": "If you want to hide a certain piece of information  within a page  from students then you should include all such content within a page within  |||guidance ..... ||| . An example is shown below.  |||guidance\n# Solution\nThis solution will only be shown\n\n- to teachers\n- provided the content is published within a assignment\n- if you share a project normally or it is public and a student loads it, they have access to this content.\n\n|||  Teacher only content can also be shown to teachers within an assessment question. This allows an question's answer rationale to be shown. Please refer to the  assessments section  for more details.", 
            "title": "Selected content within page"
        }, 
        {
            "location": "/courses/authoring/#custom-buttons", 
            "text": "Custom buttons are a powerful feature that let you insert a button into your guide content that when pressed can carry out any custom action.  There are a number of ways to use a custom button", 
            "title": "Custom Buttons"
        }, 
        {
            "location": "/courses/authoring/#to-jump-to-a-page-in-the-content", 
            "text": "This will jump to a specific page in the guide  {Button Text | go-to-section-titled}(section title)  e.g.  {Go to Section: LTI | go-to-section-titled}(LTI)", 
            "title": "To jump to a page in the content"
        }, 
        {
            "location": "/courses/authoring/#to-launch-a-process", 
            "text": "This will launch a process and execute a terminal command.  {Button Text}(command paramater1 parameter2 parameterN)", 
            "title": "To launch a process"
        }, 
        {
            "location": "/courses/authoring/#launching-a-process-in-a-terminal-window", 
            "text": "There are cases where you will want to launch a command in a dedicated terminal window. A typical example is when student code requires input from the user. Codio cannot handle standard input through the guides window, so use the following button command.  {Button Text | terminal}(command)", 
            "title": "Launching a process in a terminal window"
        }, 
        {
            "location": "/courses/authoring/#launching-a-debugger-configuration", 
            "text": "You can launch a debugger configuration as shown below. It is important to specify the configuration name exactly.  {Button text | debugger}(debugger configuration name)", 
            "title": "Launching a debugger configuration"
        }, 
        {
            "location": "/courses/authoring/#to-restore-current-files-in-guides", 
            "text": "Students can restore current files to the default setting from the  setting  menu but you can also offer them a button within your guides content as well.  {Button text | reset}(optional commands to run)", 
            "title": "To restore current files in guides"
        }, 
        {
            "location": "/courses/authoring/#writing-a-custom-event-handler", 
            "text": "This offers you the most flexibility and allows you to write your own custom button press handler. A common use case is executing tests on user code.  To do this, you should use the following format for your custom button.  {Button Text|custom}(myId)  If you wish to use a custom event handler to allow students to restore current files and handle other functions, you can do so but you will need to include this code in your custom script  window.addEventListener('codio-button-custom', function (ev) {\n  if(codio) {\n    codio.resetCurrentFiles()\n  }\n});", 
            "title": "Writing a custom event handler"
        }, 
        {
            "location": "/courses/authoring/#loading-scripts", 
            "text": "You should point your content page to a script file to load javascript scripts. You can do this from  Settings Global Scripts .", 
            "title": "Loading Scripts"
        }, 
        {
            "location": "/courses/authoring/#event-listener", 
            "text": "The event listener is able to execute your custom task. It will display a custom message area beneath it into which you can write your own results data. The message data can be a custom message that a test might return and can be plain text or HTML.  For the event listener to run you should include in  Settings Global Scripts :   https://codio.com/codio-client.js (where your account is running on codio.com)  https://codio.co.uk/codio-client.js (where your account is running on codio.co.uk)   The icon that appears in the top left of the message area can be controlled from your event listener, as shown in the example below.  window.addEventListener('codio-button-custom', function (ev) {\n  console.log('id:', ev.id, 'cmd:', ev.cmd, ev);\n  if (codio) {\n    codio.setButtonValue(ev.id, codio.BUTTON_STATE.PROGRESS, 'Checking');\n    codio.setButtonValue(ev.id, codio.BUTTON_STATE.FAILURE, 'Bad Job :(');\n    codio.setButtonValue(ev.id, codio.BUTTON_STATE.INVALID, 'Internal error');\n    window.setTimeout(function () {\n      codio.setButtonValue(ev.id, codio.BUTTON_STATE.SUCCESS, 'Extremely well done!');\n    },1000);\n\n  }\n});\nconsole.log('test.js script loaded');   ev.id  is the contents internal id for the button.  ev.cmd  is the  myId  text you specified in the button with  {Button Text|custom}(myId) . This is typically used to indicate the id of the test you wish to run or just the specific button that is being pressed.   The available button commands are  codio.setButtonValue(ev.id, codio.BUTTON_STATE.PROGRESS, 'Checking..');\ncodio.setButtonValue(ev.id, codio.BUTTON_STATE.SUCCESS, 'Good job!');\ncodio.setButtonValue(ev.id, codio.BUTTON_STATE.FAILURE, 'Bad Job :(');\ncodio.setButtonValue(ev.id, codio.BUTTON_STATE.INVALID, 'Internal error');  The 3rd parameter can contain any text to display in the button's attached message area. It can be plain text or HTML.", 
            "title": "Event Listener"
        }, 
        {
            "location": "/courses/authoring/#adding-media", 
            "text": "You can insert Audio, Images and Videos into a page.", 
            "title": "Adding media"
        }, 
        {
            "location": "/courses/authoring/#audio", 
            "text": "You can insert and play audio files within your project.  On the page you wish to play Audio, go to the  Settings  area where you can define the source audio file along with any actions the should be triggered at specific times during playback.    Source Name  - select the source file either from  .guides/media  folder if already uploaded to the project or upload directly from your PC where it will then be stored in the  .guides/media  folder.  Add Action  - specifies actions that are triggered at specific times during playback. The following options are available.   Open file\n  Close file\n  Open Terminal\n  Close Terminal\n  Run command\n  Highlight\n  Close all tabs\n  Pause", 
            "title": "Audio"
        }, 
        {
            "location": "/courses/authoring/#images", 
            "text": "Inserting an image is similar. Here are some examples. PNG and JPG image types are supported. Note that the 2nd and 3rd examples point to images within your project.  Generally speaking, you should put your images in the  .guides/img  folder in order to keep the rest of your workspace free of extraneous content for the benefit of the student.  ![optional alt tag](http://any-url-you-like.png)\n![](image-in-project-root.jpg)\n![](.guides/img/best-place-for-images.png)  You can also drag/drop images from your project file tree into your content. They will be automatically tagged with the correct path.  For Markdown pages:  ![.guides/img/displayimage](.guides/img/displayimage.png)  For HTML pages:  ![.guides/img/displayimage](.guides/img/displayimage.png)", 
            "title": "Images"
        }, 
        {
            "location": "/courses/authoring/#videos", 
            "text": "Including embedded videos are also possible using the standard  iframe  html tag.", 
            "title": "Videos"
        }, 
        {
            "location": "/courses/authoring/#youtube", 
            "text": "If you wish to embed a YouTube video, go to the Share option and select  Embed  to obtain the code snippet.   iframe width= 560  height= 315  src= //www.youtube.com/embed/1JNhoVbmNAo  frameborder= 0  allowfullscreen /iframe", 
            "title": "YouTube"
        }, 
        {
            "location": "/courses/authoring/#vimeo", 
            "text": "If you wish to embed a Vimeo video, go to the Share option and select  Embed  to obtain the code snippet.   iframe src= //player.vimeo.com/video/110479088  width= 500  height= 281  frameborder= 0  webkitallowfullscreen mozallowfullscreen allowfullscreen /iframe   p a href= http://vimeo.com/110479088 Codio - Innovation in Computer Programming Education /a  from  a href= http://vimeo.com/user20752628 Codio /a  on  a href= https://vimeo.com Vimeo /a . /p", 
            "title": "Vimeo"
        }, 
        {
            "location": "/courses/authoring/#hyperlinks", 
            "text": "Creating a hyperlink on a piece of text is easy.  Go to [Google](google.com) to look stuff up.", 
            "title": "Hyperlinks"
        }, 
        {
            "location": "/courses/authoring/#iframes", 
            "text": "You can embed content in an iframe using the  iframe  html tag.  To embed from Google Docs, go to  File Publish  to Web and select  Embed  to get the code snippet", 
            "title": "iframes"
        }, 
        {
            "location": "/courses/authoring/#example-projects", 
            "text": "https://codio.com/codio-units/java-example is a project that you can  fork  into your own Codio account and shows you how to create code tests and setup automatic marking. We would also recommend that you check out our  Guides Cheat Sheet  and  Use Pack  to create into your Codio account to review.", 
            "title": "Example Projects"
        }, 
        {
            "location": "/courses/authoring/#openclose-tabs-from-content", 
            "text": "You can include links in your content to perform the same open and close actions as you do from the  open tabs  dialog.", 
            "title": "Open/close tabs from content"
        }, 
        {
            "location": "/courses/authoring/#syntax-summary", 
            "text": "The syntax is as follows and actions can be chained together using, separated by a  ; .  [Hyperlink text](open_file file1, file2; cmd ls -al)", 
            "title": "Syntax Summary"
        }, 
        {
            "location": "/courses/authoring/#opening-directives", 
            "text": "open_file file1 file2 fileN panel=0  where panel is optional, in which case the default panel (0) will be used if not specified.  open_preview file panel=0  where panel is optional, in which case the default panel (0) will be used if not specified.  open_terminal command panel=0  where command (a system command) is optional and where panel is optional, in which case the default panel (0) will be used if not specified.  cmd systemcommand argument1 argument2 argumentN  open_tutor file panel=0  to open  visualiser  and where panel is optional, in which case the default panel (0) will be used if not specified.", 
            "title": "Opening directives"
        }, 
        {
            "location": "/courses/authoring/#closing-directives", 
            "text": "close_all  closes all tabs in all panels, except the Guide itself.  close_all panel=0  closes all tabs in panel 0.  close_file file1  closes  file1  in all panels  close_file file1 file2 fileN panel=0  where panel is optional, in which case the default panel (0) will be used.  close_preview  behaves like  close_file  for preview tabs.  close_terminal  behaves like  close_file  for terminal tabs.  close_tutor file panel=0  where visualiser is closed for file open in panel 0", 
            "title": "Closing directives"
        }, 
        {
            "location": "/courses/authoring/#important-spaces-and-in-file-names-and-commands", 
            "text": "If any of your files contain spaces in the names, then you should enclose the file name in double quotes   open_file \"file name.txt\"   If you use  cmd  and the command has a  ;  character in it, then you should also use quotes   cmd \"cp file1 file2; cp file3 file4\"", 
            "title": "Important - spaces and ; in file names and commands"
        }, 
        {
            "location": "/courses/authoring/#examples", 
            "text": "Open a file  file.txt  [Click here](open_file file.txt)  Open a file  file.txt  in panel 1  [Click here](open_file file.txt panel=1)  Open a file  file.txt  in panel 1, with a code reference and highlight 3 lines  [Click here](open_file file.txt panel=1 ref= some text in your code  count=3)  Open files  file.txt  and  file2.txt  [Click here](open_files file.txt file2.txt)  Open a file  file.txt  and preview of  file.txt  in panel 2  [Click here](open_file file.txt; open_preview file.txt panel=2)  Run a command then open a preview of  file.txt  in panel 2  [Click here](cmd cp source.txt target.txt; open_preview file.txt panel=2)  Open a Terminal window in panel 1  [Click here](open_terminal panel=2)  Close  file.txt  and open a preview  file.txt  [Click here](close_file file.txt; open_preview file.txt)  Close all open files, previews and terminals in all panels, then open a file  file.txt  [Click here](close_all; open_file file.txt)  Close all open files, previews and terminals, then open a file  file.txt  [Click here](close_all; open_file file.txt)  Close all open files, previews and terminals that are in panel 2, then open a file  file.txt  [Click here](close_all panel=2; open_file file.txt)", 
            "title": "Examples"
        }, 
        {
            "location": "/courses/authoring/#hiding-folders", 
            "text": "Your content will often want to show code samples. Codio's recommended approach is to put each set of code samples into a dedicated folder. Then, using  Show Folders  on  page settings  , you can specify this folder. All non-specified folders are hidden from view in the file tree.", 
            "title": "Hiding folders"
        }, 
        {
            "location": "/courses/authoring/#latex-for-math-expressions", 
            "text": "Latex is ideal for entering mathematical expressions into your pages. You can also insert Latex expressions into many assessment fields. Codio uses  Mathjax  for the rendering of all Latex expressions, so certain macros are not supported.", 
            "title": "Latex for math expressions"
        }, 
        {
            "location": "/courses/authoring/#inline-latex-expressions", 
            "text": "An example of an inline expression is  $\\frac{x^3+1}{x^2-1}$ . When your page is shown, the Latex expression will render appropriately.", 
            "title": "Inline Latex expressions"
        }, 
        {
            "location": "/courses/authoring/#display-mode-latex-expressions", 
            "text": "You can also render one more more lines of Latex expressions in a more prominent format as shown below.  $$\ny=x^2\n\\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6}\n$$", 
            "title": "Display mode Latex expressions"
        }, 
        {
            "location": "/courses/authoring/#latex-resources", 
            "text": "Google is often your friend when it comes to discovering Latex syntax. However, here are two very useful references that will accelerate things for you.", 
            "title": "Latex Resources"
        }, 
        {
            "location": "/courses/authoring/#mathjax", 
            "text": "Here is a list  of Latex commands supported by Mathjax.", 
            "title": "Mathjax"
        }, 
        {
            "location": "/courses/authoring/#stack-exchange", 
            "text": "Here is a page on Math StackExchange that has an excellent overview of Mathjax/Latex syntax as well as explaining general concepts.  Click here : Stack Exchange", 
            "title": "Stack Exchange"
        }, 
        {
            "location": "/courses/authoring/#detextify", 
            "text": "Detextify  is an excellent way of finding a Latex symbol by free hand drawing it on the screen using your mouse or touchpad.   Important:  you should not use commands that are not in the standard package. In the image above, you can see the last one has a \\usepackage command. Symbols in a special package may not work.", 
            "title": "Detextify"
        }, 
        {
            "location": "/courses/classes/", 
            "text": "A course has the following properties.\n\n\n\n\nIt is a grouping of students who are taught as a logical group.\n\n\nIt can have one or more teachers/instructors.\n\n\nYou can add content to it.\n\n\nYou can instantly access student code and projects.\n\n\nYou can integrate the course with any LTI enabled LMS platform such as Canvas, D2L, Moodle, Blackboard and many others. Your LMS can auto-populate courses and grade data can be fed back from Codio to the LMS.\n\n\n\n\nCreating a new course\n\uf0c1\n\n\nTo work with the course features in Codio you will first need to set up a course for your students.\n\n\n\n\n\n\nSign in to Codio at www.codio.com\n\n\n\n\n\n\nIf you are in the IDE, click the Codio icon in the top left corner to take you back to the \nCourses\n screen. If you are in the dashboard, click on \nCourses\n in the left menu.\n\n\n\n\n\n\nClick the \nblue plus\n sign at the top left of the page.\n\n\n\n\n\n\n\nSelect \nEmpty Course\n , complete the details requested, then click \nCreate Course\n.\n\n\n\n\n\n\n\nYour new course will appear in your \nCourses\n area.\n\n\n\n\n\n\nCreating new course from share code\n\uf0c1\n\n\nYou can create courses from a code other users in other organisations can share to you. \n\n\n\n\n\n\nSelect the \nFrom Share Code\n option\n\n\n\n\n\n\nEnter the code given and complete all other details and the course will be created for you.\n\n\n\n\n\n\nSharing your course with others\n\uf0c1\n\n\nTODO\n\n\n\n\nCloning a Course\n\uf0c1\n\n\nYou can clone an existing course to create a new course in 2 ways\n\n\n\n\nSign in to Codio at www.codio.com\n\n\n\n\nEither:\n1. Click the 3 blue dot menu item shown on the main course dashboard and select \nClone Course\n\n\n\n\nor\n\n\n\n\n\n\nSelect the existing course, go to the \nAdmin\n area.\n\n\n\n\n\n\nClick the \nClone Course\n button at the bottom of the page.\n\n\n\n\n\n\n\nComplete the details requested for the name of the new course, then click \nCreate Course\n.\n\n\n\n\n\n\nYour new course will appear in your \nCourses\n area.\n\n\n\n\n\n\nPlease note, students in the existing course will not be added to the new course.\n\n\nSearching and ordering courses\n\uf0c1\n\n\nCourses are shown grouped together by their creation date with the most recently created first.\n\n\nThe grouping intervals are\n\n\n\n\nSep-Dec - Autumn\n\n\nJan-May - Spring\n\n\nJun-Aug - Summer\n\n\n\n\nOrdering courses within their groups\n\uf0c1\n\n\nCourses can be ordered by Name, Created Date, Student Count or Start Date within the groups\n\n\n\n\nSearching\n\uf0c1\n\n\nIf you have a large number of courses, you can also search by name. Select the \nName\n option and simply start typing, whereupon Codio will search within all course names and filter your list accordingly.\n\n\n\nArchiving Courses\n\uf0c1\n\n\nTo help manage the number of courses visible to teachers  they can be archived so they no longer show on the active screen for teachers. Go to the 3 blue dot menu and select 'Archive Course'. \nArchiving a course does not effect students and they will be able to continue working on assignments but just removes them from the active tab.  They are not deleted and can be unarchived at any time in the future if they are required either by clicking on the course in the archived tab or from the 3 blue dot menu and selecting 'Unarchive Course'\n\n\nAdding teachers to a course\n\uf0c1\n\n\nYour course may be taught by more than one teacher. If this is the case, you can add another teacher to your Codio course in the following way:\n\n\n\n\n\n\nFrom the \nCourses\n area, click on your course to open it.\n\n\n\n\n\n\nClick on the \nAdmin\n tab, centre right near the top.\n\n\n\n\n\n\n\n\nFind the \nTeachers\n area on the left, and then click \nEdit\n.\n\n\n\n\n\n\n\n\nClick \nAdd Teacher\n\n\n\n\n\n\n\n\nSearch for the teacher you want to add, then click done.\n\n\n\n\n\n\n\n\nThe teacher should then appear in your teacher list for that course. Now click \nDone\n to save your changes.\n\n\n\n\n\n\n\n\nIf the teacher is not a member of your Organization, you can send them an invitation email.\n    \n\n\n\n\n\n\nAn email will be sent to your colleague containing a link where they can sign up for a Codio account and on completion they will be added into your organization and course automatically. They must use the email address the invitation was sent to or they will not be successfully added to the organization or course.\n\n\n\n\n\n\nTeaching Assistants\n\uf0c1\n\n\nA user cannot be a teacher and a student in the same course, but they can be a student in one course and a teacher in another. They can be invited into the course by sending then the invitation email and they will then be able to switch between being a teacher and student. When they are in teacher mode they will see all the courses in which they are set as a teacher and when in student mode will see all the courses in which they are set as a student.\n\n\nAdd students to a course\n\uf0c1\n\n\nYou can add students to your organization and your course easily by giving each student a unique two-word phrase called a token or by giving them in Course Invitation URL.  A student will enter the token and will automatically be added to the your organization and the correct course as they complete the process to create a Codio account.  To do this follow the steps below:\n\n\n\n\n\n\nFrom the \nCourses\n area, click on your course to open it.\n\n\n\n\n\n\nClick on the \nStudents\n tab, top centre of your screen.\n\n\n\n\n\n\n\nClick on the \nblue plus\n sign, top left of the page.\n\n\n\n\n\n\n\nYou can then send the 2 word token to your students, send them the Invite URL to join the course or you can add the Test students to your course. We recommend you use the \nInvite URL\n to avoid students going through the process to create a new organisation where they may click on the \nFree Trial\n button in error. There maybe a delay in us being able to get back to them to advise them of the correct steps to take but if you use the Invite URL, they should be able to get started a lot quicker.\n\n\n\n\n\n\n\n\n\n\n\n\nIf using the token then ask them to go to \nhttps://codio.com/p/join-class\n or select the \nJoin Course\n button on our main website. They should enter the token when requested and proceed to register for a Codio account.\n\n\n\n\n\n\nIf using the URL, the students can just click that and proceed as above.\n\n\n\n\n\n\nTo view the students in your course, select the course and the \nStudents\n tab once again. You will see a list of students who have successfully completed the sign-up process.\n\n\n\n\n\n\nChange student passwords\n\uf0c1\n\n\nYou can change a student's password in the following way:\n\n\n\n\n\n\nFrom the \nCourses\n area, click on your course to open it.\n\n\n\n\n\n\nClick on the \nStudents\n tab, top centre of your screen.\n\n\n\n\n\n\n\n\n\n\nYou will see all students in your course displayed on this screen. Find the student whose password needs to be changed and click on the blue triple dot icon to the right of their name. Choose \nChange student's password\n and follow the steps to reset.\n\n\n\n\nRemove a student from a course\n\uf0c1\n\n\n\n\n\n\nFrom the \nCourses\n area, click on your course to open it.\n\n\n\n\n\n\nClick on the \nStudents\n tab, top centre of your screen.\n\n\n\n\n\n\n\n\n\n\nYou will see all students in your course displayed on this screen. Find the student that you want to remove from the course and click on the blue triple dot icon to the right of their name. Choose \nRemove student\n to take them out of the course. (Note: this does not remove your student entirely from your organization - if you wish to do this, see \nRemove Members\n\n\n\n\n\n\nBook Visibility\n\uf0c1\n\n\nA book based assignment can map to parts of a book. Students can see the mapped book portions of the book in the table of contents.\n\n\nYou can also specify that parts of the book not mapped to by the assignment either a) can be seen or b) cannot be seen in the course. This setting applies to all assignments in the course.\n\n\nIt is controlled from the Admin section in the course\n\nTODO when implemented\n\n\n\n\nThis option will only show in a course if there is a course containing book based assignments.\n\n\nSelect \nEdit Details\n button and flip the switch to change the settings as required.\n\n\n\n\nShow only assignment pages\n will only show the part of the book mapped to that assignment.\n\n\nShow all pages\n will show all the book content and the areas not mapped to that specific assignment will be grayed out in the table of contents.\n\n\n\n\n\n\nDeleting a course\n\uf0c1\n\n\nA course can be deleted by course teachers and organization owners. All the course data can also be exported. See \nExport course data\n for more information\n\n\n\n\nSelect the course, go to the \nAdmin\n area and then press the \nDelete Course\n button.\n\n\n\n\n\n\n\n\nYou can delete just the course or you can also delete the course AND remove the students from your organization as well. If you select the option to \nDelete the Course and Students\n and any of the students in this course are also members in other courses, they will not show in the list of students. They will not be removed from the organization or from other courses they are also members of. The option \nDelete Course Only\n will just delete the course but not remove any students.\n\n\n\n\n\n\n\n\nOrganization owners\n are able to view a list of any members that are no longer members of any courses and remove any users from the organization. See \nView organization members\n for more information.\n\n\n\n\nExporting course data\n\uf0c1\n\n\nCourse Data\n\uf0c1\n\n\nCourse data (including students workspaces) can be exported. We would recommend the data is exported before you \nDelete a Course\n\n\n\n\nSelect the course, go to the \nAdmin\n area and then press the \nCourse Data\n button.\n\n\n\n\n\n\n\n\n\n\nAll the data from the course will be compiled into a zip file in the background and when ready an email will be sent to you with a link for you to download.\n\n\n\n\n\n\nThe link will be active for 7 days and after this time the zip file will be removed\n\n\n\n\n\n\nYou can also access any active files to download (and generate a new export if required) by clicking on the \nCourse Data\n button\n\n\n\n\n\n\n\n\nIndividual assignments data can also be exported separately if required. See \nexport assignment data\n for more details\n\n\nIf your course is LTI enabled you can also download all the unit LTI intergration URL's in a csv file. See \nExporting LTI settings\n for more information.\n\n\nUser Access Data\n\uf0c1\n\n\nUse this to download a CSV of user access to assignments in the course. Details include\n\n\n\n\nUsername\n\n\nUsers registered email address\n\n\nFirst name\n\n\nLast name\n\n\nDate/time when user logged in\n\n\nAccess type (Log In, Log Out, Project Open, Project Close)\n\n\nAssignment name (n.b Book based assignments will report the name of the book)\n\n\nRole in course (ie Teacher/Student)\n\n\nProject path\n\n\n\n\nIP address (IP address associated with login session)\n\n\n\n\n\n\nSelect the course, go to the \nAdmin\n area and then press the \nExport User Access Data\n button.\n\n\n\n\n\n\n\n\nCollection and storage of this data will be retained for maximum of 6 months.\n\n\nLTI Settings\n\uf0c1\n\n\nFor more information see \nExporting LTI settings\n\n\nWorking with student workspaces\n\uf0c1\n\n\nIf in the future you have need to review any students workspace, these can be imported back into your Codio account.\nSimply 'zip' up the folder and you can then import the project into your account. See \ncreating and importing a project\n for more information.\n\n\nPlease note, the stack used in the original workspace is not included in the exported workspace so if you need to 'run' the project you should select the appropriate stack when importing the project or by switching the stack, either from the gear icon in the main projects listing or by going to \nProject\nStack\nSettings\n in the project\n\n\nCourse contact url\n\uf0c1\n\n\nContact URL's can be set at the course level so if you have specific areas/forums for your courses for students to raise questions, you can set the contact URL's there and it will override the \norganisation contact url\n if set. You can set as many options as you require and also define the default option that will be checked automatically for the students.\n\n\nStudents will then be shown all the options in addition to contact Codio directly if they have a problem accessing the Codio platform, or loading a assignment.\n\n\n\n\n\n\nSelect the course, go to the \nAdmin\n area and \nEdit Details\n where you can then enter the text and URL's to direct students to when they use any of the Contact us options.\n\n\n\n\n\n\nN.B. \"Teacher\" accounts will not be effected by this setting and they will still be able to contact Codio in the usual manner. See \nSupport\n for more on this\n\n\nLMS shared feedback\n\uf0c1\n\n\nIf your organisation uses an LMS, when grades are released a URL is passed to the LMS grading area where students/teachers can access the grading information for the assignment.\n\n\nBy default, only the course teachers and the individual student can access the grading preview but by enabling the LMS shared feedback option,\n\n\n\n\nthis will pass a different URL back to your LMS system where anyone who knows the URL can access the students grading information\n\n\nGrading rubric templates\n\uf0c1\n\n\nThe Grading Rubric feature provides a two dimensional grid that provides grading guidance for manually assessing a coding project.\n\n\n\n\nGrading Rubric templates\n\uf0c1\n\n\nYou will only have access to this feature if you are a member of the \nowners group\n or a teacher. To find the grading templates screen, click on your user name from the Codio dashboard and then select your organization name.\n\n\nYou should see a \nGrading Templates\n tab item. There will be fewer tabs visible if you are not an organization owner.\n\n\n\n\nClick the \nNew\n button in the to right to create a new template. You should then add rows and columns.\n\n\nRows\n : a row addresses a single assessment criterion. Each row has a weighting % value that you should supply. All rows must add up to 100%.\n\nColumns\n : each column contains a score that you can freely assign. Typically, you would have a 0 value in the first column that corresponds to a complete failure to address the criterion. The remaining columns contain a range of values that you choose with the right most column being the score for fully meeting the assessment criterion. Please read the following paragraph before choosing column values.\n\n\nCalculation of scores\n\uf0c1\n\n\nWhen you are grading student code, the grading rubric will appear and is clickable. Points are awarded according to where you click. Codio will then weight the scores according to the weightings that were provided for each row.\n\n\nA final score is calculated based on your selections and is re-based to the maximum column value. You should be aware of this when choosing your column values. If you wanted your scores to calculate directly to percentages then you should choose a maximum value of 100 with other column values distributed between 0 and 100.\n\n\nApplying a grading template to an assignment\n\uf0c1\n\n\nTo use a grading template you should select the course so you see the full assignment listing. To the top right of the list item is a pencil icon. Click on this to enter editing mode\n\n\n\n\nThen select \nSettings\n and scroll down to the \nGrading template\n from the list and choose the grading template from the list. If there are not templates set up, follow the link to the organisation area to create a new template.\n\n\n\n\n\n\nGrading student work\n\uf0c1\n\n\nYou perform the actual grading from the course. Select an assignment to grade so you see the students listed.\n\n\n\n\nYou can then grade in the usual two ways.\n\n\n\n\neither from the student course. With an assignment selected from the course, you click the grading box for the student and then the grading dialog appears. Press edit and click within the grading field and the template appears.\n\n\nor from with a student's code, select the \nEducation-\nGrading\n menu item to bring up the same grading dialog.\n\n\n\n\nYou can then click within the template to assign a score for each criterion. Large cells are partially collapsed but will maximize when you click within the row. The score is calculated as you click.\n\n\nIt is important that you click the Apply button to save the score correctly.\n\n\nGigaboxes\n\uf0c1\n\n\nA Gigabox is a box that has a higher memory allocation than the standard Codio boxes. The default memory allocation is 400MB, which is fine for most applications.\n\n\nIf you need your students to have more memory then we offer 1GB, 2GB, 8GB,16GB and GPU (for GPU-accelerated instances) boxes. These need to be purchased separately and you can add any number of either box size to your organization. You will need to specify the Gigabox size and then each student accessing the assignment will have a Gigabox for that assignment.\n\n\nYou can set the required Gigabox in your project or assignment in the course module and this setting will be automatically applied to the assignments as you add the module into a course\n\n\nYou should be aware that if you do not have enough Gigaboxes in your organization then they will be allocated on a first come, first served basis. Students who access the assignment after your Gigabox limit has been reached will see a warning.\n\n\nAn organization owner can see the status of the Gigabox count in the organization settings screen.\n\n\nAssign a project to the course\n\uf0c1\n\n\nIn Codio, a teaching assignment is a project that has been assigned to a course. The scope of an assignment is entirely up to you but it could be a project assignment that a course works on. It could also be some tutorial content built using Guides. We generally recommend that it relates reasonably closely to a lesson or two. But if you prefer and it suits your structure better then you can assign as much or as little content to a Unit as you like.\n\n\nThere are two ways you can assign an assessment to a course.\n\n\nAssign a project\n\uf0c1\n\n\nThe simplest and quickest thing you can do is to assign one of your projects to a course. Once assigned, we refer to it as an assessment but the assessment's source is simply a project.\n\n\n\n\nWith the course selected, click on the Assessment tab at the top of the page. The list will be empty at this point.\n\n\nNow click the \n+\n button in the top left.\n\n\nSelect \nEmpty Module\n and create a new module.\n\n\nWhen created click \nAdd Assignment\n and then select \nProject Based\n\n\nFrom here you can either start creating a new project or import projects in.\n\n\nTo import an existing project see: \n\n\n\n\n\n\n\n\nThen select \nFork Project\n and your project will show. If you have other projects in your \nMy Projects\n area you can browse to select one of them.\n\n\nAt this point you can set the name of the assignment (by default it will be the name of your project with 'fork' appended) and add a description if you wish.\n\n\nWhen ready, click the \nCreate\n button and the assignment will be added to the course module in draft mode.\n\n\nTo create a new assignment, select your starting point (the stack you wish to start from) and you can create your assignment. For more information on authoring your content, strategies etc, see \nCourse Management\n\n\nFor the assignments to be visible to your students, you need to \nPublish\n the assignment.\n\n\nAny changes you make in future to assigments will not be visible to students until you publish again\n\n\n\n\n\n\nAt this point, we take a snapshot of your source project, ready for the students to clone when they start the assignment. Any changes you make to the source project will not be reflected automatically in the student assignment.\n\n\nOnce assigned to the course, each student will be able to access the assignment from their dashboard. Go to the \nStudents\n tab and login as one of the test students. Make sure you have the correct course and module selected form the dropdowns. You will now see the assignment in the list. If you don't, make sure the module dropdown has the correct module name selected.  You can then switch back to your teacher account.\n\n\nAssign resource modules to the course\n\uf0c1\n\n\nYou can assign existing course modules and all of its assignments to your course with a single action.\n\n\nTo assign an existing course module, follow the steps below:\n\n\n\n\n\n\nFrom the \nCourses\n screen, click on your course to open it.\n\n\n\n\n\n\nClick on the \nblue plus\n sign, top left of the page, and choose \nCopy from Existing\n.\n\n\n\n\n\n\n\nChoose the course you want to copy the content from and select the modules you wish and click \nSelect\n\n\n\n\n\n\nThe module will appear in your course.\n\n\n\n\n\n\nRemoving course module from a course\n\uf0c1\n\n\nYou can remove course modules from a course selecting the \nDelete\n button\n\n\n\nYou can also remove individual assignments from a module, clicking the \nDelete\n button for that assignment\n\n\n\nWarning\n\nDeleting a module or assignment from your course also removes all student data for all the assignments in the module (including assessment data and results) and cannot be restored so you may wish to \nDownload CSV\n before removing the module or assignment.\n\n\nUpdate course\n\uf0c1\n\n\nTODO\n\nWhere you are using content in multiple courses and changes are made to that content, these changes will be detected and you can upgrade the content of the other courses to the latest version from the \nUpdate Course\n button. The code workspace, other than the guides folder, is never updated as this can invalidate work for students who have already started the assignment.\n\n\n\n\nUpdates may be new assignments added to the course, a new version of the stack, updates for assessments in a guide or book, changes to the general guide content or a change in the order of assignments in the course.\n\n\nMost assessment changes can be safely upgraded but if you have altered the structure of a question (for example multiple choice changed from single response to multiple response) then student response data can be invalidated.\n\n\n\n\nAny changes to guides content can be applied. You should be careful about making major structural changes as students who have already started the assignment could be confused. The code workspace folder will not be impacted, so any student work in this folder will not be impacted.\n\n\nSelect assignments to update\n\uf0c1\n\n\nA list of all modified assignments will be shown. You can select the assignments you wish to update. The \nUpdate Course\n button will no longer be shown if updates have already been applied.\n\n\nStack updates\n\uf0c1\n\n\nIf updates to the stack are detected and students have already started the assignment(s) you can elect to update the stack as well as the guides content by pressing the \nUpdate Content and Stack\n button.\n\n\n\nHowever, \nany data outside the code workspace folder will be lost for all students who have already started the assignment\n.\n\n\nIf there are no detected updates to the stack or no students have started the assignment(s), this option will not be shown.\n\n\nTest students\n\uf0c1\n\n\nCodio automatically creates 3 test students for you. This allows instructors to view the student experience when assignments are assigned to courses.\n\n\n\n\nThey can be seen in the members section. If there are not 3 student listed then you can regenerate them from this screen.\n\n\n\n\n\n\n\n\nYou can log in as the student here by clicking the \nLogin as\n button:\n\n\n\n\n\n\n\n\nOr you can also log in as the student within a course as well:\n\n\n\n\n\n\n\n\nYou can switch back to teacher mode by clicking \nSwitch back to teacher account\n.\n\n\n\n\n\n\nIf your course is LMS integrated then you will need to perform your testing from the LMS and not use the Codio test students.\n\n\nExcluding Files\n\uf0c1\n\n\nFiles/folders may need to be excluded from students assignments. Such files may be\nunused resources/logs and other files used when testing the assignment prior to publishing.\n\n\nThis can be handled by using \n.unitignore\n file in the source project and when published to a course, these files/folders will not be available to the students.\n\n\nEnter on a new line the file/folders to be excluded defining them relative to the location of the \n.unitignore\n file and defining folders with \n/\n\n\nFor example if the \n.unitignore\n file is located in the project workspace and you wish to exclude\n\n\n\n\ntesting\n \n \nnode_modules\n folder\n\n\nthe file \ncheckscore.js\n in the \nviews\n folder\n\n\nthe files \napp.js\n and \nREADME.md\n\n\n\n\nthe \n.codioignore\n file will be\n\n\n/testing\n/node_modules\n/views/checkscore.js\napp.js\nREADME.md\n\n\n\n\nManaging Assignments\n\uf0c1\n\n\nOn the module assignment screen you can manage the following settings\n\n\n\n\n\n\nChange the name of the assigment\n\n\nSee if an assignment is in DRAFT mode, and therefore not visible to students in the course\n\n\nPublish the assignment. This is required before students will be able to see the assignment and also if you have need to update the assignment those changes will not be visible to students until it is published again\n\n\nView the version history of the assigment publications, This allows you to view the version history. You can see\n\n\ndate/time when the assignment was published,\n\n\nname of the person who published the assignment,\n\n\nthe name and version of the stack assigned to the assignment.\n\n\n\n\n\n\n\n\n\n1. View (and change) the stack settings for the assignment. This option is only available for project assignments. It allows you to switch the stack used by a assignment. If a stack is set to \nUse latest version\n then\n    - when a assignment has been assigned to a course, any student who has not yet started the assignment will use the latest version of the stack.\n    - the assignment itself will remain on whatever stack version was last assigned. If you want to change it to the latest created stack version then you should click the \nSave Changes\n button to update it.\n1. Delete the individual assignment from the module. You are required to enter a confirmation code to proceed and you can then do one of the following\n    - Select \nConvert content to a project\n to delete the assignment and save the assignment contents to your projects list.\n    - Select \nDelete content\n to delete the assignment and its content entirely.\n1. Delete the entire module. You are required to enter a confirmation code to proceed\n1. Reorder the modules in the course. \n\n\nYou can also change the order of the assignments within a module by dragging an assignment into its desired position in the list.\n\n\nTo the top right of the list item is a pencil icon. \n\n\n\nClick on this to enter editing mode.\nOn this screen you can:\n\n\n\n\nPin\n the assignment\n\n\nAmend the \nUnit Duration\n of the assignment\n\n\nSee at a glance how many students have started the unit\n\n\nRelease the grades\n\n\nView Insights for the assignment\n\n\nAccess the \nassignment settings\n\n\n\n\nFrom the 3 blue dot menu area you can:\n\n\n\n\nRun the \nPlagiarism Checker\n\n\nDownload CSV with student grade data for the assignment\n\n\nExport assignment data. This allows you to export all the data for the assignment, including the students workspaces. All the data from the course will be compiled into a zip file in the background and when ready an email will be sent to you with a link for you to download. The link will be active for 7 days and after this time the zip file will be removed. All the data from all the courses/modules/assignments in the course can also be exported. \n\n\n\n\nAssignment Settings\n\uf0c1\n\n\nClick on the settings icon to view the assignment settings\n\n\n\nAssignment Settings\n\uf0c1\n\n\nAvailable from the \nSettings\n area.\n\n\n\n\nPin/unpin units\n\uf0c1\n\n\nThis allows you to \npin or unpin an assignment\n. Pinning an assignment ensures that the assignment is shown in a large box at the top of the student dashboard. You would typically pin an assignment if this is the assignment you are currently teaching. When you have finished teaching it, you would unpin it. You should not have more than four assignments pinned.\n\n\nDisable/enable assignment\n\uf0c1\n\n\nYou can enable or disable assignments that have been assigned to a course. This is useful when your students are working in controlled assessment conditions and you only want them to have access to their work within a prescribed timeframe.\nFor book based assignments, you should be aware that if another assignment gives access to the book then students can access the book. You have the ability to \ndisable access to content outside the current assignment\n but if the student is able to access the terminal window or see the file tree then access to areas that you intend to be disabled cannot be guaranteed. For project assignments and normal projects, preventing access can be guaranteed.\n\n\nVisibility on completed\n\uf0c1\n\n\nYou can specify the students ability to access the assignment when completed. \nNot available for book based assignments\n\n\n\n\n'None' will allow students to continue to access and work in code files, any assessments in the assignment can be seen but not changed,\n\n\n'Read-Only' will allow students to access their assignment but not make any changes.\n\n\n'No Access' will not allow the students to access their assignment.\n\n\n\n\nVisibility on disabled\n\uf0c1\n\n\nYou can specify the students ability to access the assignment when disabled.  \nNot available for book based assignments\n\n\n\n\n'Read-Only' will allow students to access their assignment but not make any changes.\n\n\n'No Access' will not allow the students to access their assignment.\n\n\n\n\nUnit duration\n\uf0c1\n\n\nYou can specify a start and a stop date and time for an assignment. The assignment will be disabled prior to the start date at which point it becomes available to students in their dashboard.\n\n\nOnce the stop date and time is reached you can set the assignment to be marked as complete and/or disabled. If you elect to disable access, then depending on your \ndisabled assignment settings\n students will either be refused all access or can have read-only access to the assignment.\n\n\nPlease note, that selecting mark as complete will not stop students who have not started the assignment from being able to access the assignment after the stop date/time has been reached. If you wish to manage this, look at using the disable assignment and mark as complete option.\n\n\nFor book based assignments, you should read the caveats mentioned in the \nDisable/enable assignment\n section above.\n\n\n\n\nFor more information on using \nMark as complete\n please \nclick here\n.\n\n\nPenalties\n\uf0c1\n\n\nIf applying penalties for late submission it is recommended that you set the end date/time for the assignment to the last date/time of your penalties.\nYou can set the penalty date/time after the assignment end date/time but for students to then be able to work you will need to change the individual students assignment status from \nCompleted\n and also adjust the \ndeadline\n for each of them.\n\n\nTime Zones\n\nThe time zone is taken automatically from your browser, so please check your time settings are correct.\n\n\nSet assignment penalties\n\uf0c1\n\n\nYou can specify penalties in the event that students do not complete the assignment within agreed timescales. Incremental penalties can be applied if required.\n\n\n\n\nEach row in the table will contain the following fields :\n\n\n\n\nNumber (auto-incremental)\n\n\nDate\n\n\nTime\n\n\nPenalty % (The % of the total score for the assignment to be deducted as a penalty)\n\n\nMessage (If the message field is not specified, then a default message will be generated - see below)\n\n\n\n\nDefault Messages:\n\uf0c1\n\n\n1: If a student opens a project after deadline or the student is working in the assignment when deadline is reached\n\n\nDeadline X (the table row number) has been reached. This deadline carries a penalty of Y%. You can review your answers with no penalty. However, if you decide to change any answers by pressing the Modify button beneath a question, a Y% penalty deduction will be applied to your overall results. Once a modify button has been pressed once, the penalty deduction will be applied and you will be free to modify as many questions as you like with no additional penalty\n\n\n2: If a student presses a Modify button past a deadline\n\n\nDeadline X (the table row number) has been reached. This deadline carries a penalty of Y%. If you proceed, a Y% penalty deduction will be applied to your overall results. You will then be able to modify as many questions as you like with no additional penalty\n\n\n3: Final deadline (assignment end date)\n\n\nOnce the final deadline hits (if one is set), the assignment will be forced to read-only and then following message will be displayed to the student :\n\n\nYou have exceeded the final deadline. You are no longer able to make changes to your answers. You are free to review your answers.\n\n\nTeacher/Instructors Dashboard:\n\uf0c1\n\n\nPenalty indicator:\n If a penalty was applied then the grade field will have a light red background. This should be the case even if no grade has been calculated yet. Hover above the field to see the penalty details (#, date/time, penalty %).\n\n\n\nFinal grade field:\n this field will show the final graded score less any penalty deduction. If the field is overwritten by the teacher/instructor, then the penalty deduction will not be applied.\n\n\n\n\nAdjusting deadline for individual students\n\uf0c1\n\n\nThe set deadline(s) can be adjusted forward by a number of days if required for individual students.\n\n\nSelect the assignment from the course assignments list and click on the 3 blue vertical dots and select 'Adjust deadline'\n\n\n\n\nYou can then adjust the deadline forward by as many days as you require\n\n\n\n\nWhen applied, the adjustment will then show next to the grade field in the teacher/instructors dashboard. The deadline in the image below was adjusted by 4 days\n\n\n\n\nGrading Template\n\uf0c1\n\n\nWhere you can set the grading template to use for the assignment\n\n\nAutograde Method\n\uf0c1\n\n\nAutograde on assignment complete\n\uf0c1\n\n\nThis option provides two ways of autograding assignment scores for each student. The grading field is populated by a script authored by the project author without the need to manually populate it. The autograding script is triggered once an assignment is marked as complete.\n\n\nA assignment is marked as complete in any of the following ways\n\n\n\n\nStudents mark the assignment as complete from their dashboard.\n\n\nThe teacher can also mark the assignment as complete for a student from the Course dashboard with the assignment selected.\n\n\nThe teacher can mark all assignments as complete for all students by pressing the \nActions\n button. This button appears on the assignment screen.\n\n\nIf you are using the \nAssignment Duration\n feature, all student assignments are marked as complete as soon as the assignment duration expiry date and time is reached.\n\n\n\n\nThe two autograding options can be found in the assignment settings.\n\n\n\n\nUse the auto-graded assessments within the assignment to auto-populate the grading field with the aggregate % score from all assessments.\n\n\nRun a script to generate the grading either as soon as the student (or teacher) marks the assignment as complete in their dashboard or when the \nassignment duration\n expires.\n\n\n\n\nThe two options can be found in the \nAUTOGRADE METHOD\n drop-down list.\n\n\n\n\nTransferring authored content assessment total\n\uf0c1\n\n\nIf you have created auto-graded assessments within your authored content, Codio aggregates all scores so you can see them in the Courses dashboard. You will see that there is a total percentage calculated. This percentage value is transferred into the grading field. If you are using \nLMS integration\n then this grading field is then transferred into your LMS gradebook once you \nrelease the grades\n.\n\n\n\n\nRunning a custom script\n\uf0c1\n\n\nA more advanced way of populating the grading field is to write your own custom script that evaluates the student code. This script can then transfer the grading value into the grading field.\n\n\nIf you are using an LMS platform with Codio then be sure to write a percentage value into this field to maintain compatibility with LMS gradebooks.\n\n\n\n\n\n\nSecure scripts\n\uf0c1\n\n\nIf you want your scripts to run securely such that the student has no way of either viewing the script or viewing other files that might contain secure data then you should place those scripts and files in the \n.guides/secure\n folder. Codio ensures that only the original project author is able to access this folder but when it is assigned to Students as an assignment, it is not accessible in any way and the script runs in an ephemeral container isolated from the students assignment.\n\n\nTimeout\n\uf0c1\n\n\nYour script must execute within 3 minutes or a timeout error will occur.\n\n\nAccessing authored content assessment results\n\uf0c1\n\n\nYou are able to get scores attained by students in authored content based autograded assessments. This data is in JSON format and can be accessed from the \nCODIO_AUTOGRADE_ENV\n environment variable. Below is an example.\n\n\n{\n  \nassessments\n: {\n    \nstats\n: {\n      \ntotal\n: 2,\n      \nanswered\n: 2,\n      \ncorrect\n: 2,\n      \ntotalPoints\n: 12,\n      \npoints\n: 8\n    },\n    \ninfo\n: [{\n      \nname\n: \nTest 1\n,\n      \npoints\n: 5,\n      \nanswer\n: {\n        \ncorrect\n: true,\n        \npoints\n: 5\n      }\n    }, {\n      \nname\n: \nTest 2\n,\n      \npoints\n: 7,\n      \nanswer\n: {\n        \ncorrect\n: true,\n        \npoints\n: 3\n      }\n    }]\n  },\n  \ncompletedDate\n: \n2017-02-07T09:47:54.471Z\n\n}\n\n\n\n\nYou can get both summary data and data for each assessment individually.\n\n\n\n\nRegrading for an individual student\n\uf0c1\n\n\nIf students set their work to 'complete' such that an autograde step is triggered then you can regrade the work by resetting the complete switch and then setting it again, which re-triggers the autograding.\n\n\nRegrading all students\n\uf0c1\n\n\nFrom the \nActions\n area of the assignment, you can regrade all students that have already been auto-graded by pressing the \nRegrade All\n button. This is useful if you have found a bug in your grading script. If you follow (or use) the code sample shown at the bottom of this page you can see how the original student submission date is handled.\n\n\nTesting and debugging your grading scripts\n\uf0c1\n\n\nIMPORTANT\n: please read this section carefully.\n\n\nWe provide a way of testing autograding scripts when authoring your project. This is described below. You should make use of this before publishing your project to a course.\n\n\nYou should be aware that once the assignment has been published to the course, any changes made to the assignment's source project are not automatically reflected in the published assignment. As a result, if you include your main grading logic within the project itself and if that script has bugs, you will not be able to fix the bugs without deleting the assignment, fixing the bug and finally republishing the assignment. All student data will be lost as a result. However, if all your scripts are stored in \n.guides/secure\n folder, you can update and test them and you can then \nUpdate assignment\n\n\nAnother strategy is to use a simple bootstrap launcher that loads and executes the script from a remote location that you can edit and debug independently of the Codio box.\n\n\nThe following example bash script shows a Python script that is located as a Gist on GitHub. This script might be called \n.guides/secure/launcher.sh\n.\n\n\n#!/bin/bash\nURL=\nhttps://gist.githubusercontent.com/MaximKraev/11cd4e43b0c43f79d9478efbe21ba1b9/raw/validate.py\n\ncurl -fsSL $URL | python - $@\n\n\n\n\nIt is important that it is located in the \n.guides/secure\n folder. You then specify the full filepath \n.guides/secure/launcher.sh\n in the \nSet custom script path\n field in the assignment settings.\n\n\nYou are now free to debug the Python script and fix any bugs that you may have noticed once students have started work on the assignment.\n\n\nTesting your script in the IDE\n\uf0c1\n\n\nWe provide the ability to test your autograding script from the \nEducation -\n Test Autograde Script\n menu.\n\n\nThis option lets you specify the location to your autograding script and run it against the current project contents. It also lets you simulate scores attained by any autograded assessments located within the Codio Guide.\n\n\n\n\nYou should be aware of the following points.\n\n\n\n\nWhen you press the \nTest Script\n button\n\n\nall output to \nstdout\n and \nstderr\n are displayed within the dialog\n\n\nthe grade as returned by your test script is at the bottom of the output section\n\n\nstdout\n and \nstderr\n output is not available when running for real (not in this test mode) as the autograding script runs invisibly when the assignment is marked as complete. As such, you should generate output for testing and debugging purposes only.\n\n\nIf you want your script to provide any feedback to the student, then you should output it to a file that the student can access when opening the project at a later date. In this case you will need to allow read-only access to the project from the assignment settings after being marked as complete.\n\n\nYour script must execute within 3 minutes to avoid a timeout error.\n\n\n\n\nIf the Guide has autograded assessments then the test takes its data from the fields shown in the dialog. All of your assessment settings are accessed as described above under \nAccessing Guide assessment results\n.\n\n\nExample Python grading script\n\uf0c1\n\n\nBelow is an example Python file that might be loaded by the bootstrap script above.\n\n\nNotice that the only code you need to modify is near the bottom. The other functions are helpers and can be used for any test in any assignment.\n\n\nimport os\nimport random\nimport requests\nimport json\nimport datetime\n\n# import grade submit function\nimport sys\nsys.path.append('/usr/share/codio/assessments')\nfrom lib.grade import send_grade\n\n##################\n# Helper functions #\n##################\n\n\n# Get the url to send the results to\nCODIO_AUTOGRADE_URL = os.environ[\nCODIO_AUTOGRADE_URL\n]\nCODIO_UNIT_DATA = os.environ[\nCODIO_AUTOGRADE_ENV\n]\n\ndef main():\n  # Execute the test on the student's code\n  grade = validate_code()\n  # Send the grade back to Codio with the penatly factor applied\n  res = send_grade(int(round(grade)))\n  exit( 0 if res else 1)\n\n########################################\n# You only need to modify the code below #\n########################################\n\n# Your actual test logic\n# Our demo function is just generating some random score\ndef validate_code():\n  return random.randint(10, 100)\n\nmain()\n\n\n\n\n\n\nExample Bash grading script\n\uf0c1\n\n\nBelow is an example bash script file that would be stored  in .guides/secure folder\n\n\n#!/bin/bash\nset -e\n# Your actual test logic\n# Our demo function is just generating some random score\nPOINTS=$(( ( RANDOM % 100 )  + 1 ))\n# Show json based passed environment\necho $CODIO_AUTOGRADE_ENV\n# Send the grade back to Codio\ncurl --retry 3 -s \n$CODIO_AUTOGRADE_URL\ngrade=$POINTS\n\n\n\n\n\nTODO\n\n\nTeachers Grading\n\uf0c1\n\n\nAssessments Grading\n\uf0c1\n\n\nScript Grading\n\uf0c1\n\n\nThis allows you to specify an auto-grade script that should run when the assignment is marked as complete. The default setting ensures that any grades generated from auto-graded assessments and grades from free text assessments are automatically transferred into the grading field.\n\n\nActions area settings\n\uf0c1\n\n\nAdditional options are also available if you select the \nActions\n button.\n\n\n\n\n\n\nPlagiarism checker\n\n\n\n\nYou can run \nplagiarism detection\n from the blue dots menu on the assignment or the \nActions\n area.\n\n\n\n\nMark all as completed\n\n\n\n\nCertain actions can be triggered when a student marks an assignment as complete: \nAuto-graded assessment scores can be passed directly to the grade field\n and/or \nScripts can be executed for assessing the student code and assigning the grade\n\n\nStudents can mark the assignment as complete from their own dashboards but a teacher is also able to do this on their behalf either individually or for all students either by pressing the \nMarking All As Completed\n button to mark all student assignments as complete, hover over a student to see the switch appear to the left of the students name, which you can then activate or\nAccessing student work\n and going to the \nEducation-\nMark as Completed\n menu item within the IDE.\n\n\nTeachers can also mark complete assignments as incomplete for all students in the course or for individual students selecting the switch or by accessing their assignment.\n\n\n\n\n\n\nUnmark as complete\n\n\n\n\nWhere the assignment can be marked as not complete for all students\n\n\n\n\nDownload CSV\n\n\n\n\nThis allows you to download a CSV file with student grade data for the assignment.\n\n\n\n\nReset\n \n\n\n\n\nThis option will destroy all student work.\n\n\nIn the event that an assignment in your course is updated and, for some reason, you cannot use the \nUpdate course\n option, you can reset it so \nall\n students, including those who have already started the assignment, are updated with the new assignment.\n\n\nYou can reset the assignment for all your students by selecting either\n\n\n\n\nthe \nActions\n button and then the \nReset\n button\n\n\n\n\n\n\nor\n\n\n\n\nyou can reset the assignment for individual students from the 3 blue dot menu\n\n\n\n\n\n\n\n\n\n\nRegrade completed\nThis option should be selected if you are running an auto-grade script when the assignment is marked as completed and you want the script to be re-run. \nClick here\n for details on end of assignment auto-grade scripts.\n\n\n\n\n\n\nRelease Grades\nBy default, grades are not shown to students or transferred to the LMS gradebook if you are using LMS integration for a class. When you are ready to do so, you can select the option from here.", 
            "title": "Understanding Courses"
        }, 
        {
            "location": "/courses/classes/#creating-a-new-course", 
            "text": "To work with the course features in Codio you will first need to set up a course for your students.    Sign in to Codio at www.codio.com    If you are in the IDE, click the Codio icon in the top left corner to take you back to the  Courses  screen. If you are in the dashboard, click on  Courses  in the left menu.    Click the  blue plus  sign at the top left of the page.    Select  Empty Course  , complete the details requested, then click  Create Course .    Your new course will appear in your  Courses  area.", 
            "title": "Creating a new course"
        }, 
        {
            "location": "/courses/classes/#creating-new-course-from-share-code", 
            "text": "You can create courses from a code other users in other organisations can share to you.     Select the  From Share Code  option    Enter the code given and complete all other details and the course will be created for you.", 
            "title": "Creating new course from share code"
        }, 
        {
            "location": "/courses/classes/#sharing-your-course-with-others", 
            "text": "TODO", 
            "title": "Sharing your course with others"
        }, 
        {
            "location": "/courses/classes/#cloning-a-course", 
            "text": "You can clone an existing course to create a new course in 2 ways   Sign in to Codio at www.codio.com   Either:\n1. Click the 3 blue dot menu item shown on the main course dashboard and select  Clone Course   or    Select the existing course, go to the  Admin  area.    Click the  Clone Course  button at the bottom of the page.    Complete the details requested for the name of the new course, then click  Create Course .    Your new course will appear in your  Courses  area.    Please note, students in the existing course will not be added to the new course.", 
            "title": "Cloning a Course"
        }, 
        {
            "location": "/courses/classes/#searching-and-ordering-courses", 
            "text": "Courses are shown grouped together by their creation date with the most recently created first.  The grouping intervals are   Sep-Dec - Autumn  Jan-May - Spring  Jun-Aug - Summer", 
            "title": "Searching and ordering courses"
        }, 
        {
            "location": "/courses/classes/#ordering-courses-within-their-groups", 
            "text": "Courses can be ordered by Name, Created Date, Student Count or Start Date within the groups", 
            "title": "Ordering courses within their groups"
        }, 
        {
            "location": "/courses/classes/#searching", 
            "text": "If you have a large number of courses, you can also search by name. Select the  Name  option and simply start typing, whereupon Codio will search within all course names and filter your list accordingly.", 
            "title": "Searching"
        }, 
        {
            "location": "/courses/classes/#archiving-courses", 
            "text": "To help manage the number of courses visible to teachers  they can be archived so they no longer show on the active screen for teachers. Go to the 3 blue dot menu and select 'Archive Course'. \nArchiving a course does not effect students and they will be able to continue working on assignments but just removes them from the active tab.  They are not deleted and can be unarchived at any time in the future if they are required either by clicking on the course in the archived tab or from the 3 blue dot menu and selecting 'Unarchive Course'", 
            "title": "Archiving Courses"
        }, 
        {
            "location": "/courses/classes/#adding-teachers-to-a-course", 
            "text": "Your course may be taught by more than one teacher. If this is the case, you can add another teacher to your Codio course in the following way:    From the  Courses  area, click on your course to open it.    Click on the  Admin  tab, centre right near the top.     Find the  Teachers  area on the left, and then click  Edit .     Click  Add Teacher     Search for the teacher you want to add, then click done.     The teacher should then appear in your teacher list for that course. Now click  Done  to save your changes.     If the teacher is not a member of your Organization, you can send them an invitation email.\n        An email will be sent to your colleague containing a link where they can sign up for a Codio account and on completion they will be added into your organization and course automatically. They must use the email address the invitation was sent to or they will not be successfully added to the organization or course.", 
            "title": "Adding teachers to a course"
        }, 
        {
            "location": "/courses/classes/#teaching-assistants", 
            "text": "A user cannot be a teacher and a student in the same course, but they can be a student in one course and a teacher in another. They can be invited into the course by sending then the invitation email and they will then be able to switch between being a teacher and student. When they are in teacher mode they will see all the courses in which they are set as a teacher and when in student mode will see all the courses in which they are set as a student.", 
            "title": "Teaching Assistants"
        }, 
        {
            "location": "/courses/classes/#add-students-to-a-course", 
            "text": "You can add students to your organization and your course easily by giving each student a unique two-word phrase called a token or by giving them in Course Invitation URL.  A student will enter the token and will automatically be added to the your organization and the correct course as they complete the process to create a Codio account.  To do this follow the steps below:    From the  Courses  area, click on your course to open it.    Click on the  Students  tab, top centre of your screen.    Click on the  blue plus  sign, top left of the page.    You can then send the 2 word token to your students, send them the Invite URL to join the course or you can add the Test students to your course. We recommend you use the  Invite URL  to avoid students going through the process to create a new organisation where they may click on the  Free Trial  button in error. There maybe a delay in us being able to get back to them to advise them of the correct steps to take but if you use the Invite URL, they should be able to get started a lot quicker.       If using the token then ask them to go to  https://codio.com/p/join-class  or select the  Join Course  button on our main website. They should enter the token when requested and proceed to register for a Codio account.    If using the URL, the students can just click that and proceed as above.    To view the students in your course, select the course and the  Students  tab once again. You will see a list of students who have successfully completed the sign-up process.", 
            "title": "Add students to a course"
        }, 
        {
            "location": "/courses/classes/#change-student-passwords", 
            "text": "You can change a student's password in the following way:    From the  Courses  area, click on your course to open it.    Click on the  Students  tab, top centre of your screen.      You will see all students in your course displayed on this screen. Find the student whose password needs to be changed and click on the blue triple dot icon to the right of their name. Choose  Change student's password  and follow the steps to reset.", 
            "title": "Change student passwords"
        }, 
        {
            "location": "/courses/classes/#remove-a-student-from-a-course", 
            "text": "From the  Courses  area, click on your course to open it.    Click on the  Students  tab, top centre of your screen.      You will see all students in your course displayed on this screen. Find the student that you want to remove from the course and click on the blue triple dot icon to the right of their name. Choose  Remove student  to take them out of the course. (Note: this does not remove your student entirely from your organization - if you wish to do this, see  Remove Members", 
            "title": "Remove a student from a course"
        }, 
        {
            "location": "/courses/classes/#book-visibility", 
            "text": "A book based assignment can map to parts of a book. Students can see the mapped book portions of the book in the table of contents.  You can also specify that parts of the book not mapped to by the assignment either a) can be seen or b) cannot be seen in the course. This setting applies to all assignments in the course.  It is controlled from the Admin section in the course TODO when implemented   This option will only show in a course if there is a course containing book based assignments.  Select  Edit Details  button and flip the switch to change the settings as required.   Show only assignment pages  will only show the part of the book mapped to that assignment.  Show all pages  will show all the book content and the areas not mapped to that specific assignment will be grayed out in the table of contents.", 
            "title": "Book Visibility"
        }, 
        {
            "location": "/courses/classes/#deleting-a-course", 
            "text": "A course can be deleted by course teachers and organization owners. All the course data can also be exported. See  Export course data  for more information   Select the course, go to the  Admin  area and then press the  Delete Course  button.     You can delete just the course or you can also delete the course AND remove the students from your organization as well. If you select the option to  Delete the Course and Students  and any of the students in this course are also members in other courses, they will not show in the list of students. They will not be removed from the organization or from other courses they are also members of. The option  Delete Course Only  will just delete the course but not remove any students.     Organization owners  are able to view a list of any members that are no longer members of any courses and remove any users from the organization. See  View organization members  for more information.", 
            "title": "Deleting a course"
        }, 
        {
            "location": "/courses/classes/#exporting-course-data", 
            "text": "", 
            "title": "Exporting course data"
        }, 
        {
            "location": "/courses/classes/#course-data", 
            "text": "Course data (including students workspaces) can be exported. We would recommend the data is exported before you  Delete a Course   Select the course, go to the  Admin  area and then press the  Course Data  button.      All the data from the course will be compiled into a zip file in the background and when ready an email will be sent to you with a link for you to download.    The link will be active for 7 days and after this time the zip file will be removed    You can also access any active files to download (and generate a new export if required) by clicking on the  Course Data  button     Individual assignments data can also be exported separately if required. See  export assignment data  for more details  If your course is LTI enabled you can also download all the unit LTI intergration URL's in a csv file. See  Exporting LTI settings  for more information.", 
            "title": "Course Data"
        }, 
        {
            "location": "/courses/classes/#user-access-data", 
            "text": "Use this to download a CSV of user access to assignments in the course. Details include   Username  Users registered email address  First name  Last name  Date/time when user logged in  Access type (Log In, Log Out, Project Open, Project Close)  Assignment name (n.b Book based assignments will report the name of the book)  Role in course (ie Teacher/Student)  Project path   IP address (IP address associated with login session)    Select the course, go to the  Admin  area and then press the  Export User Access Data  button.     Collection and storage of this data will be retained for maximum of 6 months.", 
            "title": "User Access Data"
        }, 
        {
            "location": "/courses/classes/#lti-settings", 
            "text": "For more information see  Exporting LTI settings", 
            "title": "LTI Settings"
        }, 
        {
            "location": "/courses/classes/#working-with-student-workspaces", 
            "text": "If in the future you have need to review any students workspace, these can be imported back into your Codio account.\nSimply 'zip' up the folder and you can then import the project into your account. See  creating and importing a project  for more information.  Please note, the stack used in the original workspace is not included in the exported workspace so if you need to 'run' the project you should select the appropriate stack when importing the project or by switching the stack, either from the gear icon in the main projects listing or by going to  Project Stack Settings  in the project", 
            "title": "Working with student workspaces"
        }, 
        {
            "location": "/courses/classes/#course-contact-url", 
            "text": "Contact URL's can be set at the course level so if you have specific areas/forums for your courses for students to raise questions, you can set the contact URL's there and it will override the  organisation contact url  if set. You can set as many options as you require and also define the default option that will be checked automatically for the students.  Students will then be shown all the options in addition to contact Codio directly if they have a problem accessing the Codio platform, or loading a assignment.    Select the course, go to the  Admin  area and  Edit Details  where you can then enter the text and URL's to direct students to when they use any of the Contact us options.    N.B. \"Teacher\" accounts will not be effected by this setting and they will still be able to contact Codio in the usual manner. See  Support  for more on this", 
            "title": "Course contact url"
        }, 
        {
            "location": "/courses/classes/#lms-shared-feedback", 
            "text": "If your organisation uses an LMS, when grades are released a URL is passed to the LMS grading area where students/teachers can access the grading information for the assignment.  By default, only the course teachers and the individual student can access the grading preview but by enabling the LMS shared feedback option,   this will pass a different URL back to your LMS system where anyone who knows the URL can access the students grading information", 
            "title": "LMS shared feedback"
        }, 
        {
            "location": "/courses/classes/#grading-rubric-templates", 
            "text": "The Grading Rubric feature provides a two dimensional grid that provides grading guidance for manually assessing a coding project.", 
            "title": "Grading rubric templates"
        }, 
        {
            "location": "/courses/classes/#grading-rubric-templates_1", 
            "text": "You will only have access to this feature if you are a member of the  owners group  or a teacher. To find the grading templates screen, click on your user name from the Codio dashboard and then select your organization name.  You should see a  Grading Templates  tab item. There will be fewer tabs visible if you are not an organization owner.   Click the  New  button in the to right to create a new template. You should then add rows and columns.  Rows  : a row addresses a single assessment criterion. Each row has a weighting % value that you should supply. All rows must add up to 100%. Columns  : each column contains a score that you can freely assign. Typically, you would have a 0 value in the first column that corresponds to a complete failure to address the criterion. The remaining columns contain a range of values that you choose with the right most column being the score for fully meeting the assessment criterion. Please read the following paragraph before choosing column values.", 
            "title": "Grading Rubric templates"
        }, 
        {
            "location": "/courses/classes/#calculation-of-scores", 
            "text": "When you are grading student code, the grading rubric will appear and is clickable. Points are awarded according to where you click. Codio will then weight the scores according to the weightings that were provided for each row.  A final score is calculated based on your selections and is re-based to the maximum column value. You should be aware of this when choosing your column values. If you wanted your scores to calculate directly to percentages then you should choose a maximum value of 100 with other column values distributed between 0 and 100.", 
            "title": "Calculation of scores"
        }, 
        {
            "location": "/courses/classes/#applying-a-grading-template-to-an-assignment", 
            "text": "To use a grading template you should select the course so you see the full assignment listing. To the top right of the list item is a pencil icon. Click on this to enter editing mode   Then select  Settings  and scroll down to the  Grading template  from the list and choose the grading template from the list. If there are not templates set up, follow the link to the organisation area to create a new template.", 
            "title": "Applying a grading template to an assignment"
        }, 
        {
            "location": "/courses/classes/#grading-student-work", 
            "text": "You perform the actual grading from the course. Select an assignment to grade so you see the students listed.   You can then grade in the usual two ways.   either from the student course. With an assignment selected from the course, you click the grading box for the student and then the grading dialog appears. Press edit and click within the grading field and the template appears.  or from with a student's code, select the  Education- Grading  menu item to bring up the same grading dialog.   You can then click within the template to assign a score for each criterion. Large cells are partially collapsed but will maximize when you click within the row. The score is calculated as you click.  It is important that you click the Apply button to save the score correctly.", 
            "title": "Grading student work"
        }, 
        {
            "location": "/courses/classes/#gigaboxes", 
            "text": "A Gigabox is a box that has a higher memory allocation than the standard Codio boxes. The default memory allocation is 400MB, which is fine for most applications.  If you need your students to have more memory then we offer 1GB, 2GB, 8GB,16GB and GPU (for GPU-accelerated instances) boxes. These need to be purchased separately and you can add any number of either box size to your organization. You will need to specify the Gigabox size and then each student accessing the assignment will have a Gigabox for that assignment.  You can set the required Gigabox in your project or assignment in the course module and this setting will be automatically applied to the assignments as you add the module into a course  You should be aware that if you do not have enough Gigaboxes in your organization then they will be allocated on a first come, first served basis. Students who access the assignment after your Gigabox limit has been reached will see a warning.  An organization owner can see the status of the Gigabox count in the organization settings screen.", 
            "title": "Gigaboxes"
        }, 
        {
            "location": "/courses/classes/#assign-a-project-to-the-course", 
            "text": "In Codio, a teaching assignment is a project that has been assigned to a course. The scope of an assignment is entirely up to you but it could be a project assignment that a course works on. It could also be some tutorial content built using Guides. We generally recommend that it relates reasonably closely to a lesson or two. But if you prefer and it suits your structure better then you can assign as much or as little content to a Unit as you like.  There are two ways you can assign an assessment to a course.", 
            "title": "Assign a project to the course"
        }, 
        {
            "location": "/courses/classes/#assign-a-project", 
            "text": "The simplest and quickest thing you can do is to assign one of your projects to a course. Once assigned, we refer to it as an assessment but the assessment's source is simply a project.   With the course selected, click on the Assessment tab at the top of the page. The list will be empty at this point.  Now click the  +  button in the top left.  Select  Empty Module  and create a new module.  When created click  Add Assignment  and then select  Project Based  From here you can either start creating a new project or import projects in.  To import an existing project see:      Then select  Fork Project  and your project will show. If you have other projects in your  My Projects  area you can browse to select one of them.  At this point you can set the name of the assignment (by default it will be the name of your project with 'fork' appended) and add a description if you wish.  When ready, click the  Create  button and the assignment will be added to the course module in draft mode.  To create a new assignment, select your starting point (the stack you wish to start from) and you can create your assignment. For more information on authoring your content, strategies etc, see  Course Management  For the assignments to be visible to your students, you need to  Publish  the assignment.  Any changes you make in future to assigments will not be visible to students until you publish again    At this point, we take a snapshot of your source project, ready for the students to clone when they start the assignment. Any changes you make to the source project will not be reflected automatically in the student assignment.  Once assigned to the course, each student will be able to access the assignment from their dashboard. Go to the  Students  tab and login as one of the test students. Make sure you have the correct course and module selected form the dropdowns. You will now see the assignment in the list. If you don't, make sure the module dropdown has the correct module name selected.  You can then switch back to your teacher account.", 
            "title": "Assign a project"
        }, 
        {
            "location": "/courses/classes/#assign-resource-modules-to-the-course", 
            "text": "You can assign existing course modules and all of its assignments to your course with a single action.  To assign an existing course module, follow the steps below:    From the  Courses  screen, click on your course to open it.    Click on the  blue plus  sign, top left of the page, and choose  Copy from Existing .    Choose the course you want to copy the content from and select the modules you wish and click  Select    The module will appear in your course.", 
            "title": "Assign resource modules to the course"
        }, 
        {
            "location": "/courses/classes/#removing-course-module-from-a-course", 
            "text": "You can remove course modules from a course selecting the  Delete  button  You can also remove individual assignments from a module, clicking the  Delete  button for that assignment  Warning \nDeleting a module or assignment from your course also removes all student data for all the assignments in the module (including assessment data and results) and cannot be restored so you may wish to  Download CSV  before removing the module or assignment.", 
            "title": "Removing course module from a course"
        }, 
        {
            "location": "/courses/classes/#update-course", 
            "text": "TODO \nWhere you are using content in multiple courses and changes are made to that content, these changes will be detected and you can upgrade the content of the other courses to the latest version from the  Update Course  button. The code workspace, other than the guides folder, is never updated as this can invalidate work for students who have already started the assignment.   Updates may be new assignments added to the course, a new version of the stack, updates for assessments in a guide or book, changes to the general guide content or a change in the order of assignments in the course.  Most assessment changes can be safely upgraded but if you have altered the structure of a question (for example multiple choice changed from single response to multiple response) then student response data can be invalidated.   Any changes to guides content can be applied. You should be careful about making major structural changes as students who have already started the assignment could be confused. The code workspace folder will not be impacted, so any student work in this folder will not be impacted.", 
            "title": "Update course"
        }, 
        {
            "location": "/courses/classes/#select-assignments-to-update", 
            "text": "A list of all modified assignments will be shown. You can select the assignments you wish to update. The  Update Course  button will no longer be shown if updates have already been applied.", 
            "title": "Select assignments to update"
        }, 
        {
            "location": "/courses/classes/#stack-updates", 
            "text": "If updates to the stack are detected and students have already started the assignment(s) you can elect to update the stack as well as the guides content by pressing the  Update Content and Stack  button.  \nHowever,  any data outside the code workspace folder will be lost for all students who have already started the assignment .  If there are no detected updates to the stack or no students have started the assignment(s), this option will not be shown.", 
            "title": "Stack updates"
        }, 
        {
            "location": "/courses/classes/#test-students", 
            "text": "Codio automatically creates 3 test students for you. This allows instructors to view the student experience when assignments are assigned to courses.   They can be seen in the members section. If there are not 3 student listed then you can regenerate them from this screen.     You can log in as the student here by clicking the  Login as  button:     Or you can also log in as the student within a course as well:     You can switch back to teacher mode by clicking  Switch back to teacher account .    If your course is LMS integrated then you will need to perform your testing from the LMS and not use the Codio test students.", 
            "title": "Test students"
        }, 
        {
            "location": "/courses/classes/#excluding-files", 
            "text": "Files/folders may need to be excluded from students assignments. Such files may be\nunused resources/logs and other files used when testing the assignment prior to publishing.  This can be handled by using  .unitignore  file in the source project and when published to a course, these files/folders will not be available to the students.  Enter on a new line the file/folders to be excluded defining them relative to the location of the  .unitignore  file and defining folders with  /  For example if the  .unitignore  file is located in the project workspace and you wish to exclude   testing     node_modules  folder  the file  checkscore.js  in the  views  folder  the files  app.js  and  README.md   the  .codioignore  file will be  /testing\n/node_modules\n/views/checkscore.js\napp.js\nREADME.md", 
            "title": "Excluding Files"
        }, 
        {
            "location": "/courses/classes/#managing-assignments", 
            "text": "On the module assignment screen you can manage the following settings    Change the name of the assigment  See if an assignment is in DRAFT mode, and therefore not visible to students in the course  Publish the assignment. This is required before students will be able to see the assignment and also if you have need to update the assignment those changes will not be visible to students until it is published again  View the version history of the assigment publications, This allows you to view the version history. You can see  date/time when the assignment was published,  name of the person who published the assignment,  the name and version of the stack assigned to the assignment.     \n1. View (and change) the stack settings for the assignment. This option is only available for project assignments. It allows you to switch the stack used by a assignment. If a stack is set to  Use latest version  then\n    - when a assignment has been assigned to a course, any student who has not yet started the assignment will use the latest version of the stack.\n    - the assignment itself will remain on whatever stack version was last assigned. If you want to change it to the latest created stack version then you should click the  Save Changes  button to update it.\n1. Delete the individual assignment from the module. You are required to enter a confirmation code to proceed and you can then do one of the following\n    - Select  Convert content to a project  to delete the assignment and save the assignment contents to your projects list.\n    - Select  Delete content  to delete the assignment and its content entirely.\n1. Delete the entire module. You are required to enter a confirmation code to proceed\n1. Reorder the modules in the course.   You can also change the order of the assignments within a module by dragging an assignment into its desired position in the list.  To the top right of the list item is a pencil icon.   \nClick on this to enter editing mode.\nOn this screen you can:   Pin  the assignment  Amend the  Unit Duration  of the assignment  See at a glance how many students have started the unit  Release the grades  View Insights for the assignment  Access the  assignment settings   From the 3 blue dot menu area you can:   Run the  Plagiarism Checker  Download CSV with student grade data for the assignment  Export assignment data. This allows you to export all the data for the assignment, including the students workspaces. All the data from the course will be compiled into a zip file in the background and when ready an email will be sent to you with a link for you to download. The link will be active for 7 days and after this time the zip file will be removed. All the data from all the courses/modules/assignments in the course can also be exported.", 
            "title": "Managing Assignments"
        }, 
        {
            "location": "/courses/classes/#assignment-settings", 
            "text": "Click on the settings icon to view the assignment settings", 
            "title": "Assignment Settings"
        }, 
        {
            "location": "/courses/classes/#assignment-settings_1", 
            "text": "Available from the  Settings  area.", 
            "title": "Assignment Settings"
        }, 
        {
            "location": "/courses/classes/#pinunpin-units", 
            "text": "This allows you to  pin or unpin an assignment . Pinning an assignment ensures that the assignment is shown in a large box at the top of the student dashboard. You would typically pin an assignment if this is the assignment you are currently teaching. When you have finished teaching it, you would unpin it. You should not have more than four assignments pinned.", 
            "title": "Pin/unpin units"
        }, 
        {
            "location": "/courses/classes/#disableenable-assignment", 
            "text": "You can enable or disable assignments that have been assigned to a course. This is useful when your students are working in controlled assessment conditions and you only want them to have access to their work within a prescribed timeframe.\nFor book based assignments, you should be aware that if another assignment gives access to the book then students can access the book. You have the ability to  disable access to content outside the current assignment  but if the student is able to access the terminal window or see the file tree then access to areas that you intend to be disabled cannot be guaranteed. For project assignments and normal projects, preventing access can be guaranteed.", 
            "title": "Disable/enable assignment"
        }, 
        {
            "location": "/courses/classes/#visibility-on-completed", 
            "text": "You can specify the students ability to access the assignment when completed.  Not available for book based assignments   'None' will allow students to continue to access and work in code files, any assessments in the assignment can be seen but not changed,  'Read-Only' will allow students to access their assignment but not make any changes.  'No Access' will not allow the students to access their assignment.", 
            "title": "Visibility on completed"
        }, 
        {
            "location": "/courses/classes/#visibility-on-disabled", 
            "text": "You can specify the students ability to access the assignment when disabled.   Not available for book based assignments   'Read-Only' will allow students to access their assignment but not make any changes.  'No Access' will not allow the students to access their assignment.", 
            "title": "Visibility on disabled"
        }, 
        {
            "location": "/courses/classes/#unit-duration", 
            "text": "You can specify a start and a stop date and time for an assignment. The assignment will be disabled prior to the start date at which point it becomes available to students in their dashboard.  Once the stop date and time is reached you can set the assignment to be marked as complete and/or disabled. If you elect to disable access, then depending on your  disabled assignment settings  students will either be refused all access or can have read-only access to the assignment.  Please note, that selecting mark as complete will not stop students who have not started the assignment from being able to access the assignment after the stop date/time has been reached. If you wish to manage this, look at using the disable assignment and mark as complete option.  For book based assignments, you should read the caveats mentioned in the  Disable/enable assignment  section above.   For more information on using  Mark as complete  please  click here .", 
            "title": "Unit duration"
        }, 
        {
            "location": "/courses/classes/#penalties", 
            "text": "If applying penalties for late submission it is recommended that you set the end date/time for the assignment to the last date/time of your penalties.\nYou can set the penalty date/time after the assignment end date/time but for students to then be able to work you will need to change the individual students assignment status from  Completed  and also adjust the  deadline  for each of them.  Time Zones \nThe time zone is taken automatically from your browser, so please check your time settings are correct.", 
            "title": "Penalties"
        }, 
        {
            "location": "/courses/classes/#set-assignment-penalties", 
            "text": "You can specify penalties in the event that students do not complete the assignment within agreed timescales. Incremental penalties can be applied if required.   Each row in the table will contain the following fields :   Number (auto-incremental)  Date  Time  Penalty % (The % of the total score for the assignment to be deducted as a penalty)  Message (If the message field is not specified, then a default message will be generated - see below)", 
            "title": "Set assignment penalties"
        }, 
        {
            "location": "/courses/classes/#default-messages", 
            "text": "1: If a student opens a project after deadline or the student is working in the assignment when deadline is reached  Deadline X (the table row number) has been reached. This deadline carries a penalty of Y%. You can review your answers with no penalty. However, if you decide to change any answers by pressing the Modify button beneath a question, a Y% penalty deduction will be applied to your overall results. Once a modify button has been pressed once, the penalty deduction will be applied and you will be free to modify as many questions as you like with no additional penalty  2: If a student presses a Modify button past a deadline  Deadline X (the table row number) has been reached. This deadline carries a penalty of Y%. If you proceed, a Y% penalty deduction will be applied to your overall results. You will then be able to modify as many questions as you like with no additional penalty  3: Final deadline (assignment end date)  Once the final deadline hits (if one is set), the assignment will be forced to read-only and then following message will be displayed to the student :  You have exceeded the final deadline. You are no longer able to make changes to your answers. You are free to review your answers.", 
            "title": "Default Messages:"
        }, 
        {
            "location": "/courses/classes/#teacherinstructors-dashboard", 
            "text": "Penalty indicator:  If a penalty was applied then the grade field will have a light red background. This should be the case even if no grade has been calculated yet. Hover above the field to see the penalty details (#, date/time, penalty %).  Final grade field:  this field will show the final graded score less any penalty deduction. If the field is overwritten by the teacher/instructor, then the penalty deduction will not be applied.", 
            "title": "Teacher/Instructors Dashboard:"
        }, 
        {
            "location": "/courses/classes/#adjusting-deadline-for-individual-students", 
            "text": "The set deadline(s) can be adjusted forward by a number of days if required for individual students.  Select the assignment from the course assignments list and click on the 3 blue vertical dots and select 'Adjust deadline'   You can then adjust the deadline forward by as many days as you require   When applied, the adjustment will then show next to the grade field in the teacher/instructors dashboard. The deadline in the image below was adjusted by 4 days", 
            "title": "Adjusting deadline for individual students"
        }, 
        {
            "location": "/courses/classes/#grading-template", 
            "text": "Where you can set the grading template to use for the assignment", 
            "title": "Grading Template"
        }, 
        {
            "location": "/courses/classes/#autograde-method", 
            "text": "", 
            "title": "Autograde Method"
        }, 
        {
            "location": "/courses/classes/#autograde-on-assignment-complete", 
            "text": "This option provides two ways of autograding assignment scores for each student. The grading field is populated by a script authored by the project author without the need to manually populate it. The autograding script is triggered once an assignment is marked as complete.  A assignment is marked as complete in any of the following ways   Students mark the assignment as complete from their dashboard.  The teacher can also mark the assignment as complete for a student from the Course dashboard with the assignment selected.  The teacher can mark all assignments as complete for all students by pressing the  Actions  button. This button appears on the assignment screen.  If you are using the  Assignment Duration  feature, all student assignments are marked as complete as soon as the assignment duration expiry date and time is reached.   The two autograding options can be found in the assignment settings.   Use the auto-graded assessments within the assignment to auto-populate the grading field with the aggregate % score from all assessments.  Run a script to generate the grading either as soon as the student (or teacher) marks the assignment as complete in their dashboard or when the  assignment duration  expires.   The two options can be found in the  AUTOGRADE METHOD  drop-down list.", 
            "title": "Autograde on assignment complete"
        }, 
        {
            "location": "/courses/classes/#transferring-authored-content-assessment-total", 
            "text": "If you have created auto-graded assessments within your authored content, Codio aggregates all scores so you can see them in the Courses dashboard. You will see that there is a total percentage calculated. This percentage value is transferred into the grading field. If you are using  LMS integration  then this grading field is then transferred into your LMS gradebook once you  release the grades .", 
            "title": "Transferring authored content assessment total"
        }, 
        {
            "location": "/courses/classes/#running-a-custom-script", 
            "text": "A more advanced way of populating the grading field is to write your own custom script that evaluates the student code. This script can then transfer the grading value into the grading field.  If you are using an LMS platform with Codio then be sure to write a percentage value into this field to maintain compatibility with LMS gradebooks.", 
            "title": "Running a custom script"
        }, 
        {
            "location": "/courses/classes/#secure-scripts", 
            "text": "If you want your scripts to run securely such that the student has no way of either viewing the script or viewing other files that might contain secure data then you should place those scripts and files in the  .guides/secure  folder. Codio ensures that only the original project author is able to access this folder but when it is assigned to Students as an assignment, it is not accessible in any way and the script runs in an ephemeral container isolated from the students assignment.", 
            "title": "Secure scripts"
        }, 
        {
            "location": "/courses/classes/#timeout", 
            "text": "Your script must execute within 3 minutes or a timeout error will occur.", 
            "title": "Timeout"
        }, 
        {
            "location": "/courses/classes/#accessing-authored-content-assessment-results", 
            "text": "You are able to get scores attained by students in authored content based autograded assessments. This data is in JSON format and can be accessed from the  CODIO_AUTOGRADE_ENV  environment variable. Below is an example.  {\n   assessments : {\n     stats : {\n       total : 2,\n       answered : 2,\n       correct : 2,\n       totalPoints : 12,\n       points : 8\n    },\n     info : [{\n       name :  Test 1 ,\n       points : 5,\n       answer : {\n         correct : true,\n         points : 5\n      }\n    }, {\n       name :  Test 2 ,\n       points : 7,\n       answer : {\n         correct : true,\n         points : 3\n      }\n    }]\n  },\n   completedDate :  2017-02-07T09:47:54.471Z \n}  You can get both summary data and data for each assessment individually.", 
            "title": "Accessing authored content assessment results"
        }, 
        {
            "location": "/courses/classes/#regrading-for-an-individual-student", 
            "text": "If students set their work to 'complete' such that an autograde step is triggered then you can regrade the work by resetting the complete switch and then setting it again, which re-triggers the autograding.", 
            "title": "Regrading for an individual student"
        }, 
        {
            "location": "/courses/classes/#regrading-all-students", 
            "text": "From the  Actions  area of the assignment, you can regrade all students that have already been auto-graded by pressing the  Regrade All  button. This is useful if you have found a bug in your grading script. If you follow (or use) the code sample shown at the bottom of this page you can see how the original student submission date is handled.", 
            "title": "Regrading all students"
        }, 
        {
            "location": "/courses/classes/#testing-and-debugging-your-grading-scripts", 
            "text": "IMPORTANT : please read this section carefully.  We provide a way of testing autograding scripts when authoring your project. This is described below. You should make use of this before publishing your project to a course.  You should be aware that once the assignment has been published to the course, any changes made to the assignment's source project are not automatically reflected in the published assignment. As a result, if you include your main grading logic within the project itself and if that script has bugs, you will not be able to fix the bugs without deleting the assignment, fixing the bug and finally republishing the assignment. All student data will be lost as a result. However, if all your scripts are stored in  .guides/secure  folder, you can update and test them and you can then  Update assignment  Another strategy is to use a simple bootstrap launcher that loads and executes the script from a remote location that you can edit and debug independently of the Codio box.  The following example bash script shows a Python script that is located as a Gist on GitHub. This script might be called  .guides/secure/launcher.sh .  #!/bin/bash\nURL= https://gist.githubusercontent.com/MaximKraev/11cd4e43b0c43f79d9478efbe21ba1b9/raw/validate.py \ncurl -fsSL $URL | python - $@  It is important that it is located in the  .guides/secure  folder. You then specify the full filepath  .guides/secure/launcher.sh  in the  Set custom script path  field in the assignment settings.  You are now free to debug the Python script and fix any bugs that you may have noticed once students have started work on the assignment.", 
            "title": "Testing and debugging your grading scripts"
        }, 
        {
            "location": "/courses/classes/#testing-your-script-in-the-ide", 
            "text": "We provide the ability to test your autograding script from the  Education -  Test Autograde Script  menu.  This option lets you specify the location to your autograding script and run it against the current project contents. It also lets you simulate scores attained by any autograded assessments located within the Codio Guide.   You should be aware of the following points.   When you press the  Test Script  button  all output to  stdout  and  stderr  are displayed within the dialog  the grade as returned by your test script is at the bottom of the output section  stdout  and  stderr  output is not available when running for real (not in this test mode) as the autograding script runs invisibly when the assignment is marked as complete. As such, you should generate output for testing and debugging purposes only.  If you want your script to provide any feedback to the student, then you should output it to a file that the student can access when opening the project at a later date. In this case you will need to allow read-only access to the project from the assignment settings after being marked as complete.  Your script must execute within 3 minutes to avoid a timeout error.   If the Guide has autograded assessments then the test takes its data from the fields shown in the dialog. All of your assessment settings are accessed as described above under  Accessing Guide assessment results .", 
            "title": "Testing your script in the IDE"
        }, 
        {
            "location": "/courses/classes/#example-python-grading-script", 
            "text": "Below is an example Python file that might be loaded by the bootstrap script above.  Notice that the only code you need to modify is near the bottom. The other functions are helpers and can be used for any test in any assignment.  import os\nimport random\nimport requests\nimport json\nimport datetime\n\n# import grade submit function\nimport sys\nsys.path.append('/usr/share/codio/assessments')\nfrom lib.grade import send_grade\n\n##################\n# Helper functions #\n##################\n\n\n# Get the url to send the results to\nCODIO_AUTOGRADE_URL = os.environ[ CODIO_AUTOGRADE_URL ]\nCODIO_UNIT_DATA = os.environ[ CODIO_AUTOGRADE_ENV ]\n\ndef main():\n  # Execute the test on the student's code\n  grade = validate_code()\n  # Send the grade back to Codio with the penatly factor applied\n  res = send_grade(int(round(grade)))\n  exit( 0 if res else 1)\n\n########################################\n# You only need to modify the code below #\n########################################\n\n# Your actual test logic\n# Our demo function is just generating some random score\ndef validate_code():\n  return random.randint(10, 100)\n\nmain()", 
            "title": "Example Python grading script"
        }, 
        {
            "location": "/courses/classes/#example-bash-grading-script", 
            "text": "Below is an example bash script file that would be stored  in .guides/secure folder  #!/bin/bash\nset -e\n# Your actual test logic\n# Our demo function is just generating some random score\nPOINTS=$(( ( RANDOM % 100 )  + 1 ))\n# Show json based passed environment\necho $CODIO_AUTOGRADE_ENV\n# Send the grade back to Codio\ncurl --retry 3 -s  $CODIO_AUTOGRADE_URL grade=$POINTS   TODO", 
            "title": "Example Bash grading script"
        }, 
        {
            "location": "/courses/classes/#teachers-grading", 
            "text": "", 
            "title": "Teachers Grading"
        }, 
        {
            "location": "/courses/classes/#assessments-grading", 
            "text": "", 
            "title": "Assessments Grading"
        }, 
        {
            "location": "/courses/classes/#script-grading", 
            "text": "This allows you to specify an auto-grade script that should run when the assignment is marked as complete. The default setting ensures that any grades generated from auto-graded assessments and grades from free text assessments are automatically transferred into the grading field.", 
            "title": "Script Grading"
        }, 
        {
            "location": "/courses/classes/#actions-area-settings", 
            "text": "Additional options are also available if you select the  Actions  button.    Plagiarism checker   You can run  plagiarism detection  from the blue dots menu on the assignment or the  Actions  area.   Mark all as completed   Certain actions can be triggered when a student marks an assignment as complete:  Auto-graded assessment scores can be passed directly to the grade field  and/or  Scripts can be executed for assessing the student code and assigning the grade  Students can mark the assignment as complete from their own dashboards but a teacher is also able to do this on their behalf either individually or for all students either by pressing the  Marking All As Completed  button to mark all student assignments as complete, hover over a student to see the switch appear to the left of the students name, which you can then activate or Accessing student work  and going to the  Education- Mark as Completed  menu item within the IDE.  Teachers can also mark complete assignments as incomplete for all students in the course or for individual students selecting the switch or by accessing their assignment.    Unmark as complete   Where the assignment can be marked as not complete for all students   Download CSV   This allows you to download a CSV file with student grade data for the assignment.   Reset     This option will destroy all student work.  In the event that an assignment in your course is updated and, for some reason, you cannot use the  Update course  option, you can reset it so  all  students, including those who have already started the assignment, are updated with the new assignment.  You can reset the assignment for all your students by selecting either   the  Actions  button and then the  Reset  button    or   you can reset the assignment for individual students from the 3 blue dot menu      Regrade completed\nThis option should be selected if you are running an auto-grade script when the assignment is marked as completed and you want the script to be re-run.  Click here  for details on end of assignment auto-grade scripts.    Release Grades\nBy default, grades are not shown to students or transferred to the LMS gradebook if you are using LMS integration for a class. When you are ready to do so, you can select the option from here.", 
            "title": "Actions area settings"
        }, 
        {
            "location": "/courses/coursemanagement/", 
            "text": "Introduction\n\uf0c1\n\n\nThe following videos cover project units. \nClick here\n if you have authored a Codio book and want to publish an assignment from a part it.\n\n\n\n\nVideo - General overview\n\uf0c1\n\n\nThe following video gives an overview on why you might want to use a course modules rather than projects. It also explains how to create a course.\n\n\n\n\n\n\n\nVideo - Ownership and visibility\n\uf0c1\n\n\nPlease watch the following video to understand how to allow people to find your course and modules and also to administer, edit and assign them to course of student.\n\n\n\n\n\nYou can also read how to \ncontrol access\n in the documentation.\n\n\n\n\nVideo - Working with stacks in courses\n\uf0c1\n\n\nThe following video covers the important topic of stack management within a course. Here are some documentation links.\n\n\n\n\nAbout stacks in general\n\n\nStack strategy in courses\n\n\n\n\n\n\n\nUpdating courses and collaboration\n\uf0c1\n\n\nIf you want to allow other teachers in your organization to modify your course structure and assignment content then it is important to understand how Codio manages this. Please refer to \nCollaborating on project units\n for details.\n\n\nOverview\n\uf0c1\n\n\nThe most basic way to assign content to students is to create a project and then \nassign the project to the course\n. Over time, you may end up with a lot of projects in your project list. Each time you come to teach your course, you will find it harder and harder to locate the right project when you need it.\n\n\nAs a result, you should be familiar with the functionality offered by courses, described below, and \nbooks\n.\n\n\nA course is a very elegant way of managing and organizing your projects. A course has a very simple hierarchy.\n\n\n\n\nCourse\n: the course is the top level and contains modules.\n\n\nModule\n: a module is simply a container for your main project assignments. If you have 50 project assignments in your course then you might want to put collections of assignments into distinct, suitably named modules.\n\n\nAssignment\n: an assignment is a Codio project that is some unit of teaching. It is entirely up to you how much material is covered by an assignment. Approaches include putting about a week, a lesson or a lecture's worth of material into a single assignment.\n\n\n\n\nA course assignment typically takes one of two forms.\n\n\n\n\nTutorial\n: in this case you would use the \nCodio Guides\n or \nCodio Books\n tutorial authoring tools to create your tutorial content. \nClick here\n for an overview of the difference.\n\n\nAssignment\n: in this case you create a project assignment where everything is set up for the student to tackle a coding assignment or challenge. You can still use guides or books to give instructions, but with assignments, you expect your students will be coding rather than learning.\n\n\n\n\nThe above two cases are not fixed concepts in Codio but are typical use cases. You can do whatever you like with a project.\n\n\nWorking with courses\n\uf0c1\n\n\nWorking with courses often follows the pattern listed below.\n\n\nSetup\n\uf0c1\n\n\n\n\nCreate a new course\n and name it.\n\n\nCreate your first module\n. You need at least one module to hold your assignments. A module is an organizational item and a) contains assignments and b) can be assigned to a course with all its assignments.\n\n\n\n\nAssignment Creation\n\uf0c1\n\n\nEither\n\n\n\n\nCreate a new project assignment\n  this gives you a dedicated Codio box and behaves like a regular Codio project.\n\n\n\n\nOr\n\n\n\n\nCreate a new book assignment\n which maps to a part of a book that has already been created. Unlike project assignments, a book has a single Codio box to work with along with a typically large volume of content.\n\n\n\n\nPlease \nclick here\n for details on how to decide whether to use project assignments or book assignments\n\n\nFirst version\n\uf0c1\n\n\nThis describes the first time you create a new assignment.\n\n\n\n\nEdit your assignment\n. If your assignment is a project assignment, clicking the assignment will take you into the IDE, as with a Codio project, where you can work on your project.\n\n\nPublish your assignment\n. When you think your assignment is in good shape, it is ready to publish. A assignment is not available to the course until you publish. At this point a snapshot is taken of the assignment and it forms a part of the published course.\n\n\n\n\nYou will iterate through the above process as you add more assignments to your course modules.\n\n\nUpdates   TODO\n\uf0c1\n\n\nEditing a assignment \ndoes not affect published course content or content assigned to course\n. This section describes how you can push your changes out to courses when you are ready.\n\n\n\n\nMore edits to a assignment\n. After publishing, you may decide to make further changes. These changes do not form a part of the published course assignment until you republish, so you can edit without concern for altering published content.\n\n\nRepublish\n. Having made more changes, you can publish the assignment again in order to make those changes available to the course. However, publishing does not update assignments previously assigned to a course.\n\n\nUpdate course\n. If you had assigned a course module to a course and subsequently updated and published a assignment within that module, then assignments within that module are not automatically updated in the course. You need to explicitly do this by going to the course. You should see a red \nUpdate Course\n button\n. This allows you to selectively update assignments.\n\n\n\n\nStack planning\n\uf0c1\n\n\nThe following applies to project assignments rather than books. Books require less thought as a book only has one box associated with it and the book assignment will takes its stack setting from the book.\n\n\nYou should be familiar with the concept of \na stack\n before creating content.\n\n\nMinimize the number of stacks\n\uf0c1\n\n\nIt is important to think about the \nstack or stacks\n that your course uses. You should avoid creating a new stack for each assignment. There are very few cases where this is needed. If you unnecessarily create new stacks for each assignment, you will be be less efficient and waste unnecessary time with stack builds/rebuilds.\n\n\nYou should look to use as few stacks as possible, ideally just one, and use that stack for all assignments. There are perfectly valid exceptions, but this is the rule.\n\n\nSingle stack example\n\uf0c1\n\n\nTo illustrate a single stack situation, let's assume you are teaching a course \"Programming in Java\". You could either use our default Java stack or you start with the Java stack and then add additional tools so it has all the components you require to teach all parts of your course.\n\n\nWhether you have created your own stack or used a default one, you would then point all your assignments to that one, same stack.\n\n\nIf, as you create more assignments in your course, you find you need to install more tools, then you should \nupdate the stack with a new version\n.\n\n\nBy default, when you choose a stack for your new assignment, it will point to the latest version. So if the underlying stack is updated from any location at all, then any assignment that uses that stack will automatically be set to use it. Students who are using a assignment in a course will also automatically use the latest version when it is updated.\n\n\nIt follows that you should be very careful when pointing to a specific version of a stack, rather than the latest version. If you do this, then you will need to update all assignments that are not set to use the latest version.\n\n\nMultiple stack example\n\uf0c1\n\n\nLet's say you are teaching a course \"Introduction to Programming\" and it has 3 modules \"Java\", \"Python\" and \"Haskell\" and each module contains a good number of assignments. In this case, you could still choose the single stack approach, but you would need to install all three languages and their toolsets and then create a stack from it.\n\n\nA simpler approach would be to use three separate stacks, one for each language. You set the assignments for each language to point to the appropriate language stack.\n\n\nOther than that, the principles described above still apply.\n\n\nSwitching stacks\n\uf0c1\n\n\nIt is possible to change the stack for an assignment. This can be done from either the assignment listing area from within the IDE. However, if this change were to be needed for all assignments then you would have to repeat this for each assignment individually.\n\n\nIt is therefore highly recommended that you start with a stack and stick with it wherever possible.\n\n\nStacks not owned by you\n\uf0c1\n\n\nIf you were to use one of Codio's default stacks then you are not able to update these yourself as you don't have permissions. However, you might want to start off with, say, the Java stack and then install new components.\n\n\nIn this case, you should plan this ahead of time. You would\n\n\n\n\nfirst create the assignment from Codio's Java stack\n\n\n\n\ninstall your components\n\n\n\n\n\n\ncreate a new stack from your assignment (\nin the IDE\n or when you \npublish\n)\n\n\n\n\n\n\nmake sure your stack is switched to that newly created stack\n\n\n\n\n\n\nYou now own this stack and so you can update whenever you like down the line. When you create new assignments, you would then choose this new stack.\n\n\nUse Latest Version\n\uf0c1\n\n\nWhen you assign a stack to a assignment, it will be set by default to the \nUse Latest Version\n. If you view the stack settings from the IDE (\nProject-Stack Settings\n) or from assigment settings, you will see that this is the default.\n\n\n\n\nUnderstanding what \nUse Latest Version\n means is important. When you work with a assignment as a course author, that assignment is actually using a fixed version. It does not automatically switch to the latest version each time a new version of a stack is created. This could be dangerous as switching a stack resets everything outside the workspace folder. If you want to update to the latest version then you need to go to the stack settings dialog and press the save button.\n\n\nWhere \nUse Latest Version\n is useful is when you assign a course module and its assignments to a course. In this case, students who have not yet started a assignment \nwill\n get the latest version of the stack.\n\n\nCreate a course\n\uf0c1\n\n\n\n\n\n\nIf you are in the IDE, click the Codio icon in the top left corner to take you to the \nCourses\n screen. If you are in the dashboard, click on \nCourses\n in the left menu.\n\n\n\n\n\n\nClick the \nblue plus\n sign at the top left of the page.\n\n\n\n\n\n\n\nSelect \nEmpty Course\n , complete the details requested, then click \nCreate Course\n.\n\n\n\n\n\n\n\nYour new course will appear in your \nCourses\n area.\n\n\n\n\n\n\nCourse Code, Name, Tags \n Duration\n\uf0c1\n\n\nYou are required to enter a name for your course. The other fields are optional.  The \nCourse Code\n field is used so your course can be shared with others (in other organisations) and they can create a course by entering in the code you define here.  The tags field is usually used to identify the technologies used and assist with searching courses but you can create you own tag names as you require if you wish to use for different purposes.\n\n\nModules\n\uf0c1\n\n\nA course has to have at least one module. A module contains the individual assignments that will be assigned to students.\n\n\nModules help you organize your assignments into logical groupings. If your course only contains a few assignments then you may want only a single module. If, on the other hand, your course has a large number of assignments, then dividing them between several suitably named modules may make more organizational sense.\n\n\nCreating a module\n\uf0c1\n\n\nTo create a new, empty module\n- With the course selected, click on the Assignments tab at the top of the page. The list will be empty at this point.\n- Now click the \n+\n button in the top left.\n- Select \nEmpty Module\n and create a new module.\n\n\nAdding a Module\n\uf0c1\n\n\nIt is possible to add a module to your course that already exists in another course. Press the \nCopy from Existing\n button.\n\n\nThe Module browser will open for you to search for the module(s) you wish to add.\n\n\nYou can filter from the available options in the tabs, or search by typing into the search field, whereupon Codio will search within all Module names available to you.\n\n\nYou can also order the list of modules by name or owner and use the \nFilter by Course\n drop down to view modules in other courses.\n\n\n\n\nAdding an assignment to a module\n\uf0c1\n\n\nPlease read the section \nAssign a project to the course\n for details.\n\n\nCourse access\n\uf0c1\n\n\nWhen a course is created all 'Teachers' in the course have admin access to the content.\n\n\nDeleting courses and modules\n\uf0c1\n\n\nYou can delete a course by going to the Admin tab and clicking \nDelete Course\n.\nYou can delete a module by clicking the \nDelete\n button on the courses listing area\n\n\nDeleting a course does not delete its modules. Similarly, deleting a module does not delete its assignments.\n\n\nAdding assignments\n\uf0c1\n\n\nAn assignment behaves like a Codio project except it will not appear in your projects list. This makes it much easier to find your assignment as well as to chronologically arrange the assignments within each module.\n\n\nYou can mix book assignments and project assignments in a course module.\n\n\nIf you have already have a regular project that you want to load into a assignment, then the process is described below.\n\n\nAdding a new assignment\n\uf0c1\n\n\nYou add a new assignment by pressing the large blue \n+\n button. You now need to choose between\n\n\n\n\na project assignment\n\n\na book assignment\n\n\n\n\nClick here\n if you are not sure about the difference between project assignments and book assignments.\n\n\n\n\nNew project assignment\n\uf0c1\n\n\nYou can create a new assignment in the following ways.\n\n\n\n\nCreate a brand new assignment as you would with a normal Codio project.\n\n\nImport an existing project into the assignment. See the image below and read the contents of the \nImportant\n box. A snapshot of the selected project is taken. From that point on you will edit from the assignment, not the project.\n\n\nImport from other sources such as GitHub/BitBucket/Mercurial etc. by selecting the \nImport\n option.\n\n\n\n\n\n\n\n\nNew book assignment\n\uf0c1\n\n\nCreating a new book assignment involves pointing to the parts of a book that you want to map to your assignment. You will seen the following screen.\n\n\n\n\nYou can now\n\n\n\n\nspecify the book you want to reference. Browse to the books available to you\n\n\n\nselect the parts of the book you want to include in this assignment\n\n\ngive the assignment a name.\n\n\n\n\n\n\nWith book assignments, students can look at any part of the book even when assigned a single book assignment. This is ideal for referring back to material covered previously and for general revision and can be set in the course. See \nBook Visibility\n] for more information.\n\n\nPublishing\n\uf0c1\n\n\nThe publish process is slightly different for books and project assignments. \n\n\nUpdating book assignments TODO\n\uf0c1\n\n\nBook assignments are published from the books area.\n\n\nLet's say you have already published a book and created an assignment from a part of that book. If you then make changes to the book and republish the book, those published changes are not automatically reflected in the course. If you want to update the assignment, then need to press the \nUpdate to latest version\n button that appears on the right side of the assignment.\n\n\n\n\nAfter pressing this, the books changes will be reflected in the assignment. If you want these changes to be passed through to a course where the assignment was previously added, then please \nclick here\n for details.\n\n\nPublishing project assignments\n\uf0c1\n\n\nBy default a project assignment is not available to others until you explicitly publish it. This ensures that you can make changes, even after publishing, without the published course content being affected.\n\n\nPublishing the assignment takes a snapshot of the underlying project assignment and assigns it a new version. Once published, you can make further edits to the assignment without changes being visible in the published assignment until you publish it again.\n\n\n\n\n\n\nSelect the assignment from the listing and then press \nPublish\n.\n\n\n\n\n\n\nIf you have not previously published then you will see \nDRAFT\n\n\n\n\n\n\n\n\nDescribe changes TODO\n\uf0c1\n\n\nYou should enter a brief description of the changes you made since the last publish of the assignment. You can see the version history on the  \nversions screen\n.\n\n\nNo stack modifications or you switched stack\n\uf0c1\n\n\nIf, in your project assignment, you have\n\n\n\n\nonly made changes to the code workspace (the workspace is the contents of the file tree in the IDE or \n/home/codio/workspace\n)\n\n\nor you switched stack but did not make any stack modifications since switching,\n\n\n\n\nthen you should\n\n\n\n\nEnter the changelog text, which is a description of the changes made since the last publish.\n\n\nPress the \nStack unchanged\n button.\n\n\nPress the \nPublish assignment\n button when ready.\n\n\n\n\n\n\nStack modifications\n\uf0c1\n\n\nIf you have made any changes to the project's stack then you should press the \nStack modified\n button. Please be aware that changes to the stack can be made indirectly by applications as well as manual file changes. For example, if you modified a database's contents that is not configured to live in the workspace area then these count as stack changes.\n\n\n\n\nYou should now decide whether you want to\n\n\n\n\ncreate a new version of the stack used by the assignment\n\n\ncreate a brand new stack for this assignment.\n\n\n\n\nStack modified : New Stack Version\n\uf0c1\n\n\nNote that if the stack you are using is not owned by you or you don't have permissions to modify the stack, then you will not be able to select this option.\n\n\nYou should enter a description of the stack changes made and then press \nPublish assignment\n. The new stack version will appear in your stacks listing in the normal way.\n\n\n\n\nStack modified: New Stack\n\uf0c1\n\n\nIf you do not have permissions to create a new stack version or you want to create a new stack that this and potentially other assignments should use, then select this option.\n\n\nThis will create a new stack with the permissions you specify. To give access only to others within your organization, select \nPrivate\n and then select the owner organization from the drop down list below.\n\n\nIt will take a few minutes to prepare the stack, so please be patient. Once it is created, it will be visible your stacks listing.\n\n\nYou should \nnot\n create a new stack for each assignment in your course without good reason. You should instead, create a stack and then point all other assignments that share this stack configuration to point to the new stack.\n\n\nIf you have differing configurations then create one single stack for a given configuration and then point assignments that use that configuration to the new stack.\n\n\n\n\nIMPORTANT: Switching a assignment's stack\n\uf0c1\n\n\nLet's say you have one or more assignments and you decide to change the stack that they point to. You can switch the stack either from within the IDE (\nProject-\nStack settings\n) or from the assignments listing (press \nStack\n icon).\n\n\nOnce this has been done, you need to publish your assignment again to reflect this change. Having switched stack, you should select \nStack not modified\n and then press \nPublish assignment\n.\n\n\nEditing an existing assignment\n\uf0c1\n\n\nEditing a book assignment\n\uf0c1\n\n\nIf you want to edit book assignment content, then you edit the book from the books listing, not the assignment listing. You would then republish the book after which you will see \nUpdate to latest version\n in the assignment listing.\n\n\n\n\nIf you have added new content then you can also remap the assignment to the book as described on the \nadding an assignment\n page.\n\n\nEditing assignments\n\uf0c1\n\n\nSee \nManaging Assigments\n\n\nEditing a project assignment is always done from the assignment listing.  Select the assignment to open in the IDE.\n\n\nIf there is a later version of the assignment that has been published since you last opened it, you will see the following screen and elect to open either the latest published version or the last version you edited.\n\n\n\n\nCollaborating on project assignments TODO\n\uf0c1\n\n\nOther teachers in the course are able to collaborate on course assignments. \n\n\nThe rules for other users to edit a project assignment in a course are as follows.\n\n\n\n\nPrivate\n - only you can edit the project assignment.\n\n\nPrivate but organization is the owner\n - any teacher in your organization can edit.\n\n\nPublic\n - only you can edit.\n\n\nPublic but organization is the owner\n - any teacher in your organization can edit.\n\n\n\n\nThe ability to create public courses/modules can be enabled for the organization. See \nPublic/Private setttings\n for more information.\n\n\n\n\nIf you want 2 or more people to collaborate on a project assignment, you need to understand how Codio manages this process.\n\n\nThe key thing you need to realize is that unless you are familiar with Git, \nonly one user should make changes at a time\n. If User A and User B want to collaborate, then they need to inform each other when they are working on the content. If they fail to do so, then one person will have to surrender their changes later on.\n\n\nLet's say User A has authored a assignment and has finished work. At this point, User A must publish the assignment for others to be able to carry on from this point.\n\n\nUser B now makes changes to the assignment. When done, User B should inform User A that the changes are complete and published. At this point, when User A opens the assignment for editing, a dialog will appear showing that User B has published new changes.\n\n\n\n\n\n\nUser A now wants User B to be able to collaborate. User A should inform User B that the assignment is ready to edit. When User B accesses the assignment, Codio will take a \nsnapshot\n of the published assignment and User B can start work on it. In other words, User B is \nnot\n editing User A's assignment, User B has a clone.\n\n\nUser B now makes changes to the assignment. When done, User B should publish the changes in the same way that User A did. User B then informs User A that the changes are complete and published. At this point, when User A opens the assignment for editing, a dialog will appear showing that User B has published new changes. A new snapshot is then taken and User A (or any other user for that matter) can editing.\n\n\nThe important point in this process is that any user who has made changes and wants other to see those changes should publish first.", 
            "title": "Creating Course Content"
        }, 
        {
            "location": "/courses/coursemanagement/#introduction", 
            "text": "The following videos cover project units.  Click here  if you have authored a Codio book and want to publish an assignment from a part it.", 
            "title": "Introduction"
        }, 
        {
            "location": "/courses/coursemanagement/#video-general-overview", 
            "text": "The following video gives an overview on why you might want to use a course modules rather than projects. It also explains how to create a course.", 
            "title": "Video - General overview"
        }, 
        {
            "location": "/courses/coursemanagement/#video-ownership-and-visibility", 
            "text": "Please watch the following video to understand how to allow people to find your course and modules and also to administer, edit and assign them to course of student.   You can also read how to  control access  in the documentation.", 
            "title": "Video - Ownership and visibility"
        }, 
        {
            "location": "/courses/coursemanagement/#video-working-with-stacks-in-courses", 
            "text": "The following video covers the important topic of stack management within a course. Here are some documentation links.   About stacks in general  Stack strategy in courses", 
            "title": "Video - Working with stacks in courses"
        }, 
        {
            "location": "/courses/coursemanagement/#updating-courses-and-collaboration", 
            "text": "If you want to allow other teachers in your organization to modify your course structure and assignment content then it is important to understand how Codio manages this. Please refer to  Collaborating on project units  for details.", 
            "title": "Updating courses and collaboration"
        }, 
        {
            "location": "/courses/coursemanagement/#overview", 
            "text": "The most basic way to assign content to students is to create a project and then  assign the project to the course . Over time, you may end up with a lot of projects in your project list. Each time you come to teach your course, you will find it harder and harder to locate the right project when you need it.  As a result, you should be familiar with the functionality offered by courses, described below, and  books .  A course is a very elegant way of managing and organizing your projects. A course has a very simple hierarchy.   Course : the course is the top level and contains modules.  Module : a module is simply a container for your main project assignments. If you have 50 project assignments in your course then you might want to put collections of assignments into distinct, suitably named modules.  Assignment : an assignment is a Codio project that is some unit of teaching. It is entirely up to you how much material is covered by an assignment. Approaches include putting about a week, a lesson or a lecture's worth of material into a single assignment.   A course assignment typically takes one of two forms.   Tutorial : in this case you would use the  Codio Guides  or  Codio Books  tutorial authoring tools to create your tutorial content.  Click here  for an overview of the difference.  Assignment : in this case you create a project assignment where everything is set up for the student to tackle a coding assignment or challenge. You can still use guides or books to give instructions, but with assignments, you expect your students will be coding rather than learning.   The above two cases are not fixed concepts in Codio but are typical use cases. You can do whatever you like with a project.", 
            "title": "Overview"
        }, 
        {
            "location": "/courses/coursemanagement/#working-with-courses", 
            "text": "Working with courses often follows the pattern listed below.", 
            "title": "Working with courses"
        }, 
        {
            "location": "/courses/coursemanagement/#setup", 
            "text": "Create a new course  and name it.  Create your first module . You need at least one module to hold your assignments. A module is an organizational item and a) contains assignments and b) can be assigned to a course with all its assignments.", 
            "title": "Setup"
        }, 
        {
            "location": "/courses/coursemanagement/#assignment-creation", 
            "text": "Either   Create a new project assignment   this gives you a dedicated Codio box and behaves like a regular Codio project.   Or   Create a new book assignment  which maps to a part of a book that has already been created. Unlike project assignments, a book has a single Codio box to work with along with a typically large volume of content.   Please  click here  for details on how to decide whether to use project assignments or book assignments", 
            "title": "Assignment Creation"
        }, 
        {
            "location": "/courses/coursemanagement/#first-version", 
            "text": "This describes the first time you create a new assignment.   Edit your assignment . If your assignment is a project assignment, clicking the assignment will take you into the IDE, as with a Codio project, where you can work on your project.  Publish your assignment . When you think your assignment is in good shape, it is ready to publish. A assignment is not available to the course until you publish. At this point a snapshot is taken of the assignment and it forms a part of the published course.   You will iterate through the above process as you add more assignments to your course modules.", 
            "title": "First version"
        }, 
        {
            "location": "/courses/coursemanagement/#updates-todo", 
            "text": "Editing a assignment  does not affect published course content or content assigned to course . This section describes how you can push your changes out to courses when you are ready.   More edits to a assignment . After publishing, you may decide to make further changes. These changes do not form a part of the published course assignment until you republish, so you can edit without concern for altering published content.  Republish . Having made more changes, you can publish the assignment again in order to make those changes available to the course. However, publishing does not update assignments previously assigned to a course.  Update course . If you had assigned a course module to a course and subsequently updated and published a assignment within that module, then assignments within that module are not automatically updated in the course. You need to explicitly do this by going to the course. You should see a red  Update Course  button . This allows you to selectively update assignments.", 
            "title": "Updates   TODO"
        }, 
        {
            "location": "/courses/coursemanagement/#stack-planning", 
            "text": "The following applies to project assignments rather than books. Books require less thought as a book only has one box associated with it and the book assignment will takes its stack setting from the book.  You should be familiar with the concept of  a stack  before creating content.", 
            "title": "Stack planning"
        }, 
        {
            "location": "/courses/coursemanagement/#minimize-the-number-of-stacks", 
            "text": "It is important to think about the  stack or stacks  that your course uses. You should avoid creating a new stack for each assignment. There are very few cases where this is needed. If you unnecessarily create new stacks for each assignment, you will be be less efficient and waste unnecessary time with stack builds/rebuilds.  You should look to use as few stacks as possible, ideally just one, and use that stack for all assignments. There are perfectly valid exceptions, but this is the rule.", 
            "title": "Minimize the number of stacks"
        }, 
        {
            "location": "/courses/coursemanagement/#single-stack-example", 
            "text": "To illustrate a single stack situation, let's assume you are teaching a course \"Programming in Java\". You could either use our default Java stack or you start with the Java stack and then add additional tools so it has all the components you require to teach all parts of your course.  Whether you have created your own stack or used a default one, you would then point all your assignments to that one, same stack.  If, as you create more assignments in your course, you find you need to install more tools, then you should  update the stack with a new version .  By default, when you choose a stack for your new assignment, it will point to the latest version. So if the underlying stack is updated from any location at all, then any assignment that uses that stack will automatically be set to use it. Students who are using a assignment in a course will also automatically use the latest version when it is updated.  It follows that you should be very careful when pointing to a specific version of a stack, rather than the latest version. If you do this, then you will need to update all assignments that are not set to use the latest version.", 
            "title": "Single stack example"
        }, 
        {
            "location": "/courses/coursemanagement/#multiple-stack-example", 
            "text": "Let's say you are teaching a course \"Introduction to Programming\" and it has 3 modules \"Java\", \"Python\" and \"Haskell\" and each module contains a good number of assignments. In this case, you could still choose the single stack approach, but you would need to install all three languages and their toolsets and then create a stack from it.  A simpler approach would be to use three separate stacks, one for each language. You set the assignments for each language to point to the appropriate language stack.  Other than that, the principles described above still apply.", 
            "title": "Multiple stack example"
        }, 
        {
            "location": "/courses/coursemanagement/#switching-stacks", 
            "text": "It is possible to change the stack for an assignment. This can be done from either the assignment listing area from within the IDE. However, if this change were to be needed for all assignments then you would have to repeat this for each assignment individually.  It is therefore highly recommended that you start with a stack and stick with it wherever possible.", 
            "title": "Switching stacks"
        }, 
        {
            "location": "/courses/coursemanagement/#stacks-not-owned-by-you", 
            "text": "If you were to use one of Codio's default stacks then you are not able to update these yourself as you don't have permissions. However, you might want to start off with, say, the Java stack and then install new components.  In this case, you should plan this ahead of time. You would   first create the assignment from Codio's Java stack   install your components    create a new stack from your assignment ( in the IDE  or when you  publish )    make sure your stack is switched to that newly created stack    You now own this stack and so you can update whenever you like down the line. When you create new assignments, you would then choose this new stack.", 
            "title": "Stacks not owned by you"
        }, 
        {
            "location": "/courses/coursemanagement/#use-latest-version", 
            "text": "When you assign a stack to a assignment, it will be set by default to the  Use Latest Version . If you view the stack settings from the IDE ( Project-Stack Settings ) or from assigment settings, you will see that this is the default.   Understanding what  Use Latest Version  means is important. When you work with a assignment as a course author, that assignment is actually using a fixed version. It does not automatically switch to the latest version each time a new version of a stack is created. This could be dangerous as switching a stack resets everything outside the workspace folder. If you want to update to the latest version then you need to go to the stack settings dialog and press the save button.  Where  Use Latest Version  is useful is when you assign a course module and its assignments to a course. In this case, students who have not yet started a assignment  will  get the latest version of the stack.", 
            "title": "Use Latest Version"
        }, 
        {
            "location": "/courses/coursemanagement/#create-a-course", 
            "text": "If you are in the IDE, click the Codio icon in the top left corner to take you to the  Courses  screen. If you are in the dashboard, click on  Courses  in the left menu.    Click the  blue plus  sign at the top left of the page.    Select  Empty Course  , complete the details requested, then click  Create Course .    Your new course will appear in your  Courses  area.", 
            "title": "Create a course"
        }, 
        {
            "location": "/courses/coursemanagement/#course-code-name-tags-duration", 
            "text": "You are required to enter a name for your course. The other fields are optional.  The  Course Code  field is used so your course can be shared with others (in other organisations) and they can create a course by entering in the code you define here.  The tags field is usually used to identify the technologies used and assist with searching courses but you can create you own tag names as you require if you wish to use for different purposes.", 
            "title": "Course Code, Name, Tags &amp; Duration"
        }, 
        {
            "location": "/courses/coursemanagement/#modules", 
            "text": "A course has to have at least one module. A module contains the individual assignments that will be assigned to students.  Modules help you organize your assignments into logical groupings. If your course only contains a few assignments then you may want only a single module. If, on the other hand, your course has a large number of assignments, then dividing them between several suitably named modules may make more organizational sense.", 
            "title": "Modules"
        }, 
        {
            "location": "/courses/coursemanagement/#creating-a-module", 
            "text": "To create a new, empty module\n- With the course selected, click on the Assignments tab at the top of the page. The list will be empty at this point.\n- Now click the  +  button in the top left.\n- Select  Empty Module  and create a new module.", 
            "title": "Creating a module"
        }, 
        {
            "location": "/courses/coursemanagement/#adding-a-module", 
            "text": "It is possible to add a module to your course that already exists in another course. Press the  Copy from Existing  button.  The Module browser will open for you to search for the module(s) you wish to add.  You can filter from the available options in the tabs, or search by typing into the search field, whereupon Codio will search within all Module names available to you.  You can also order the list of modules by name or owner and use the  Filter by Course  drop down to view modules in other courses.", 
            "title": "Adding a Module"
        }, 
        {
            "location": "/courses/coursemanagement/#adding-an-assignment-to-a-module", 
            "text": "Please read the section  Assign a project to the course  for details.", 
            "title": "Adding an assignment to a module"
        }, 
        {
            "location": "/courses/coursemanagement/#course-access", 
            "text": "When a course is created all 'Teachers' in the course have admin access to the content.", 
            "title": "Course access"
        }, 
        {
            "location": "/courses/coursemanagement/#deleting-courses-and-modules", 
            "text": "You can delete a course by going to the Admin tab and clicking  Delete Course .\nYou can delete a module by clicking the  Delete  button on the courses listing area  Deleting a course does not delete its modules. Similarly, deleting a module does not delete its assignments.", 
            "title": "Deleting courses and modules"
        }, 
        {
            "location": "/courses/coursemanagement/#adding-assignments", 
            "text": "An assignment behaves like a Codio project except it will not appear in your projects list. This makes it much easier to find your assignment as well as to chronologically arrange the assignments within each module.  You can mix book assignments and project assignments in a course module.  If you have already have a regular project that you want to load into a assignment, then the process is described below.", 
            "title": "Adding assignments"
        }, 
        {
            "location": "/courses/coursemanagement/#adding-a-new-assignment", 
            "text": "You add a new assignment by pressing the large blue  +  button. You now need to choose between   a project assignment  a book assignment   Click here  if you are not sure about the difference between project assignments and book assignments.", 
            "title": "Adding a new assignment"
        }, 
        {
            "location": "/courses/coursemanagement/#new-project-assignment", 
            "text": "You can create a new assignment in the following ways.   Create a brand new assignment as you would with a normal Codio project.  Import an existing project into the assignment. See the image below and read the contents of the  Important  box. A snapshot of the selected project is taken. From that point on you will edit from the assignment, not the project.  Import from other sources such as GitHub/BitBucket/Mercurial etc. by selecting the  Import  option.", 
            "title": "New project assignment"
        }, 
        {
            "location": "/courses/coursemanagement/#new-book-assignment", 
            "text": "Creating a new book assignment involves pointing to the parts of a book that you want to map to your assignment. You will seen the following screen.   You can now   specify the book you want to reference. Browse to the books available to you  select the parts of the book you want to include in this assignment  give the assignment a name.    With book assignments, students can look at any part of the book even when assigned a single book assignment. This is ideal for referring back to material covered previously and for general revision and can be set in the course. See  Book Visibility ] for more information.", 
            "title": "New book assignment"
        }, 
        {
            "location": "/courses/coursemanagement/#publishing", 
            "text": "The publish process is slightly different for books and project assignments.", 
            "title": "Publishing"
        }, 
        {
            "location": "/courses/coursemanagement/#updating-book-assignments-todo", 
            "text": "Book assignments are published from the books area.  Let's say you have already published a book and created an assignment from a part of that book. If you then make changes to the book and republish the book, those published changes are not automatically reflected in the course. If you want to update the assignment, then need to press the  Update to latest version  button that appears on the right side of the assignment.   After pressing this, the books changes will be reflected in the assignment. If you want these changes to be passed through to a course where the assignment was previously added, then please  click here  for details.", 
            "title": "Updating book assignments TODO"
        }, 
        {
            "location": "/courses/coursemanagement/#publishing-project-assignments", 
            "text": "By default a project assignment is not available to others until you explicitly publish it. This ensures that you can make changes, even after publishing, without the published course content being affected.  Publishing the assignment takes a snapshot of the underlying project assignment and assigns it a new version. Once published, you can make further edits to the assignment without changes being visible in the published assignment until you publish it again.    Select the assignment from the listing and then press  Publish .    If you have not previously published then you will see  DRAFT", 
            "title": "Publishing project assignments"
        }, 
        {
            "location": "/courses/coursemanagement/#describe-changes-todo", 
            "text": "You should enter a brief description of the changes you made since the last publish of the assignment. You can see the version history on the   versions screen .", 
            "title": "Describe changes TODO"
        }, 
        {
            "location": "/courses/coursemanagement/#no-stack-modifications-or-you-switched-stack", 
            "text": "If, in your project assignment, you have   only made changes to the code workspace (the workspace is the contents of the file tree in the IDE or  /home/codio/workspace )  or you switched stack but did not make any stack modifications since switching,   then you should   Enter the changelog text, which is a description of the changes made since the last publish.  Press the  Stack unchanged  button.  Press the  Publish assignment  button when ready.", 
            "title": "No stack modifications or you switched stack"
        }, 
        {
            "location": "/courses/coursemanagement/#stack-modifications", 
            "text": "If you have made any changes to the project's stack then you should press the  Stack modified  button. Please be aware that changes to the stack can be made indirectly by applications as well as manual file changes. For example, if you modified a database's contents that is not configured to live in the workspace area then these count as stack changes.   You should now decide whether you want to   create a new version of the stack used by the assignment  create a brand new stack for this assignment.", 
            "title": "Stack modifications"
        }, 
        {
            "location": "/courses/coursemanagement/#stack-modified-new-stack-version", 
            "text": "Note that if the stack you are using is not owned by you or you don't have permissions to modify the stack, then you will not be able to select this option.  You should enter a description of the stack changes made and then press  Publish assignment . The new stack version will appear in your stacks listing in the normal way.", 
            "title": "Stack modified : New Stack Version"
        }, 
        {
            "location": "/courses/coursemanagement/#stack-modified-new-stack", 
            "text": "If you do not have permissions to create a new stack version or you want to create a new stack that this and potentially other assignments should use, then select this option.  This will create a new stack with the permissions you specify. To give access only to others within your organization, select  Private  and then select the owner organization from the drop down list below.  It will take a few minutes to prepare the stack, so please be patient. Once it is created, it will be visible your stacks listing.  You should  not  create a new stack for each assignment in your course without good reason. You should instead, create a stack and then point all other assignments that share this stack configuration to point to the new stack.  If you have differing configurations then create one single stack for a given configuration and then point assignments that use that configuration to the new stack.", 
            "title": "Stack modified: New Stack"
        }, 
        {
            "location": "/courses/coursemanagement/#important-switching-a-assignments-stack", 
            "text": "Let's say you have one or more assignments and you decide to change the stack that they point to. You can switch the stack either from within the IDE ( Project- Stack settings ) or from the assignments listing (press  Stack  icon).  Once this has been done, you need to publish your assignment again to reflect this change. Having switched stack, you should select  Stack not modified  and then press  Publish assignment .", 
            "title": "IMPORTANT: Switching a assignment's stack"
        }, 
        {
            "location": "/courses/coursemanagement/#editing-an-existing-assignment", 
            "text": "", 
            "title": "Editing an existing assignment"
        }, 
        {
            "location": "/courses/coursemanagement/#editing-a-book-assignment", 
            "text": "If you want to edit book assignment content, then you edit the book from the books listing, not the assignment listing. You would then republish the book after which you will see  Update to latest version  in the assignment listing.   If you have added new content then you can also remap the assignment to the book as described on the  adding an assignment  page.", 
            "title": "Editing a book assignment"
        }, 
        {
            "location": "/courses/coursemanagement/#editing-assignments", 
            "text": "See  Managing Assigments  Editing a project assignment is always done from the assignment listing.  Select the assignment to open in the IDE.  If there is a later version of the assignment that has been published since you last opened it, you will see the following screen and elect to open either the latest published version or the last version you edited.", 
            "title": "Editing assignments"
        }, 
        {
            "location": "/courses/coursemanagement/#collaborating-on-project-assignments-todo", 
            "text": "Other teachers in the course are able to collaborate on course assignments.   The rules for other users to edit a project assignment in a course are as follows.   Private  - only you can edit the project assignment.  Private but organization is the owner  - any teacher in your organization can edit.  Public  - only you can edit.  Public but organization is the owner  - any teacher in your organization can edit.   The ability to create public courses/modules can be enabled for the organization. See  Public/Private setttings  for more information.   If you want 2 or more people to collaborate on a project assignment, you need to understand how Codio manages this process.  The key thing you need to realize is that unless you are familiar with Git,  only one user should make changes at a time . If User A and User B want to collaborate, then they need to inform each other when they are working on the content. If they fail to do so, then one person will have to surrender their changes later on.  Let's say User A has authored a assignment and has finished work. At this point, User A must publish the assignment for others to be able to carry on from this point.  User B now makes changes to the assignment. When done, User B should inform User A that the changes are complete and published. At this point, when User A opens the assignment for editing, a dialog will appear showing that User B has published new changes.    User A now wants User B to be able to collaborate. User A should inform User B that the assignment is ready to edit. When User B accesses the assignment, Codio will take a  snapshot  of the published assignment and User B can start work on it. In other words, User B is  not  editing User A's assignment, User B has a clone.  User B now makes changes to the assignment. When done, User B should publish the changes in the same way that User A did. User B then informs User A that the changes are complete and published. At this point, when User A opens the assignment for editing, a dialog will appear showing that User B has published new changes. A new snapshot is then taken and User A (or any other user for that matter) can editing.  The important point in this process is that any user who has made changes and wants other to see those changes should publish first.", 
            "title": "Collaborating on project assignments TODO"
        }, 
        {
            "location": "/courses/grading/", 
            "text": "You can monitor student progress and time spent on individual assignments.\n\n\n\n\n\n\nFrom the \nCourses\n screen, click on your class to open it.\n\n\n\n\n\n\n\nClick on the \nStudents\n tab, top centre of your screen.\n\n\n\n\n\n\n\nYou will see all students in your class displayed on this screen. You will see progress data for assignments started and assignments completed alongside their names.\n\n\n\n\nTo see an individual student's progress in more detail click on their name. You will then see an individual breakdown of auto-graded assessment results, along with time spent on each assignment.\n\n\n\nTo see a more detailed breakdown of each assignment the student has attempted, click on the assignment name. You will be able to view a breakdown of the challenges attempted along with corresponding results.\n\n\n\n\n\n\nDownload CSV summary\n\uf0c1\n\n\nYou can also download a CSV file of your students progress. You can do this for individual assignments to see all your students by clicking on the blue triple dot icon to the right of the assignment name:\n\n\n\nor you can download a CSV file for the Course to see all your students progress in all the assignments in each Module by hovering over the Module name to select \nDownload CSV\n there:\n\n\n\nor you can export all the data from a class (including the students workspaces) by exporting class data. See \nexport class data\n for more details\n\n\nAccessing student work\n\uf0c1\n\n\nAs a teacher you have access to your students cloud area within Codio. This allows you to view and access any work your students have completed at any time.\n\n\n\n\n\n\nFrom the \nCourses\n area, click on your class to open it.\n\n\n\n\n\n\n\nClick on the \nStudents\n tab, top centre of your screen.\n\n\n\n\n\n\n\nYou will see all students in your class displayed on this screen. By default they will show sorted alphabetically by first name but you can also sort them by last name if preferred\n\n\n\n\n\n\nTo view/access an individual students work click on their name. On the far right of the screen, under the heading \nOpen\n, click the blue arrow to open the students work.\n\n\n\n\n\n\n\nAuto-graded assessments\n\uf0c1\n\n\nAuto-graded assessments will appear in the teacher dashboard.\n\n\n\n\nnbgrader autograding\n\uf0c1\n\n\nJupyter notebook\n has auto-grade functionality through \nnbgrader\n that Codio supports\n\n\nOverview\n\uf0c1\n\n\nAssignment creators create the assignment with \nJupyter notebook\n files for the assignment.\n\n\nnbgrader\n support doesn't require \nguides\n or any other \nassessments\n.\n\n\nAny user configurations required should be stored in a \n.codio-jupyter\n file.\n\n\nif a \n.codio-jupyter\n file exists in a project we assume it is \njupyter\n based grader, and therefore only \nnbgrader\n can be selected for the assessment scripts in the assignment\n\n\nWhen the assignment is published to a class, either as an \nindividual project\n or as part of a \ncourse/module\n, the release version is created for the student.\n\n\nWhen the student submits the assignment by marking the assignment as complete, it will be \nautograded\n automatically.\n\n\nManual grading\n is also available if required\n\n\nConfiguration\n\uf0c1\n\n\n\n\nExtend Timeout period\n\uf0c1\n\n\nTo extend the time required for completion (to 90 seconds in this example), you can add\n\n\nnbgrader:\n   ExecutePreprocessor.timeout: 90\n\n\n\n\nto the \n.codio-jupyter\n file\n\n\nLock all cells\n\uf0c1\n\n\nTo lock all cells (Default: False)\n\n\nnbgrader:\n   LockCells.lock_all_cells: True\n\n\n\n\nto the \n.codio-jupyter\n file\n\n\nLock all grade cells\n\uf0c1\n\n\nTo lock all grade cells (Default: True) where grade cells are locked (non-deletable)\n\n\nnbgrader:\n   LockCells.lock_grade_cells: True\n\n\n\n\nto the \n.codio-jupyter\n file\n\n\nLock all read-only cells\n\uf0c1\n\n\nTo lock all grade cells (Default: True) where read only cells are locked (non-deletable and non-editable)\n\n\nnbgrader:\n   LockCells.lock_readonly_cells: True\n\n\n\n\nto the \n.codio-jupyter\n file\n\n\nLock all solution cells\n\uf0c1\n\n\nTo lock all solution cells (Default: True) where solution cells are locked (non-deletable and non-editable)\n\n\nnbgrader:\n   LockCells.lock_solution_cells: True\n\n\n\n\nto the \n.codio-jupyter\n file\n\n\nExecute preprocessor on timeout\n\uf0c1\n\n\nIf execution of a cell times out, interrupt the kernel and continue executing other cells rather than throwing an error and stopping.\n\n\nnbgrader:\n   ExecutePreprocessor.interrupt_on_timeout: True\n\n\n\n\nto the \n.codio-jupyter\n file\n\n\nIf you require any assistance at all, or would like us to consider adding additional functions, please don't hesitate to \ncontact us\n\n\nGrading project work\n\uf0c1\n\n\nCodio's grading features address four important aspects when grading student projects.\n\n\n\n\nAssign grade\n - manually reviewing student projects and then assigning a grade.\n\n\nGrading moderation\n - having other lecturers review grades already assigned in order to monitor consistency of grading.\n\n\nGrading rubric\n - This provides a grading guideline framework for teachers. Please \nclick here\n for details.\n\n\nLMS gradebook sycnhronization\n - This feature ensures that when teachers release grades, the data is passed automatically to any LTI enabled LMS platform such as Moodle, Blackboard and Canvas.\n\n\n\n\nVideo overview\n\uf0c1\n\n\nClick here\n if you'd like to watch a quick video overview.\n\n\nThe grading process\n\uf0c1\n\n\nOnce students have completed their assignments, they should notify the teacher of completion by going to the \nEducation-\nMark as Completed\n menu item within the IDE. The teacher is then able to see whose project is ready to be graded (see below image with completion status circled left).\n\n\nThe teacher is also able to filter either finding specific students or to view students based on the status of the assignment.\n\n\n\nStudents can be filtered by:\n\n\n\n\nAny Status\n\n\nStarted\n\n\nNot Started\n\n\nFully Graded\n\n\nNot Graded\n\n\nCompleted\n\n\nUncompleted\n\n\n\n\nYou can access the student's project from the same screen by clicking on the 3 blue dots on the extreme right (see below image with dots circled right). You can then review the project.\n\n\n\n\nThe teacher can also mark the assignment as complete going to the \nEducation-\nMark as Completed\n menu item within the IDE and if already marked as complete, can change the status to incomplete\n\n\nThere are two ways to assign the grade.\n\n\n\n\nEither you can grade from within the IDE itself from the Education menu item. You need to have a student project open in the IDE.\n\n\nOr you can grade from the class dashboard. You must first have selected the assignment associated with the project and then press the grading icon.\n\n\n\n\nAlso see \nAutograding\n\n\nTo grade from the class dashboard, you should first select the assignment. You can see the check mark next to those students who have completed the assignment.\n\n\nTo assign comments or a grade, you click on the Grade icon (see image above with grading icons circled center). You can then modify the comments and grade fields for any individual student.\n\n\n\n\n\n\nReleasing Grades\n\uf0c1\n\n\nBy default students are not shown the grades until you decide to release them to the class. This allows you to hold back until you have completed the entire grading process and then release them in one go. If you want the students to see the grades as you go then simply flick the release grades switch before you start grading.\n\n\n\n\nStudents are able to see their grades either from their Course view or by opening the assignment and going to \nEducation-\nFeedback\n\n\nYou can also release grades from the main assignment view right clicking on the 3 vertical dots and selecting \nRelease grades\n.\n\n\n\n\n\n\nAutomatically releasing grades\n\uf0c1\n\n\nIf you wish to automatically release grades when students complete a assignment, you can enable this feature at the organisation level so when you create new \ncourses\n this option is automatically enabled. See \norganisation release grades\n for more information.\n\n\nYou can also change the status of this feature for individual C\ncourses if required on the admin tab of the class.\n\n\n\nGrading moderation\n\uf0c1\n\n\nIn some situations you may want to monitor the accuracy of grading. This can become especially important if you have more than one lecturer or teacher grading student work. It is important that students can rely on a consistency of grades no matter which person actually assigns the grade.\n\n\nThis is where grading moderation is a very useful tool. It allows other teachers to access a student's project, review it and then assign a grade and associated comments. Rather than reviewing all student projects, typically a smaller sample will be taken for review and from that it should become clear if there are any obvious discrepancies.\n\n\nA common approach is to take a few students who got top grades, a few with terrible grades and a few from the middle of the pack and then perform the grading moderation on those.\n\n\nThe below screenshot shows an example of where a student project has been graded by Professor Babbage, who awarded an A-. The grade was then reviewed by Freddy May, who assigned a slightly better grade.\n\n\n\n\nThe moderated grade will not be shown to the class and can only be seen by teachers of that class.\n\n\nTeachers who you want to perform grading moderation will need to be added to the class from the \nAdmin\n screen first.\n\n\nGrading free text questions\n\uf0c1\n\n\nFree text questions will normally require a manual grading process. In order to grade these questions, you should first select the assignment. You will then be shown the student list, as you can see below.\n\n\n\n\nYou can now select a student. You will then be shown the list of all assessments for that student within the assignment. Free text questions are denoted by the icon highlighted below.\n\n\n\n\nNote that if a student has started to answer a question but not submitted the answer, then you will see \nDRAFT\n written next to it. Once they submit, you will see \nGRADE\n indicating that the question has been submitted and is ready to be graded.\n\n\n\n\nPartial Point Rubric\n\uf0c1\n\n\nWhere an answer is set to all partial points, a rubric is provided to allow graders to dynamically deduct points from the maximum score.\nA grader can add an item, change an item weight or remove an item at any time in grading. The change will be applied for all students in this assignment, and any changes in rubric will upgrade already graded students to implement changes. The rubric is dynamic for each assignment, and every new assignment starts with an empty rubric.\n\n\n\n\nRubric\n\uf0c1\n\n\nEvery rubric item is 2 fields, first is the rubric item weight and the second one line item name.\n\n\n\n\nIf an item is selected, then the weight is deducted from students score.\n\n\nThe grader can select multiple items.\n\n\nThe total score can't be negative even if sum of rubric items weights is more than maximum points.\n\n\n\n\nEditing\n\uf0c1\n\n\nEditing is allowed while grading so the teacher can:\n\n\n\n\nadd a new item into the form\n\n\nremove an item. As this action will effect all students already graded and their total score updated, a warning is shown for confirmation\n\n\nedit the weight or name.  If weight is changed a warning will be shown for confirmation\n\n\n\n\nCloning\n\uf0c1\n\n\nA rubric can be cloned from another assignment if required in preference to creating manually. Select the gear icon (circled in image above) to select the assignment.\n\n\nPoints adjust\n\uf0c1\n\n\nThe points adjust field allows the teacher/instructor to manually adjust (ie reduce) the students total score if required without having to edit/change the rubric\n\n\nFeedback\n\uf0c1\n\n\nA comments field is provided to allow teacher/instructors manual feedback\n\n\nIf a class deadline is reached, then you can grade questions that are  set to \nDRAFT\n and where the student may have forgotten to submit the answer fully.\n\n\nYou can also see the date and time for each submitted answer as well as the date that the assignment was \nmarked as complete\n by the student.", 
            "title": "Grading and accessing student projects"
        }, 
        {
            "location": "/courses/grading/#download-csv-summary", 
            "text": "You can also download a CSV file of your students progress. You can do this for individual assignments to see all your students by clicking on the blue triple dot icon to the right of the assignment name:  or you can download a CSV file for the Course to see all your students progress in all the assignments in each Module by hovering over the Module name to select  Download CSV  there:  or you can export all the data from a class (including the students workspaces) by exporting class data. See  export class data  for more details", 
            "title": "Download CSV summary"
        }, 
        {
            "location": "/courses/grading/#accessing-student-work", 
            "text": "As a teacher you have access to your students cloud area within Codio. This allows you to view and access any work your students have completed at any time.    From the  Courses  area, click on your class to open it.    Click on the  Students  tab, top centre of your screen.    You will see all students in your class displayed on this screen. By default they will show sorted alphabetically by first name but you can also sort them by last name if preferred    To view/access an individual students work click on their name. On the far right of the screen, under the heading  Open , click the blue arrow to open the students work.", 
            "title": "Accessing student work"
        }, 
        {
            "location": "/courses/grading/#auto-graded-assessments", 
            "text": "Auto-graded assessments will appear in the teacher dashboard.", 
            "title": "Auto-graded assessments"
        }, 
        {
            "location": "/courses/grading/#nbgrader-autograding", 
            "text": "Jupyter notebook  has auto-grade functionality through  nbgrader  that Codio supports", 
            "title": "nbgrader autograding"
        }, 
        {
            "location": "/courses/grading/#overview", 
            "text": "Assignment creators create the assignment with  Jupyter notebook  files for the assignment.  nbgrader  support doesn't require  guides  or any other  assessments .  Any user configurations required should be stored in a  .codio-jupyter  file.  if a  .codio-jupyter  file exists in a project we assume it is  jupyter  based grader, and therefore only  nbgrader  can be selected for the assessment scripts in the assignment  When the assignment is published to a class, either as an  individual project  or as part of a  course/module , the release version is created for the student.  When the student submits the assignment by marking the assignment as complete, it will be  autograded  automatically.  Manual grading  is also available if required", 
            "title": "Overview"
        }, 
        {
            "location": "/courses/grading/#configuration", 
            "text": "", 
            "title": "Configuration"
        }, 
        {
            "location": "/courses/grading/#extend-timeout-period", 
            "text": "To extend the time required for completion (to 90 seconds in this example), you can add  nbgrader:\n   ExecutePreprocessor.timeout: 90  to the  .codio-jupyter  file", 
            "title": "Extend Timeout period"
        }, 
        {
            "location": "/courses/grading/#lock-all-cells", 
            "text": "To lock all cells (Default: False)  nbgrader:\n   LockCells.lock_all_cells: True  to the  .codio-jupyter  file", 
            "title": "Lock all cells"
        }, 
        {
            "location": "/courses/grading/#lock-all-grade-cells", 
            "text": "To lock all grade cells (Default: True) where grade cells are locked (non-deletable)  nbgrader:\n   LockCells.lock_grade_cells: True  to the  .codio-jupyter  file", 
            "title": "Lock all grade cells"
        }, 
        {
            "location": "/courses/grading/#lock-all-read-only-cells", 
            "text": "To lock all grade cells (Default: True) where read only cells are locked (non-deletable and non-editable)  nbgrader:\n   LockCells.lock_readonly_cells: True  to the  .codio-jupyter  file", 
            "title": "Lock all read-only cells"
        }, 
        {
            "location": "/courses/grading/#lock-all-solution-cells", 
            "text": "To lock all solution cells (Default: True) where solution cells are locked (non-deletable and non-editable)  nbgrader:\n   LockCells.lock_solution_cells: True  to the  .codio-jupyter  file", 
            "title": "Lock all solution cells"
        }, 
        {
            "location": "/courses/grading/#execute-preprocessor-on-timeout", 
            "text": "If execution of a cell times out, interrupt the kernel and continue executing other cells rather than throwing an error and stopping.  nbgrader:\n   ExecutePreprocessor.interrupt_on_timeout: True  to the  .codio-jupyter  file  If you require any assistance at all, or would like us to consider adding additional functions, please don't hesitate to  contact us", 
            "title": "Execute preprocessor on timeout"
        }, 
        {
            "location": "/courses/grading/#grading-project-work", 
            "text": "Codio's grading features address four important aspects when grading student projects.   Assign grade  - manually reviewing student projects and then assigning a grade.  Grading moderation  - having other lecturers review grades already assigned in order to monitor consistency of grading.  Grading rubric  - This provides a grading guideline framework for teachers. Please  click here  for details.  LMS gradebook sycnhronization  - This feature ensures that when teachers release grades, the data is passed automatically to any LTI enabled LMS platform such as Moodle, Blackboard and Canvas.", 
            "title": "Grading project work"
        }, 
        {
            "location": "/courses/grading/#video-overview", 
            "text": "Click here  if you'd like to watch a quick video overview.", 
            "title": "Video overview"
        }, 
        {
            "location": "/courses/grading/#the-grading-process", 
            "text": "Once students have completed their assignments, they should notify the teacher of completion by going to the  Education- Mark as Completed  menu item within the IDE. The teacher is then able to see whose project is ready to be graded (see below image with completion status circled left).  The teacher is also able to filter either finding specific students or to view students based on the status of the assignment.  Students can be filtered by:   Any Status  Started  Not Started  Fully Graded  Not Graded  Completed  Uncompleted   You can access the student's project from the same screen by clicking on the 3 blue dots on the extreme right (see below image with dots circled right). You can then review the project.   The teacher can also mark the assignment as complete going to the  Education- Mark as Completed  menu item within the IDE and if already marked as complete, can change the status to incomplete  There are two ways to assign the grade.   Either you can grade from within the IDE itself from the Education menu item. You need to have a student project open in the IDE.  Or you can grade from the class dashboard. You must first have selected the assignment associated with the project and then press the grading icon.   Also see  Autograding  To grade from the class dashboard, you should first select the assignment. You can see the check mark next to those students who have completed the assignment.  To assign comments or a grade, you click on the Grade icon (see image above with grading icons circled center). You can then modify the comments and grade fields for any individual student.", 
            "title": "The grading process"
        }, 
        {
            "location": "/courses/grading/#releasing-grades", 
            "text": "By default students are not shown the grades until you decide to release them to the class. This allows you to hold back until you have completed the entire grading process and then release them in one go. If you want the students to see the grades as you go then simply flick the release grades switch before you start grading.   Students are able to see their grades either from their Course view or by opening the assignment and going to  Education- Feedback  You can also release grades from the main assignment view right clicking on the 3 vertical dots and selecting  Release grades .", 
            "title": "Releasing Grades"
        }, 
        {
            "location": "/courses/grading/#automatically-releasing-grades", 
            "text": "If you wish to automatically release grades when students complete a assignment, you can enable this feature at the organisation level so when you create new  courses  this option is automatically enabled. See  organisation release grades  for more information.  You can also change the status of this feature for individual C\ncourses if required on the admin tab of the class.", 
            "title": "Automatically releasing grades"
        }, 
        {
            "location": "/courses/grading/#grading-moderation", 
            "text": "In some situations you may want to monitor the accuracy of grading. This can become especially important if you have more than one lecturer or teacher grading student work. It is important that students can rely on a consistency of grades no matter which person actually assigns the grade.  This is where grading moderation is a very useful tool. It allows other teachers to access a student's project, review it and then assign a grade and associated comments. Rather than reviewing all student projects, typically a smaller sample will be taken for review and from that it should become clear if there are any obvious discrepancies.  A common approach is to take a few students who got top grades, a few with terrible grades and a few from the middle of the pack and then perform the grading moderation on those.  The below screenshot shows an example of where a student project has been graded by Professor Babbage, who awarded an A-. The grade was then reviewed by Freddy May, who assigned a slightly better grade.   The moderated grade will not be shown to the class and can only be seen by teachers of that class.  Teachers who you want to perform grading moderation will need to be added to the class from the  Admin  screen first.", 
            "title": "Grading moderation"
        }, 
        {
            "location": "/courses/grading/#grading-free-text-questions", 
            "text": "Free text questions will normally require a manual grading process. In order to grade these questions, you should first select the assignment. You will then be shown the student list, as you can see below.   You can now select a student. You will then be shown the list of all assessments for that student within the assignment. Free text questions are denoted by the icon highlighted below.   Note that if a student has started to answer a question but not submitted the answer, then you will see  DRAFT  written next to it. Once they submit, you will see  GRADE  indicating that the question has been submitted and is ready to be graded.", 
            "title": "Grading free text questions"
        }, 
        {
            "location": "/courses/grading/#partial-point-rubric", 
            "text": "Where an answer is set to all partial points, a rubric is provided to allow graders to dynamically deduct points from the maximum score.\nA grader can add an item, change an item weight or remove an item at any time in grading. The change will be applied for all students in this assignment, and any changes in rubric will upgrade already graded students to implement changes. The rubric is dynamic for each assignment, and every new assignment starts with an empty rubric.", 
            "title": "Partial Point Rubric"
        }, 
        {
            "location": "/courses/grading/#rubric", 
            "text": "Every rubric item is 2 fields, first is the rubric item weight and the second one line item name.   If an item is selected, then the weight is deducted from students score.  The grader can select multiple items.  The total score can't be negative even if sum of rubric items weights is more than maximum points.", 
            "title": "Rubric"
        }, 
        {
            "location": "/courses/grading/#editing", 
            "text": "Editing is allowed while grading so the teacher can:   add a new item into the form  remove an item. As this action will effect all students already graded and their total score updated, a warning is shown for confirmation  edit the weight or name.  If weight is changed a warning will be shown for confirmation", 
            "title": "Editing"
        }, 
        {
            "location": "/courses/grading/#cloning", 
            "text": "A rubric can be cloned from another assignment if required in preference to creating manually. Select the gear icon (circled in image above) to select the assignment.", 
            "title": "Cloning"
        }, 
        {
            "location": "/courses/grading/#points-adjust", 
            "text": "The points adjust field allows the teacher/instructor to manually adjust (ie reduce) the students total score if required without having to edit/change the rubric", 
            "title": "Points adjust"
        }, 
        {
            "location": "/courses/grading/#feedback", 
            "text": "A comments field is provided to allow teacher/instructors manual feedback  If a class deadline is reached, then you can grade questions that are  set to  DRAFT  and where the student may have forgotten to submit the answer fully.  You can also see the date and time for each submitted answer as well as the date that the assignment was  marked as complete  by the student.", 
            "title": "Feedback"
        }, 
        {
            "location": "/courses/lti1_0/", 
            "text": "Learning Tools Interoperability (LTI) is a standard for passing user, organization, and course information between learning management systems (tool consumers) and learning tools and tool providers, such as Codio.\n\n\nLTI Keys and URLs\n\uf0c1\n\n\nLTI Keys\n are used to integrate your LMS to Codio. These keys are required by your LMS administrator one time only so that Codio can be added as an LTI provider. Once Codio has been added as an LTI provider, you will not need them again and the remaining actions can be completed by LMS users who have Teacher/Instructor permissions.\n\n\nCourse and assignment URLs\n will be copied and pasted into your LMS system, once for the LMS course/course and once for each LMS assignment.\n\n\nWe have platform specific integration documentation for the following LMS platforms, although for most LMS systems you should be able to utilise the \nCodio LTI App\n\n\n\n\nCanvas\n\n\nBlackboard\n\n\nMoodle\n\n\n\n\nLTI Keys\n\uf0c1\n\n\nLTI keys are accessible to \nCodio Organization Owners\n only.\n\n\nTo find these keys:\n\n\n\n\nGo to your organization account settings by clicking on your user name in the bottom left of your dashboard and then selecting your organization within \nMy Organizations\n.\n\n\nSelect the \nLTI Integrations\n tab.\n\n\nScroll down to the \nLTI Integration 1.0\n section. You should see the following fields.\n\n\n\n\n\n\nCourse URL\n\uf0c1\n\n\nThe \nCourse URL\n is used to map an LMS course to a Codio course. It ensures that Codio knows how to redirect students back to the correct course should they attempt to access the course through the Codio dashboard.\n\n\nThe LMS user who carries out these steps does not need to be a system administrator but must have suitable privileges to edit courses and assignments.\n\n\n\n\nIn Codio, go to the \nAdmin\n tab near the top.\n\n\nSelect \nEdit Details\n in the bottom of the page.\n\n\nNear the bottom is a switch \nEnable LTI\n which you should enable.\n\n\nBelow this is an empty field \nCourse LMS URL\n. Switch back to your LMS and make sure you are on the Home page of the course. Copy the url in the address bar of your browser to the clipboard and paste it into the above mentioned field in Codio.\n\n\n\n\n\n\nAssignment URL\n\uf0c1\n\n\nPlease be sure to check out the \nCodio LTI App\n which allows for an easy way to integrate and to map Codio course assignments to your LMS system.\n\n\nIf you are unable to utilise the Codio LTI App, the \nAssignment URL\n is where you map each individual assignment within your Codio course to the corresponding assignment in your LMS. It directs a student to the correct Codio assignment and will automatically open the Codio assignment.\n\n\n\n\nOn the main course screen, click the icon with 3 blue dots and select \nLTI Integration URL\n.\n\n\nYou should copy the LTI integration url to the clipboard by clicking on the field (it will auto copy).\n\n\n\n\n\n\n\n\nComplete the mapping in your LMS.\n\n\n\n\n\n\nExporting LTI settings\n\uf0c1\n\n\nThe LTI integration URLs for the assignments in a course can be exported.\n\n\n\n\nSelect the course, go to the Admin area and then press the \nExport LTI Settings\n button.\n\n\n\n\n\n\nCodio LTI App\n\uf0c1\n\n\nThe \nCodio LTI App\n allows an easy way to integrate Codio with supported LMS systems.\n\n\nPlease note the steps below are for implementation in Canvas.\n\n\nFor details of other supported systems see \nhttps://www.eduappcenter.com/tutorials\n.\n\n\nPreparation\n\uf0c1\n\n\nThe following steps need to be taken only one time per course.\n\n\nIn Codio\n\uf0c1\n\n\n\n\nGo to your organization account settings by clicking on your user name in the bottom left of your dashboard and then selecting your organization within \nMy Organizations\n.\n\n\nSelect the \nLTI Integrations\n tab.\n\n\nScroll down to the \nLTI Integration 1.0\n section. You should see the following fields. Remain on this screen for the time being.\n\n\n\n\n\n\nIn Canvas\n\uf0c1\n\n\nThe Canvas user who carries out these steps must be a system administrator.\n\n\n\n\nCreate a new Course in your LMS system. We suggest you create a test course called \nCodio Test Course\n before you do it with a production course.\n\n\nSelect the Course.\n\n\nClick on \nSettings\n in the left set of options.\n\n\nIn the top links, select \nApps\n.\n\n\nClick the large button \nView App Configurations\n.\n\n\nClick on the \nView App Center\n button.\n\n\n\n\n\n\n\n\nNavigate (or filter) to find the \nCodio\n app, select and \n+ Add App\n\n\n\n\nIn Codio and Canvas\n\uf0c1\n\n\nWe will now copy the following global integration fields from Codio to Canvas.\n\n\n\n\nLTI Consumer -\n Consumer Key\n\n\nLTI Secret -\n Shared Secret\n\n\n\n\nand select the \nAdd App\n button to confirm.\nYou should then have something similar to this:\n\n\n\n\nCourse URL\n\uf0c1\n\n\nThe \nCourse URL\n is used to map an LMS course to a Codio course. It ensures that Codio knows how to redirect students back to the correct course should they attempt to access the course through the Codio dashboard.\n\n\nThe LMS user who carries out these steps does not need to be a system administrator but must have suitable privileges to edit courses and assignments.\n\n\n\n\nIn Codio, go to the \nAdmin\n tab near the top.\n\n\nSelect \nEdit Details\n in the bottom of the page.\n\n\nNear the bottom is a switch \nEnable LTI\n which you should enable.\n\n\nBelow this is an empty field \nCourse LMS URL\n. Switch back to your LMS and make sure you are on the Home page of the course. Copy the url in the address bar of your browser to the clipboard and paste it into the above mentioned field in Codio.\n\n\n\n\n\n\nMapping Codio assignment to Canvas assignment\n\uf0c1\n\n\nThe \nAssignment URL\n is where you map each individual assignment within your Codio course to the corresponding assignment in your LMS.\n\n\nWhere you have enabled the Codio LTI App in your LMS system, you can easily integrate assignments from your Codio course.\n\n\n\n\nGo to your Canvas Course and to \nPages\n to add a new page,\n\n\nClick the Codio icon that will be available\n\n\n\n\n\n\n\n\nA list of the Codio course contents will be shown, simply select the assignment(s) you wish to add to Canvas and Save\n\n\n\n\n\n\nThe assignment(s) and course will need to be published before students will be able to access them\n\n\nFor other methods to integrate Codio with LMS systems, check out the pages that follow\n\n\nLTI Constant URLs\n\uf0c1\n\n\nEnabling this setting enables constant URL for course assignments, course detection will be done based on the custom parameter your LMS should pass.\n\n\nConstant URL's allows the transfer of learning content without modifying LTI links and they are also required if you wish to fork Codio courses and LMS Courses. See \nLTI Coursefork\n for more on this.\n\n\nPlease note the screenshots below are for implementation in Canvas but other LMS systems should be similar. Refer to their documentation for more assistance\n\n\n\n\nCreate an External app in your LMS using the configuration type: By URL\n\n\n\n\n\n\n\n\nEnter in the Consumer Key and Shared Secret from your Codio organisation\n\n\n\n\n\n\n\n\nCopy the XML URL into the Config URL field\n\n\nSubmit\n\n\nReturn to your Codio course and enable the \nEnable LTI constant URL's\n button, and save your changes\n\n\nCopy the \nLTI constant URL's enabled\n link\n\n\n\n\nN.B. If your LMS supports it, \nlis_course_offering_sourcedid\n is also supported as a unique course identifier so you can replace \ncodio_class_target_id\n if required\n\n\n\n\n\n\nReturn to your LMS external app and 'edit'\n\n\nPaste the \nLTI constant URL's enabled\n link into the Custom Field\n\n\nSubmit\n\n\n\n\nLTI Course fork\n\uf0c1\n\n\nEnabling this setting allows existing Codio course content used in your LMS to be forked into a new Codio course and a new course in your LMS. This should be enabled for the courses connected with the \"Master\" course in your LMS. The parameter will be disabled by default for for all forked courses.\n\n\nPlease note the screenshots below are for implementation in Canvas but other LMS systems should be similar. Refer to their documentation for more assistance\n\n\nFirst enable \nLTI Constant URLs\n for your course.\n\n\n\n\nIn your existing Codio course, enable the \nEnable LTI course fork\n button, and save your changes\n\n\n\n\n\n\n\n\nIn your LMS \"Copy this Course\" (or equivalent term for your LMS) and create your new course\n\n\n\n\n\n\n\n\nWhen completed go to \nExternal Apps\n and edit the existing app connecting Codio to your LMS\n\n\nReplace the existing custom field that was set from your original Codio course with an id of your own (e.g something like codio_class_target_id=my_class_id_10)\n\n\n\n\nN.B. If you LMS supports \nlis_course_offering_sourcedid\n you do not need to specify \ncodio_class_target_id\n for the forked course, \nlis_course_offering_sourcedid\n will be used automatically to detect the course\n\n\n\n\n\n\nIn your existing Codio course, copy the content of the LTI course fork enabled field into a new line in the 'Edit App' custom field\n\n\n\n\n\nSubmit\n\n\n\n\n\n\nIn the new course created in your LMS, open one of the new assignments and this will then create the new course in Codio containing the content from your original Codio course.\n\n\n\n\n\n\nGrading\n\uf0c1\n\n\nWhen grades are \nreleased\n a URL is passed to the LMS where students/teachers can access the grading information for the assignment in the grading area of the LMS\n\n\nBy default, only the course teachers and the individual student can access the grading preview URL but by enabling the \nLMS shared feedback\n option for the course\n\n\nCanvas\n\uf0c1\n\n\nPlease be sure to check out the \nCodio LTI App\n which allows for an easy way to integrate and to map Codio course assignments to your Canvas system.\n\n\nPreparation\n\uf0c1\n\n\nThe following steps need to be taken only one time per course.\n\n\nIn Codio\n\uf0c1\n\n\n\n\nGo to your organization account settings by clicking on your user name in the bottom left of your dashboard and then selecting your organization within \nMy Organizations\n.\n\n\nSelect the \nLTI Integrations\n tab.\n\n\nScroll down to the \nLTI Integration 1.0\n section. You should see the following fields. Remain on this screen for the time being.\n\n\n\n\n\n\nIn Canvas, adding Codio as an App\n\uf0c1\n\n\nThe Canvas user who carries out these steps must be a system administrator.\n\n\n\n\nCreate a new Course in Canvas. We suggest you create a test course called \nCodio Canvas\n before you do it with a production course.\n\n\nSelect the Course.\n\n\nClick on \nSettings\n in the left set of options.\n\n\nIn the top links, select \nApps\n.\n\n\nClick the large button \nView App Configurations\n.\n\n\nClick on the blue \n+ App\n button.\n\n\n\n\nIn Codio and Canvas\n\uf0c1\n\n\nWe will now copy the following global integration fields from Codio to Canvas.\n\n\n\n\nLTI Consumer -\n Consumer Key\n\n\nLTI Secret -\n Shared Secret\n\n\nLTI URL -\n Launch URL\n\n\n\n\nIn Canvas you should then use one of the following steps\n\n\nManual Entry\n\uf0c1\n\n\n\n\nEnter a suitable name (Codio Canvas LTI) in the \nName\n field.\n\n\nEnter \napollo.codio.com\n into the \nDomain\n field.\n\n\nIn the \nPrivacy\n field, select \nPublic\n\n\nPaste in the 3 Codio fields to the appropriate fields\n\n\n\n\nYou should end up with something like this.\n\n\n\n\nBy URL\n\uf0c1\n\n\n\n\nEnter a suitable name (Codio Canvas LTI) in the \nName\n field.\n\n\nIn Codio select the Copy Consumer button to copy in to the Consumer Key field.\n\n\nselect the Copy Secret Key to copy in to the Shared Secret field.\n\n\nselect the Copy XML URL to copy in the to the Config URL field.\n\n\nand Submit\n\n\n\n\nPaste XML\n\uf0c1\n\n\n\n\nEnter a suitable name (Codio Canvas LTI) in the \nName\n field.\n\n\nIn Codio select the Copy Consumer button to copy in to the Consumer Key field.\n\n\nselect the Copy Secret Key to copy in to the Shared Secret field.\n\n\nclick on the \nXML Configuration\n link to open the XML and then copy in the to the XML Configuration field.\n\n\nand Submit\n\n\n\n\nCodio course setup\n\uf0c1\n\n\nYou need to perform the following actions one time only for a course. The Canvas user who carries out these steps does not need to be a system administrator but must have suitable privileges to edit courses and assignments.\n\n\n\n\nIn Codio, create a new course and name it \nCanvas Demo\n.\n\n\nClick on the \nAdmin\n tab near the top.\n\n\nSelect \nEdit Details\n in the bottom of the page.\n\n\nNear the bottom is a switch \nEnable LTI\n which you should enable.\n\n\nBelow this is an empty field \nCourse LMS URL\n. Switch back to Canvas and make sure you are on the Home page of the course. Copy the url in the address bar of your browser to the clipboard and paste it into the above mentioned field in Codio. The url format should end with something like \n/courses/1121212\n although the number will be different.\n\n\n\n\nThis URL ensures that Codio knows how to redirect students back to the correct Canvas course should they attempt to access the course through their dashboard.\n\n\nMapping an Assignment to a Canvas Assignment\n\uf0c1\n\n\nThe final mapping step needs to be taken for each individual assignment within Codio. It maps a Canvas assignment to a Codio assignment.\n\n\nIn Codio\n\uf0c1\n\n\n\n\nOn the main course screen, make sure the \nAssignments\n tab is selected.\n\n\nClick the \n+\n button and select \nAdd Project\n.\n\n\nSelect a project that has some autograded assessments. The \nMy First Project\n that you created earlier in the Onboarding Guide has some auto-graded assessments. You can also assign another project but you will need to manually grade the assignment so there are some scores to pass back to the Canvas gradebook.\n\n\nOnce the assignment has been added to the course, you should click the icon with 3 blue dots and select \nLTI Integration URL\n.\n\n\nYou should copy the LTI integration url to the clipboard by clicking on the field (it will auto copy).\n\n\n\n\n\n\nIn Canvas\n\uf0c1\n\n\nWe now return to Canvas complete the mapping.\n\n\n\n\nMake sure you are in the Courses area.\n\n\nClick on the \nAssignments\n link in the left hand side.\n\n\nProvide a name for the Assignment.\n\n\nSet the points for the Assignment. When the grades get passed back later, the Codio percentage score will be scaled to the points value you specify here.\n\n\nScroll down and look for the \nSubmission Type\n field.\n\n\n\n\n\n\n\n\nYou should now click on the dropdown list and select \nExternal Tool\n.\n\n\nIn the new set of fields that appear, paste the Codio \nLTI Integration URL\n field into the url field in Canvas.\n\n\nSelect \nLoad This Tool In a New Tab\n.\n\n\nClick the \nSave and Publish\n button.\n\n\nMake sure the Canvas course is published.\n\n\n\n\nAdding faculty and students\n\uf0c1\n\n\nThe final step is to add students to your course. This is done from the People tab. We recommend that you add the same test students to Canvas that you have in Codio. The only field of data that needs to match is the email address. So, look up the Codio test student email addresses and add them to Canvas in the student role.\n\n\nWhen you add a student in Canvas you will need to confirm from the email you are sent.\n\n\nImportant\n : make sure you log out of your teacher based Canvas session before doing this.\n\n\nNext, you should login to Canvas as a test student and start the assignment. Please read on to see what happens next, which is dependent.\n\n\nIMPORTANT\n : when you access Codio from Canvas, this user will become the dominant Codio user in the browser. This means that if you have a Codio session open (say you are logged in as faculty) and you start an assignment from Canvas as a student, the old Codio session will be invalidated. To get around this, you should think about running your teacher account in a separate browser type or in an incognito window. Just be aware of this when testing.\n\n\nSingle sign-in and account creation\n\uf0c1\n\n\nIt is important to understand how Codio maps Canvas users to Codio users. The following rules should be understood. If students or faculty access Codio via a Canvas assignment then Codio will use the Canvas email address to identify the user.\n\n\n\n\nIf the user is not known to Codio then we will sign up the user as a new Codio user in the background and take the user directly into the Codio content. The Canvas user role will be carried over as well.\n\n\nIf the user is known to Codio then Codio will take them directly into the Codio content without any sign-in required. If they are a Codio user but are not a member of your organization then they will be required to complete a verification via email.\n\n\n\n\nGenerating scores\n\uf0c1\n\n\nYou should now generate some scores to pass back to Codio. You can do either of the following.\n\n\n\n\nIf your assigned Codio assignment has some autograded assessments (simple MCQs will do fine) then access the Codio content as students as answer the questions to generate a score\n\n\nYou can also manually grade the student assignment in Codio. You will need to enter a percentage value here as the LMS/LTI interface requires this.\n\n\n\n\nReleasing grades\n\uf0c1\n\n\nBy default, grades in Codio are neither passed back to the student nor to Canvas until they are\n\n\n\n\nMarked as complete by either the student or the teacher and\n\n\nthe \nRelease Grades\n switch is enabled.\n\n\n\n\nOnce \nRelease Grades\n is enabled, all completed student assignments are automatically sent through.\n\n\n\n\nThere are various ways to mark a student's work as complete\n\n\n\n\nThe student can do this from either the Course dashboard or from the \nEducation-\nMark as Complete\n menu in the assignment itself.\n\n\nThe teacher can do the same in the assignment when \nviewing students code\n\n\n\n\nThe teacher can do the same from the assignment in the Course dashboard by hovering in the left side of a student entry and then setting the completed switch.\n\n\n\n\n\n\nThe teacher can mark all student assignments as completed in one action. This is done by\n\n\n\n\nselecting the assignment in the Course\n\n\npressing the \nAction\n button\n\n\npressing the \nMark all as Completed\n button\n\n\n\n\nBlackboard\n\uf0c1\n\n\nPlease be sure to check out the \nCodio LTI App\n which allows for an easy way to integrate and to map Codio course assignments to your LMS system. The \nfollowing page\n explains how to set up external apps in Blackboard Learn.\n\n\nPreparation\n\uf0c1\n\n\nThe following steps need to be taken only one time per course.\n\n\nIn Codio\n\uf0c1\n\n\n\n\nGo to your organization account settings by clicking on your user name in the bottom left of your dashboard and then selecting your organization within \nMy Organizations\n.\n\n\nSelect the \nLTI Integrations\n tab.\n\n\nScroll down to the \nLTI Integration 1.0\n section. You should see the following fields. Remain on this screen for the time being.\n\n\n\n\n\n\nIn Blackboard\n\uf0c1\n\n\nThe Blackboard user who carries out these steps must be a Blackboard system administrator.\n\n\n\n\nCreate a new Course in Blackboard. We suggest you create a test course called \nCodio Blackboard\n before you do it with a production course.\n\n\nLook for the \nSystem Admin\n tab near the top right of the page and select it.\n\n\nLook for the \nBuilding Blocks\n section and select it.\n\n\nClick on \nLTI tool providers\n.\n\n\nClick on \nRegister Provider Domain\n in the menu bar.\n\n\nIn the \nProvider Domain\n field, enter \napollo.codio.com\n.\n\n\nIn the \nDefault Configuration\n section, set \nDefault Configuration\n to be \nSet globally\n.\n\n\nIn the \nOrganization Policies\n section you should\n\n\nset \nSend User Data\n to \nSend user data only over SSL\n.\n\n\nin \nUser Fields to Send\n you should set all 3 fields (Constituency in Course, Name, Email Address).\n\n\n\n\nIn Codio and Blackboard\n\uf0c1\n\n\nNow return to the \nDefault Configuration\n section in Blackboard. We will now copy the following global integration fields from Codio to Blackboard.\n\n\n\n\nLTI Consumer -\n Tool Provider Key\n\n\nLTI Secret -\n Tool Provider Secret\n\n\n\n\nCodio course setup\n\uf0c1\n\n\nYou need to perform the following actions one time only for a course. The Blackboard user who carries out these steps does not need to be a system administrator but must have suitable privileges to edit courses and assignments.\n\n\n\n\nCreate a new course and name it \nBlackboard Demo\n.\n\n\nIn the main course screen, click on the \nAdmin\n tab near the top.\n\n\nSelect \nEdit Details\n in the bottom of the page.\n\n\nNear the bottom is a switch \nEnable LTI\n which you should enable.\n\n\nBelow this is an empty field \nCourse LMS URL\n. Switch back to Blackboard and make sure you are on the main the Codio Blackboard course you created earlier. Copy the url in the address bar of your browser to the clipboard and paste it into the above mentioned field in Codio.\n\n\n\n\nThis URL ensures that Codio knows how to redirect students back to the correct Blackboard course should they attempt to access the course through their dashboard.\n\n\nMapping ab assignment to Blackboard Content\n\uf0c1\n\n\nThe final mapping step needs to be taken for each individual assignment within Codio. It maps a piece of Blackboard content to a Codio assignment.\n\n\nIn Codio\n\uf0c1\n\n\n\n\nOn the main course screen, make sure the \nAssignments\n tab is selected.\n\n\nClick the \n+\n button and select \nAdd Project\n.\n\n\nSelect a project that has some autograded assessments. The \nMy First Project\n that you created earlier in the Onboarding Guide has some auto-graded assessments. You can also assign another project but you will need to manually grade the assignment so there are some scores to pass back to the Blackboard gradebook.\n\n\nOnce the assignment has been added to the course, you should click the icon with 3 blue dots and select \nLTI Integration URL\n.\n\n\nYou should copy the LTI integration url to the clipboard by clicking on the field (it will auto copy).\n\n\n\n\n\n\nIn Blackboard\n\uf0c1\n\n\nWe now return to Blackboard complete the mapping.\n\n\n\n\nMake sure you have selected the Blackboard course.\n\n\nClick \nContent\n in the left hand menu.\n\n\nSelect or hover over \nBuild Content\n in the menu bar\n\n\nSelect \nWeb Link\n.\n\n\nIn the \nWeb Link Information\n section ...\n\n\nEnter a name for the content\n\n\nPaste in the \nLTI Integration URL\n that you just copied to the clipboard from Codio\n\n\nCheck the box \nThs is a link to a tool provider\n\n\nSelect \nYes\n for the field \nEnable Evaulation\n after which more fields will appear\n\n\nSet the points you want to award for this content (Codio will automatically scale the percentage value it uses to the points you specify here)\n\n\nSave the content settings.\n\n\n\n\nAdding faculty and students\n\uf0c1\n\n\nThe final step is to add students to your course. This is done from the People tab. We recommend that you add the same test students to Blackboard that you have in Codio. The only field of data that needs to match is the email address. So, look up the Codio test student email addresses and add them to Blackboard in the student role.\n\n\nNext, you should login to Blackboard as a test student and start the assignment. Please read on to see what happens next, which is dependent.\n\n\nIMPORTANT\n : when you access Codio from Blackboard, this user will become the dominant Codio user in the browser. This means that if you have a Codio session open (say you are logged in as faculty) and open some content from Blackboard as a student, the old Codio session will be invalidated. To get around this, you should think about running your teacher account in a separate browser type or in an incognito window. Just be aware of this when testing.\n\n\nSingle sign-in and account creation\n\uf0c1\n\n\nIt is important to understand how Codio maps Blackboard users to Codio users. The following rules should be understood. If students or faculty access Codio via a Blackboard assignment then Codio will use the Blackboard email address to identify the user.\n\n\n\n\nIf the user is not known to Codio then we will sign up the user as a new Codio user in the background and take the user directly into the Codio content. The Blackboard user role will be carried over as well.\n\n\nIf the user is known to Codio then Codio will take them directly into the Codio content without any sign-in required. If they are a Codio user but are not a member of your organization then they will be required to complete a verification via email.\n\n\n\n\nGenerating scores\n\uf0c1\n\n\nYou should now generate some scores to pass back to Codio. You can do either of the following.\n\n\n\n\nIf your assigned Codio assignment has some autograded assessments (simple MCQs will do fine) then access the Codio content as students as answer the questions to generate a score\n\n\nYou can also manually grade the student assignment in Codio. You will need to enter a percentage value here as the LMS/LTI interface requires this.\n\n\n\n\nReleasing grades\n\uf0c1\n\n\nBy default, grades in Codio are neither passed back to the student nor to Blackboard until they are\n\n\n\n\nMarked as complete by either the student or the teacher and\n\n\nthe \nRelease Grades\n switch is enabled.\n\n\n\n\nOnce \nRelease Grades\n is enabled, all completed student assignments are automatically sent through.\n\n\n\n\nThere are various ways to mark a student's work as complete\n\n\n\n\nThe student can do this from either the course dashboard or from the \nEducation-\nMark as Complete\n menu in the assignment itself.\n\n\nThe teacher can do the same in the assignment when \nviewing students code\n\n\n\n\nThe teacher can do the same from the assignment in the course dashboard by hovering in the left side of a student entry and then setting the completed switch.\n\n\n\n\n\n\nThe teacher can mark all student assignments as completed in one action. This is done by\n\n\n\n\nselecting the assignment in the course\n\n\npressing the \nAction\n button\n\n\npressing the \nMark all as Completed\n button\n\n\n\n\nImportant\n : If you are running a staging or test Blackboard environment then you must have a valid SSL certificate on your Blackboard server otherwise grades will not be pass back to Blackboard successfully.\n\n\nMoodle\n\uf0c1\n\n\nPlease be sure to check out the \nCodio LTI App\n which allows for an easy way to integrate and to map Codio course assignments to your LMS system. Moodle added support for LTI\u2122 apps in version 2.2. The \nfollowing page\n explains how to set up external apps in Moodle.\n\n\nAuthentication and account creation\n\uf0c1\n\n\nOnce you have configured the LTI/LMS settings, Moodle manages all aspects of signing in to Codio as well as account creation. All your teachers and students need is a Moodle account.\n\n\nIf a Moodle user has never used Codio before then an account will automatically be created when they access their first Codio course materials.\n\n\nIf a Moodle user already has a Codio account then \nprovided the email address of their Codio account matches the email address of their LMS account\n the same Codio account will be used. If, however, the user has used a different email address within Codio, then a new Codio account will be created that matches that of the Moodle account.\n\n\nSetup, configuration and usage\n\uf0c1\n\n\nThe following instructions are provided as short videos.\n\n\nOne time setup\n\uf0c1\n\n\nYou will not have access to the Moodle/LMS features unless you have an educational organization setup as explained in the video.\n\n\nImportant\n : Codio needs the User Role, Email Address and Name of the Moodle user in order to work. It is important that you access the LTI security settings and ensure that these three fields are always enabled.\n\n\nPlease note\n : Since these videos were created, the Codio keys are now found on the \nLTI Integration\n tab in your organisation \nMy Organistaions\n area\n\n\n\n\n\nMapping Moodle Courses and creating Moodle Activities\n\uf0c1\n\n\nThis video covers the two key aspects of Moodle-\nCodio mapping...\n\n\n\n\nmapping your Moodle \nCourse\n to a Codio \ncourse\n, a one-time only configuration for a new course\n\n\ncreating a Moodle \nActivity\n within a Course and mapping it to a Codio \nAssignment\n\n\n\n\n\n\n\nUsing Codio from Moodle - student view\n\uf0c1\n\n\nExplains how students access Codio from within the LMS.\n\n\n\n\n\nUsing Codio from your LMS - teacher view\n\uf0c1\n\n\nExplains how teachers can access students' Codio projects from the Codio course or from Moodle.\n\n\n\n\n\nGrading student work and grade transfer to the Moodle gradebook\n\uf0c1\n\n\nThis video shows\n\n\n\n\nhow teachers grade student work in Codio\n\n\nhow grades are not released to students either in Codio or the LMS until the teacher says so\n\n\nhow grades are transferred to the Moodle gradebook once the teacher selects the \nRelease Grades\n option", 
            "title": "Integrating with LTI 1.1 systems"
        }, 
        {
            "location": "/courses/lti1_0/#lti-keys-and-urls", 
            "text": "LTI Keys  are used to integrate your LMS to Codio. These keys are required by your LMS administrator one time only so that Codio can be added as an LTI provider. Once Codio has been added as an LTI provider, you will not need them again and the remaining actions can be completed by LMS users who have Teacher/Instructor permissions.  Course and assignment URLs  will be copied and pasted into your LMS system, once for the LMS course/course and once for each LMS assignment.  We have platform specific integration documentation for the following LMS platforms, although for most LMS systems you should be able to utilise the  Codio LTI App   Canvas  Blackboard  Moodle", 
            "title": "LTI Keys and URLs"
        }, 
        {
            "location": "/courses/lti1_0/#lti-keys", 
            "text": "LTI keys are accessible to  Codio Organization Owners  only.  To find these keys:   Go to your organization account settings by clicking on your user name in the bottom left of your dashboard and then selecting your organization within  My Organizations .  Select the  LTI Integrations  tab.  Scroll down to the  LTI Integration 1.0  section. You should see the following fields.", 
            "title": "LTI Keys"
        }, 
        {
            "location": "/courses/lti1_0/#course-url", 
            "text": "The  Course URL  is used to map an LMS course to a Codio course. It ensures that Codio knows how to redirect students back to the correct course should they attempt to access the course through the Codio dashboard.  The LMS user who carries out these steps does not need to be a system administrator but must have suitable privileges to edit courses and assignments.   In Codio, go to the  Admin  tab near the top.  Select  Edit Details  in the bottom of the page.  Near the bottom is a switch  Enable LTI  which you should enable.  Below this is an empty field  Course LMS URL . Switch back to your LMS and make sure you are on the Home page of the course. Copy the url in the address bar of your browser to the clipboard and paste it into the above mentioned field in Codio.", 
            "title": "Course URL"
        }, 
        {
            "location": "/courses/lti1_0/#assignment-url", 
            "text": "Please be sure to check out the  Codio LTI App  which allows for an easy way to integrate and to map Codio course assignments to your LMS system.  If you are unable to utilise the Codio LTI App, the  Assignment URL  is where you map each individual assignment within your Codio course to the corresponding assignment in your LMS. It directs a student to the correct Codio assignment and will automatically open the Codio assignment.   On the main course screen, click the icon with 3 blue dots and select  LTI Integration URL .  You should copy the LTI integration url to the clipboard by clicking on the field (it will auto copy).     Complete the mapping in your LMS.", 
            "title": "Assignment URL"
        }, 
        {
            "location": "/courses/lti1_0/#exporting-lti-settings", 
            "text": "The LTI integration URLs for the assignments in a course can be exported.   Select the course, go to the Admin area and then press the  Export LTI Settings  button.", 
            "title": "Exporting LTI settings"
        }, 
        {
            "location": "/courses/lti1_0/#codio-lti-app", 
            "text": "The  Codio LTI App  allows an easy way to integrate Codio with supported LMS systems.  Please note the steps below are for implementation in Canvas.  For details of other supported systems see  https://www.eduappcenter.com/tutorials .", 
            "title": "Codio LTI App"
        }, 
        {
            "location": "/courses/lti1_0/#preparation", 
            "text": "The following steps need to be taken only one time per course.", 
            "title": "Preparation"
        }, 
        {
            "location": "/courses/lti1_0/#in-codio", 
            "text": "Go to your organization account settings by clicking on your user name in the bottom left of your dashboard and then selecting your organization within  My Organizations .  Select the  LTI Integrations  tab.  Scroll down to the  LTI Integration 1.0  section. You should see the following fields. Remain on this screen for the time being.", 
            "title": "In Codio"
        }, 
        {
            "location": "/courses/lti1_0/#in-canvas", 
            "text": "The Canvas user who carries out these steps must be a system administrator.   Create a new Course in your LMS system. We suggest you create a test course called  Codio Test Course  before you do it with a production course.  Select the Course.  Click on  Settings  in the left set of options.  In the top links, select  Apps .  Click the large button  View App Configurations .  Click on the  View App Center  button.     Navigate (or filter) to find the  Codio  app, select and  + Add App", 
            "title": "In Canvas"
        }, 
        {
            "location": "/courses/lti1_0/#in-codio-and-canvas", 
            "text": "We will now copy the following global integration fields from Codio to Canvas.   LTI Consumer -  Consumer Key  LTI Secret -  Shared Secret   and select the  Add App  button to confirm.\nYou should then have something similar to this:", 
            "title": "In Codio and Canvas"
        }, 
        {
            "location": "/courses/lti1_0/#course-url_1", 
            "text": "The  Course URL  is used to map an LMS course to a Codio course. It ensures that Codio knows how to redirect students back to the correct course should they attempt to access the course through the Codio dashboard.  The LMS user who carries out these steps does not need to be a system administrator but must have suitable privileges to edit courses and assignments.   In Codio, go to the  Admin  tab near the top.  Select  Edit Details  in the bottom of the page.  Near the bottom is a switch  Enable LTI  which you should enable.  Below this is an empty field  Course LMS URL . Switch back to your LMS and make sure you are on the Home page of the course. Copy the url in the address bar of your browser to the clipboard and paste it into the above mentioned field in Codio.", 
            "title": "Course URL"
        }, 
        {
            "location": "/courses/lti1_0/#mapping-codio-assignment-to-canvas-assignment", 
            "text": "The  Assignment URL  is where you map each individual assignment within your Codio course to the corresponding assignment in your LMS.  Where you have enabled the Codio LTI App in your LMS system, you can easily integrate assignments from your Codio course.   Go to your Canvas Course and to  Pages  to add a new page,  Click the Codio icon that will be available     A list of the Codio course contents will be shown, simply select the assignment(s) you wish to add to Canvas and Save    The assignment(s) and course will need to be published before students will be able to access them  For other methods to integrate Codio with LMS systems, check out the pages that follow", 
            "title": "Mapping Codio assignment to Canvas assignment"
        }, 
        {
            "location": "/courses/lti1_0/#lti-constant-urls", 
            "text": "Enabling this setting enables constant URL for course assignments, course detection will be done based on the custom parameter your LMS should pass.  Constant URL's allows the transfer of learning content without modifying LTI links and they are also required if you wish to fork Codio courses and LMS Courses. See  LTI Coursefork  for more on this.  Please note the screenshots below are for implementation in Canvas but other LMS systems should be similar. Refer to their documentation for more assistance   Create an External app in your LMS using the configuration type: By URL     Enter in the Consumer Key and Shared Secret from your Codio organisation     Copy the XML URL into the Config URL field  Submit  Return to your Codio course and enable the  Enable LTI constant URL's  button, and save your changes  Copy the  LTI constant URL's enabled  link   N.B. If your LMS supports it,  lis_course_offering_sourcedid  is also supported as a unique course identifier so you can replace  codio_class_target_id  if required    Return to your LMS external app and 'edit'  Paste the  LTI constant URL's enabled  link into the Custom Field  Submit", 
            "title": "LTI Constant URLs"
        }, 
        {
            "location": "/courses/lti1_0/#lti-course-fork", 
            "text": "Enabling this setting allows existing Codio course content used in your LMS to be forked into a new Codio course and a new course in your LMS. This should be enabled for the courses connected with the \"Master\" course in your LMS. The parameter will be disabled by default for for all forked courses.  Please note the screenshots below are for implementation in Canvas but other LMS systems should be similar. Refer to their documentation for more assistance  First enable  LTI Constant URLs  for your course.   In your existing Codio course, enable the  Enable LTI course fork  button, and save your changes     In your LMS \"Copy this Course\" (or equivalent term for your LMS) and create your new course     When completed go to  External Apps  and edit the existing app connecting Codio to your LMS  Replace the existing custom field that was set from your original Codio course with an id of your own (e.g something like codio_class_target_id=my_class_id_10)   N.B. If you LMS supports  lis_course_offering_sourcedid  you do not need to specify  codio_class_target_id  for the forked course,  lis_course_offering_sourcedid  will be used automatically to detect the course    In your existing Codio course, copy the content of the LTI course fork enabled field into a new line in the 'Edit App' custom field   Submit    In the new course created in your LMS, open one of the new assignments and this will then create the new course in Codio containing the content from your original Codio course.", 
            "title": "LTI Course fork"
        }, 
        {
            "location": "/courses/lti1_0/#grading", 
            "text": "When grades are  released  a URL is passed to the LMS where students/teachers can access the grading information for the assignment in the grading area of the LMS  By default, only the course teachers and the individual student can access the grading preview URL but by enabling the  LMS shared feedback  option for the course", 
            "title": "Grading"
        }, 
        {
            "location": "/courses/lti1_0/#canvas", 
            "text": "Please be sure to check out the  Codio LTI App  which allows for an easy way to integrate and to map Codio course assignments to your Canvas system.", 
            "title": "Canvas"
        }, 
        {
            "location": "/courses/lti1_0/#preparation_1", 
            "text": "The following steps need to be taken only one time per course.", 
            "title": "Preparation"
        }, 
        {
            "location": "/courses/lti1_0/#in-codio_1", 
            "text": "Go to your organization account settings by clicking on your user name in the bottom left of your dashboard and then selecting your organization within  My Organizations .  Select the  LTI Integrations  tab.  Scroll down to the  LTI Integration 1.0  section. You should see the following fields. Remain on this screen for the time being.", 
            "title": "In Codio"
        }, 
        {
            "location": "/courses/lti1_0/#in-canvas-adding-codio-as-an-app", 
            "text": "The Canvas user who carries out these steps must be a system administrator.   Create a new Course in Canvas. We suggest you create a test course called  Codio Canvas  before you do it with a production course.  Select the Course.  Click on  Settings  in the left set of options.  In the top links, select  Apps .  Click the large button  View App Configurations .  Click on the blue  + App  button.", 
            "title": "In Canvas, adding Codio as an App"
        }, 
        {
            "location": "/courses/lti1_0/#in-codio-and-canvas_1", 
            "text": "We will now copy the following global integration fields from Codio to Canvas.   LTI Consumer -  Consumer Key  LTI Secret -  Shared Secret  LTI URL -  Launch URL   In Canvas you should then use one of the following steps", 
            "title": "In Codio and Canvas"
        }, 
        {
            "location": "/courses/lti1_0/#manual-entry", 
            "text": "Enter a suitable name (Codio Canvas LTI) in the  Name  field.  Enter  apollo.codio.com  into the  Domain  field.  In the  Privacy  field, select  Public  Paste in the 3 Codio fields to the appropriate fields   You should end up with something like this.", 
            "title": "Manual Entry"
        }, 
        {
            "location": "/courses/lti1_0/#by-url", 
            "text": "Enter a suitable name (Codio Canvas LTI) in the  Name  field.  In Codio select the Copy Consumer button to copy in to the Consumer Key field.  select the Copy Secret Key to copy in to the Shared Secret field.  select the Copy XML URL to copy in the to the Config URL field.  and Submit", 
            "title": "By URL"
        }, 
        {
            "location": "/courses/lti1_0/#paste-xml", 
            "text": "Enter a suitable name (Codio Canvas LTI) in the  Name  field.  In Codio select the Copy Consumer button to copy in to the Consumer Key field.  select the Copy Secret Key to copy in to the Shared Secret field.  click on the  XML Configuration  link to open the XML and then copy in the to the XML Configuration field.  and Submit", 
            "title": "Paste XML"
        }, 
        {
            "location": "/courses/lti1_0/#codio-course-setup", 
            "text": "You need to perform the following actions one time only for a course. The Canvas user who carries out these steps does not need to be a system administrator but must have suitable privileges to edit courses and assignments.   In Codio, create a new course and name it  Canvas Demo .  Click on the  Admin  tab near the top.  Select  Edit Details  in the bottom of the page.  Near the bottom is a switch  Enable LTI  which you should enable.  Below this is an empty field  Course LMS URL . Switch back to Canvas and make sure you are on the Home page of the course. Copy the url in the address bar of your browser to the clipboard and paste it into the above mentioned field in Codio. The url format should end with something like  /courses/1121212  although the number will be different.   This URL ensures that Codio knows how to redirect students back to the correct Canvas course should they attempt to access the course through their dashboard.", 
            "title": "Codio course setup"
        }, 
        {
            "location": "/courses/lti1_0/#mapping-an-assignment-to-a-canvas-assignment", 
            "text": "The final mapping step needs to be taken for each individual assignment within Codio. It maps a Canvas assignment to a Codio assignment.", 
            "title": "Mapping an Assignment to a Canvas Assignment"
        }, 
        {
            "location": "/courses/lti1_0/#in-codio_2", 
            "text": "On the main course screen, make sure the  Assignments  tab is selected.  Click the  +  button and select  Add Project .  Select a project that has some autograded assessments. The  My First Project  that you created earlier in the Onboarding Guide has some auto-graded assessments. You can also assign another project but you will need to manually grade the assignment so there are some scores to pass back to the Canvas gradebook.  Once the assignment has been added to the course, you should click the icon with 3 blue dots and select  LTI Integration URL .  You should copy the LTI integration url to the clipboard by clicking on the field (it will auto copy).", 
            "title": "In Codio"
        }, 
        {
            "location": "/courses/lti1_0/#in-canvas_1", 
            "text": "We now return to Canvas complete the mapping.   Make sure you are in the Courses area.  Click on the  Assignments  link in the left hand side.  Provide a name for the Assignment.  Set the points for the Assignment. When the grades get passed back later, the Codio percentage score will be scaled to the points value you specify here.  Scroll down and look for the  Submission Type  field.     You should now click on the dropdown list and select  External Tool .  In the new set of fields that appear, paste the Codio  LTI Integration URL  field into the url field in Canvas.  Select  Load This Tool In a New Tab .  Click the  Save and Publish  button.  Make sure the Canvas course is published.", 
            "title": "In Canvas"
        }, 
        {
            "location": "/courses/lti1_0/#adding-faculty-and-students", 
            "text": "The final step is to add students to your course. This is done from the People tab. We recommend that you add the same test students to Canvas that you have in Codio. The only field of data that needs to match is the email address. So, look up the Codio test student email addresses and add them to Canvas in the student role.  When you add a student in Canvas you will need to confirm from the email you are sent.  Important  : make sure you log out of your teacher based Canvas session before doing this.  Next, you should login to Canvas as a test student and start the assignment. Please read on to see what happens next, which is dependent.  IMPORTANT  : when you access Codio from Canvas, this user will become the dominant Codio user in the browser. This means that if you have a Codio session open (say you are logged in as faculty) and you start an assignment from Canvas as a student, the old Codio session will be invalidated. To get around this, you should think about running your teacher account in a separate browser type or in an incognito window. Just be aware of this when testing.", 
            "title": "Adding faculty and students"
        }, 
        {
            "location": "/courses/lti1_0/#single-sign-in-and-account-creation", 
            "text": "It is important to understand how Codio maps Canvas users to Codio users. The following rules should be understood. If students or faculty access Codio via a Canvas assignment then Codio will use the Canvas email address to identify the user.   If the user is not known to Codio then we will sign up the user as a new Codio user in the background and take the user directly into the Codio content. The Canvas user role will be carried over as well.  If the user is known to Codio then Codio will take them directly into the Codio content without any sign-in required. If they are a Codio user but are not a member of your organization then they will be required to complete a verification via email.", 
            "title": "Single sign-in and account creation"
        }, 
        {
            "location": "/courses/lti1_0/#generating-scores", 
            "text": "You should now generate some scores to pass back to Codio. You can do either of the following.   If your assigned Codio assignment has some autograded assessments (simple MCQs will do fine) then access the Codio content as students as answer the questions to generate a score  You can also manually grade the student assignment in Codio. You will need to enter a percentage value here as the LMS/LTI interface requires this.", 
            "title": "Generating scores"
        }, 
        {
            "location": "/courses/lti1_0/#releasing-grades", 
            "text": "By default, grades in Codio are neither passed back to the student nor to Canvas until they are   Marked as complete by either the student or the teacher and  the  Release Grades  switch is enabled.   Once  Release Grades  is enabled, all completed student assignments are automatically sent through.   There are various ways to mark a student's work as complete   The student can do this from either the Course dashboard or from the  Education- Mark as Complete  menu in the assignment itself.  The teacher can do the same in the assignment when  viewing students code   The teacher can do the same from the assignment in the Course dashboard by hovering in the left side of a student entry and then setting the completed switch.    The teacher can mark all student assignments as completed in one action. This is done by   selecting the assignment in the Course  pressing the  Action  button  pressing the  Mark all as Completed  button", 
            "title": "Releasing grades"
        }, 
        {
            "location": "/courses/lti1_0/#blackboard", 
            "text": "Please be sure to check out the  Codio LTI App  which allows for an easy way to integrate and to map Codio course assignments to your LMS system. The  following page  explains how to set up external apps in Blackboard Learn.", 
            "title": "Blackboard"
        }, 
        {
            "location": "/courses/lti1_0/#preparation_2", 
            "text": "The following steps need to be taken only one time per course.", 
            "title": "Preparation"
        }, 
        {
            "location": "/courses/lti1_0/#in-codio_3", 
            "text": "Go to your organization account settings by clicking on your user name in the bottom left of your dashboard and then selecting your organization within  My Organizations .  Select the  LTI Integrations  tab.  Scroll down to the  LTI Integration 1.0  section. You should see the following fields. Remain on this screen for the time being.", 
            "title": "In Codio"
        }, 
        {
            "location": "/courses/lti1_0/#in-blackboard", 
            "text": "The Blackboard user who carries out these steps must be a Blackboard system administrator.   Create a new Course in Blackboard. We suggest you create a test course called  Codio Blackboard  before you do it with a production course.  Look for the  System Admin  tab near the top right of the page and select it.  Look for the  Building Blocks  section and select it.  Click on  LTI tool providers .  Click on  Register Provider Domain  in the menu bar.  In the  Provider Domain  field, enter  apollo.codio.com .  In the  Default Configuration  section, set  Default Configuration  to be  Set globally .  In the  Organization Policies  section you should  set  Send User Data  to  Send user data only over SSL .  in  User Fields to Send  you should set all 3 fields (Constituency in Course, Name, Email Address).", 
            "title": "In Blackboard"
        }, 
        {
            "location": "/courses/lti1_0/#in-codio-and-blackboard", 
            "text": "Now return to the  Default Configuration  section in Blackboard. We will now copy the following global integration fields from Codio to Blackboard.   LTI Consumer -  Tool Provider Key  LTI Secret -  Tool Provider Secret", 
            "title": "In Codio and Blackboard"
        }, 
        {
            "location": "/courses/lti1_0/#codio-course-setup_1", 
            "text": "You need to perform the following actions one time only for a course. The Blackboard user who carries out these steps does not need to be a system administrator but must have suitable privileges to edit courses and assignments.   Create a new course and name it  Blackboard Demo .  In the main course screen, click on the  Admin  tab near the top.  Select  Edit Details  in the bottom of the page.  Near the bottom is a switch  Enable LTI  which you should enable.  Below this is an empty field  Course LMS URL . Switch back to Blackboard and make sure you are on the main the Codio Blackboard course you created earlier. Copy the url in the address bar of your browser to the clipboard and paste it into the above mentioned field in Codio.   This URL ensures that Codio knows how to redirect students back to the correct Blackboard course should they attempt to access the course through their dashboard.", 
            "title": "Codio course setup"
        }, 
        {
            "location": "/courses/lti1_0/#mapping-ab-assignment-to-blackboard-content", 
            "text": "The final mapping step needs to be taken for each individual assignment within Codio. It maps a piece of Blackboard content to a Codio assignment.", 
            "title": "Mapping ab assignment to Blackboard Content"
        }, 
        {
            "location": "/courses/lti1_0/#in-codio_4", 
            "text": "On the main course screen, make sure the  Assignments  tab is selected.  Click the  +  button and select  Add Project .  Select a project that has some autograded assessments. The  My First Project  that you created earlier in the Onboarding Guide has some auto-graded assessments. You can also assign another project but you will need to manually grade the assignment so there are some scores to pass back to the Blackboard gradebook.  Once the assignment has been added to the course, you should click the icon with 3 blue dots and select  LTI Integration URL .  You should copy the LTI integration url to the clipboard by clicking on the field (it will auto copy).", 
            "title": "In Codio"
        }, 
        {
            "location": "/courses/lti1_0/#in-blackboard_1", 
            "text": "We now return to Blackboard complete the mapping.   Make sure you have selected the Blackboard course.  Click  Content  in the left hand menu.  Select or hover over  Build Content  in the menu bar  Select  Web Link .  In the  Web Link Information  section ...  Enter a name for the content  Paste in the  LTI Integration URL  that you just copied to the clipboard from Codio  Check the box  Ths is a link to a tool provider  Select  Yes  for the field  Enable Evaulation  after which more fields will appear  Set the points you want to award for this content (Codio will automatically scale the percentage value it uses to the points you specify here)  Save the content settings.", 
            "title": "In Blackboard"
        }, 
        {
            "location": "/courses/lti1_0/#adding-faculty-and-students_1", 
            "text": "The final step is to add students to your course. This is done from the People tab. We recommend that you add the same test students to Blackboard that you have in Codio. The only field of data that needs to match is the email address. So, look up the Codio test student email addresses and add them to Blackboard in the student role.  Next, you should login to Blackboard as a test student and start the assignment. Please read on to see what happens next, which is dependent.  IMPORTANT  : when you access Codio from Blackboard, this user will become the dominant Codio user in the browser. This means that if you have a Codio session open (say you are logged in as faculty) and open some content from Blackboard as a student, the old Codio session will be invalidated. To get around this, you should think about running your teacher account in a separate browser type or in an incognito window. Just be aware of this when testing.", 
            "title": "Adding faculty and students"
        }, 
        {
            "location": "/courses/lti1_0/#single-sign-in-and-account-creation_1", 
            "text": "It is important to understand how Codio maps Blackboard users to Codio users. The following rules should be understood. If students or faculty access Codio via a Blackboard assignment then Codio will use the Blackboard email address to identify the user.   If the user is not known to Codio then we will sign up the user as a new Codio user in the background and take the user directly into the Codio content. The Blackboard user role will be carried over as well.  If the user is known to Codio then Codio will take them directly into the Codio content without any sign-in required. If they are a Codio user but are not a member of your organization then they will be required to complete a verification via email.", 
            "title": "Single sign-in and account creation"
        }, 
        {
            "location": "/courses/lti1_0/#generating-scores_1", 
            "text": "You should now generate some scores to pass back to Codio. You can do either of the following.   If your assigned Codio assignment has some autograded assessments (simple MCQs will do fine) then access the Codio content as students as answer the questions to generate a score  You can also manually grade the student assignment in Codio. You will need to enter a percentage value here as the LMS/LTI interface requires this.", 
            "title": "Generating scores"
        }, 
        {
            "location": "/courses/lti1_0/#releasing-grades_1", 
            "text": "By default, grades in Codio are neither passed back to the student nor to Blackboard until they are   Marked as complete by either the student or the teacher and  the  Release Grades  switch is enabled.   Once  Release Grades  is enabled, all completed student assignments are automatically sent through.   There are various ways to mark a student's work as complete   The student can do this from either the course dashboard or from the  Education- Mark as Complete  menu in the assignment itself.  The teacher can do the same in the assignment when  viewing students code   The teacher can do the same from the assignment in the course dashboard by hovering in the left side of a student entry and then setting the completed switch.    The teacher can mark all student assignments as completed in one action. This is done by   selecting the assignment in the course  pressing the  Action  button  pressing the  Mark all as Completed  button   Important  : If you are running a staging or test Blackboard environment then you must have a valid SSL certificate on your Blackboard server otherwise grades will not be pass back to Blackboard successfully.", 
            "title": "Releasing grades"
        }, 
        {
            "location": "/courses/lti1_0/#moodle", 
            "text": "Please be sure to check out the  Codio LTI App  which allows for an easy way to integrate and to map Codio course assignments to your LMS system. Moodle added support for LTI\u2122 apps in version 2.2. The  following page  explains how to set up external apps in Moodle.", 
            "title": "Moodle"
        }, 
        {
            "location": "/courses/lti1_0/#authentication-and-account-creation", 
            "text": "Once you have configured the LTI/LMS settings, Moodle manages all aspects of signing in to Codio as well as account creation. All your teachers and students need is a Moodle account.  If a Moodle user has never used Codio before then an account will automatically be created when they access their first Codio course materials.  If a Moodle user already has a Codio account then  provided the email address of their Codio account matches the email address of their LMS account  the same Codio account will be used. If, however, the user has used a different email address within Codio, then a new Codio account will be created that matches that of the Moodle account.", 
            "title": "Authentication and account creation"
        }, 
        {
            "location": "/courses/lti1_0/#setup-configuration-and-usage", 
            "text": "The following instructions are provided as short videos.", 
            "title": "Setup, configuration and usage"
        }, 
        {
            "location": "/courses/lti1_0/#one-time-setup", 
            "text": "You will not have access to the Moodle/LMS features unless you have an educational organization setup as explained in the video.  Important  : Codio needs the User Role, Email Address and Name of the Moodle user in order to work. It is important that you access the LTI security settings and ensure that these three fields are always enabled.  Please note  : Since these videos were created, the Codio keys are now found on the  LTI Integration  tab in your organisation  My Organistaions  area", 
            "title": "One time setup"
        }, 
        {
            "location": "/courses/lti1_0/#mapping-moodle-courses-and-creating-moodle-activities", 
            "text": "This video covers the two key aspects of Moodle- Codio mapping...   mapping your Moodle  Course  to a Codio  course , a one-time only configuration for a new course  creating a Moodle  Activity  within a Course and mapping it to a Codio  Assignment", 
            "title": "Mapping Moodle Courses and creating Moodle Activities"
        }, 
        {
            "location": "/courses/lti1_0/#using-codio-from-moodle-student-view", 
            "text": "Explains how students access Codio from within the LMS.", 
            "title": "Using Codio from Moodle - student view"
        }, 
        {
            "location": "/courses/lti1_0/#using-codio-from-your-lms-teacher-view", 
            "text": "Explains how teachers can access students' Codio projects from the Codio course or from Moodle.", 
            "title": "Using Codio from your LMS - teacher view"
        }, 
        {
            "location": "/courses/lti1_0/#grading-student-work-and-grade-transfer-to-the-moodle-gradebook", 
            "text": "This video shows   how teachers grade student work in Codio  how grades are not released to students either in Codio or the LMS until the teacher says so  how grades are transferred to the Moodle gradebook once the teacher selects the  Release Grades  option", 
            "title": "Grading student work and grade transfer to the Moodle gradebook"
        }, 
        {
            "location": "/courses/lti1_3/", 
            "text": "LTI version 1.3 improves upon version [LTI-1.1] by moving away from the use of OAuth 1.0a-style signing for authentication and towards a new security model, using OpenID Connect, signed JWTs, and OAuth2.0 workflows for authentication. \nAs we have implemented the majority of these improvements already in Codio, it can be better to work with Codio, LT1 1.1 integration especially considering the ease to set up using the \nCodio LTI app\n.\n\n\nFor more information, see \nLearning Tools Interoperability Core Specification\n\n\nCanvas\n\uf0c1\n\n\nThere are a number of ways to integrate Codio with Canvas with LTI 1.3. Check out the following videos to see the option that best suits you.\n\n\nHow to configure lti1.3 tool in Canvas manually - part 1\n\uf0c1\n\n\n\n\n\nHow to configure lti1.3 tool in Canvas manually -part 2\n\uf0c1\n\n\n\n\n\nTool configuration data for canvas lms in canvas.cod.io:\n\uf0c1\n\n\nThese paramaters cannot be found in canvas.cod.io (found by search only)\n\n\n\n\nplatformid\n:                 https://canvas.instructure.com\n\n\nPUBLIC KEYSET URL\n:          https://canvas.cod.io/api/lti/security/jwks\n\n\nACCESS TOKEN URL\n:           https://canvas.cod.io/login/oauth2/token\n\n\nAUTHENTICATION REQUEST URL\n: https://canvas.cod.io/api/lti/authorize_redirect\n\n\n\n\nclientId and deploymentId can be found in tool settings in canvas.cod.io after configuration is completed\n\n\nHow to configure lti1.3 tool in Canvas by paste json object\n\uf0c1\n\n\n\n\n\nHow to configure lti1.3 tool in Canvas by paste json url\n\uf0c1\n\n\n\n\n\nConnecting/mapping assignments\n\uf0c1\n\n\nThere are also a number of ways you can connect/map assignments. Check out the following videos to see the option that best suits you.\n\n\nHow to connect assignment and unit by lti integration url of assignment\n\uf0c1\n\n\n\n\n\nHow to connect assignment and assignment by resource selection preview\n\uf0c1\n\n\n\n\n\nHow to connect assignment and assignment by endpoint url\n\uf0c1\n\n\n\n\n\nHow to connect assignment and assignment with custom param\n\uf0c1\n\n\n\n\n\nIf you require any assistance, please don't hesitate to \ncontact us\n\n\nMoodle\n\uf0c1\n\n\nHow to configure lti1.3 tool in Moodle manually\n\uf0c1\n\n\n\n\n\nConnecting/mapping assignments\n\uf0c1\n\n\nThere are a number of ways you can connect/map assignments. Check out the following videos to see the option that best suits you.\n\n\nHow to connect assignment and assignment by lti integration url of assignment\n\uf0c1\n\n\n\n\n\nHow to connect assignment and assignment by resource selection preview\n\uf0c1\n\n\n\n\n\nHow to connect assignment and assignment by endpoint url\n\uf0c1\n\n\n\n\n\nHow to connect assignment and assignment with custom param\n\uf0c1\n\n\n\n\n\nIf you require any assistance, please don't hesitate to \ncontact us", 
            "title": "Integrating with LTI 1.3 systems"
        }, 
        {
            "location": "/courses/lti1_3/#canvas", 
            "text": "There are a number of ways to integrate Codio with Canvas with LTI 1.3. Check out the following videos to see the option that best suits you.", 
            "title": "Canvas"
        }, 
        {
            "location": "/courses/lti1_3/#how-to-configure-lti13-tool-in-canvas-manually-part-1", 
            "text": "", 
            "title": "How to configure lti1.3 tool in Canvas manually - part 1"
        }, 
        {
            "location": "/courses/lti1_3/#how-to-configure-lti13-tool-in-canvas-manually-part-2", 
            "text": "", 
            "title": "How to configure lti1.3 tool in Canvas manually -part 2"
        }, 
        {
            "location": "/courses/lti1_3/#tool-configuration-data-for-canvas-lms-in-canvascodio", 
            "text": "These paramaters cannot be found in canvas.cod.io (found by search only)   platformid :                 https://canvas.instructure.com  PUBLIC KEYSET URL :          https://canvas.cod.io/api/lti/security/jwks  ACCESS TOKEN URL :           https://canvas.cod.io/login/oauth2/token  AUTHENTICATION REQUEST URL : https://canvas.cod.io/api/lti/authorize_redirect   clientId and deploymentId can be found in tool settings in canvas.cod.io after configuration is completed", 
            "title": "Tool configuration data for canvas lms in canvas.cod.io:"
        }, 
        {
            "location": "/courses/lti1_3/#how-to-configure-lti13-tool-in-canvas-by-paste-json-object", 
            "text": "", 
            "title": "How to configure lti1.3 tool in Canvas by paste json object"
        }, 
        {
            "location": "/courses/lti1_3/#how-to-configure-lti13-tool-in-canvas-by-paste-json-url", 
            "text": "", 
            "title": "How to configure lti1.3 tool in Canvas by paste json url"
        }, 
        {
            "location": "/courses/lti1_3/#connectingmapping-assignments", 
            "text": "There are also a number of ways you can connect/map assignments. Check out the following videos to see the option that best suits you.", 
            "title": "Connecting/mapping assignments"
        }, 
        {
            "location": "/courses/lti1_3/#how-to-connect-assignment-and-unit-by-lti-integration-url-of-assignment", 
            "text": "", 
            "title": "How to connect assignment and unit by lti integration url of assignment"
        }, 
        {
            "location": "/courses/lti1_3/#how-to-connect-assignment-and-assignment-by-resource-selection-preview", 
            "text": "", 
            "title": "How to connect assignment and assignment by resource selection preview"
        }, 
        {
            "location": "/courses/lti1_3/#how-to-connect-assignment-and-assignment-by-endpoint-url", 
            "text": "", 
            "title": "How to connect assignment and assignment by endpoint url"
        }, 
        {
            "location": "/courses/lti1_3/#how-to-connect-assignment-and-assignment-with-custom-param", 
            "text": "If you require any assistance, please don't hesitate to  contact us", 
            "title": "How to connect assignment and assignment with custom param"
        }, 
        {
            "location": "/courses/lti1_3/#moodle", 
            "text": "", 
            "title": "Moodle"
        }, 
        {
            "location": "/courses/lti1_3/#how-to-configure-lti13-tool-in-moodle-manually", 
            "text": "", 
            "title": "How to configure lti1.3 tool in Moodle manually"
        }, 
        {
            "location": "/courses/lti1_3/#connectingmapping-assignments_1", 
            "text": "There are a number of ways you can connect/map assignments. Check out the following videos to see the option that best suits you.", 
            "title": "Connecting/mapping assignments"
        }, 
        {
            "location": "/courses/lti1_3/#how-to-connect-assignment-and-assignment-by-lti-integration-url-of-assignment", 
            "text": "", 
            "title": "How to connect assignment and assignment by lti integration url of assignment"
        }, 
        {
            "location": "/courses/lti1_3/#how-to-connect-assignment-and-assignment-by-resource-selection-preview_1", 
            "text": "", 
            "title": "How to connect assignment and assignment by resource selection preview"
        }, 
        {
            "location": "/courses/lti1_3/#how-to-connect-assignment-and-assignment-by-endpoint-url_1", 
            "text": "", 
            "title": "How to connect assignment and assignment by endpoint url"
        }, 
        {
            "location": "/courses/lti1_3/#how-to-connect-assignment-and-assignment-with-custom-param_1", 
            "text": "If you require any assistance, please don't hesitate to  contact us", 
            "title": "How to connect assignment and assignment with custom param"
        }, 
        {
            "location": "/courses/plagiarism/", 
            "text": "Plagiarism detection allows you to check for code copying and potential cases of cheating between members of a course. With the current version, Codio will compare the code projects of all students within a course for a specific teaching assignment.\n\n\nIf you want to include other reference code to include in the cross comparison, then you will need to create a dummy student account, add that dummy student to the course and upload the reference code as that student for that assignment.\n\n\nPlagiarism detection is best used with programming project assignments rather than Codio authored projects. It will work in both cases but it is really designed to test general coding projects rather than lots of auto-graded assessments within a assignment.\n\n\nCodio does not determine whether cheating has or has not taken place and leaves the decision making up to you.\n\n\nTo run the Plagiarism checker you need to first select the assignment within the course and then press press the actions button next to the assignment name.\n\n\n\n\nCourses\n\uf0c1\n\n\nIn order to use this feature you need to set up a course. If you are not using Codio as your main IDE and want to use only the plagiarism detection feature then you should still follow these instructions and ask your students to upload their code into the project using Git or by uploading files manually.\n\n\nAccess Plagiarism features\n\uf0c1\n\n\nWhen in your course, select your assignment and then click the \nActions\n button (button to the top right of the screen) to show the available actions that includes Plagiarism\n\n\n\n\nRun\n\uf0c1\n\n\nYou can see the \nPlagiarism\n button near in the upper part of the screen. When you press this you are taken to the following screen.\n\n\n\n\nThis screen will show you any plagiarism reports that were run in the past. You can open these if you wish.\n\n\nOn the left you can:\n\n\n\n\nenter a relative path in the workspace to check.\n\n\nupload items to compare against (e.g. previous years information).\n\n\nrestrict the file types that should be checked. It is possible to add multiple file types by pressing the \nAdd Extension\n button.\n\n\n\n\nThese filters can be useful to avoid generating unnecessary noise in your report.\n\n\nOnce you are ready to run a new report, press the \nStart\n button, which will package up all the files and pass them to the detection engine. You are free to leave the screen at this point and return to it later to see whether the report has been generated.\n\n\nCodio will include all code from all students in the report, irrespective of whether the assignment is marked by the student as completed.\n\n\nThe report\n\uf0c1\n\n\nOnce the report has been generated it can be opened by clicking the \nOpen\n button. A typical report is shown below. The interpretation of the report is explained below.\n\n\n\n\nDrilling down\n\uf0c1\n\n\nYou can drill down in various ways. The two most common and useful ways are\n\n\nEdits\n\uf0c1\n\n\nShows the differences between the two or more students with similarities. Things that have been added by one student are shown in green, things removed in red and those that are identical are not shaded at all.\n\n\n\n\nSide-by-side\n\uf0c1\n\n\nThis shows the code of those students with similarities in their code in a side-by-side viewer.\n\n\n\n\nDownloading raw data\n\uf0c1\n\n\nShould you wish to analyse the report data in other software tools, Codio allows you to download a CSV file of the report output. You will find a button \nDownload CSV\n located at the top right of the main report screen.\n\n\nMain report results\n\uf0c1\n\n\nThe main report output is a ranking of the submissions. Several metrics are used, and then an overall rank is produced for each entry. The top line for each entry shows its overall rank as well as the score on each metric. Next to the score is the ranking within that metric.\n\n\n\n\nThe metrics are\n\n\n\n\nPoints\n - every incidence of matching text generates some number of points, and the points metric shows the cumulative score for these entries.\n\n\nRegions\n - counts how many distinct regions (of some maximum size) had matches.\n\n\nCoverage\n - on average, what fraction of the overall text consisted of matching regions.\n\n\nTokens\n - how many words (in absolute numbers) were found in the matching regions.\n\n\nPlacings\n - a weighted average of the other ranks, which is similar to the overall rank, but can sometimes reveal differences.\n\n\n\n\nThe other items for each entry are:\n\n\n\n\nFile names\n - links are provided to the individual files in a match. Next to each file is shown its individual coverage and the number of suspicious tokens out of its total token count.\n\n\nEdits\n - highlights the changes between the two files. This is mostly useful when large portions of the files are similar.\n\n\nSide-by-side\n - the matching files (limit 3) are shown side by side, to make comparison easier\n\n\n\n\nIndividual Files\n\uf0c1\n\n\nThe plagiarism detection works by trying to identify \"rare matches,\" sequences of words that are similar only in a small number of files. In general, the more rare matches two files have in common, the more suspiciously they are viewed.\n\n\nTo convey information about the rare matches, the reports use size, color, and hover text. When you view a file, either individually or side-by-side, you will see that some portions of it are colored, and that the font size changes. Anything colored is a rare match - words that matched between these two (or more) files, but were otherwise rare in the rest. So, to a first-order approximation, the more colored text, the more suspicious similarities.\n\n\nClicking on a colored region in a side-by-side view should bring up the matching region for the other file. In the case that multiple matches exist, the first match may be shown. In rare cases, the corresponding match may be hidden by other matches, so alignment may not occur. The match still exists and is real, but because of presentation decisions, may have become hidden.\n\n\nSize is based on how many files had the rare text. The fewer files that had the rare text, the larger the font size. The largest font is used when only two files have a piece of matching text. If you hover the mouse over a word, you'll get a pop-up showing the type of match and how many files were involved.\n\n\nThe red region typically tries to indicate the \"anchor\" text, the shortest sequence that was rare in a particular match. So, if two students had the same misspelling in an otherwise common sentence, the misspelled words would show up as red, indicating they were the core of the match. However, the entire sentence around them would also be unique because of the misspellings, so the rest of the sentence would be blue. If there are multiple, overlapping anchor regions, additional words may appear in purple next to the red region. Hovering over a word will show an actual match in which the word was involved. Words can be involved in many matches.\n\n\nThere are actually many types of matches. If you hover over any text, you'll also see a parenthetical comment that indicates the type of match.\n\n\n\n\nText/case/space match\n - the text in the region matched, including the case of the text and the spacing. The only differences may be in punctuation that is considered unimportant.\n\n\nText/case match\n - like the text/case/space match, but without match on the spacing.\n\n\nText match\n - the text matches (again, modulo punctuation), but the spacing and case may differ.\n\n\nNo-comment match\n - once the comments have been removed, the text matches (again, modulo punctuation), but the spacing and case may differ.\n\n\nText reordered\n - the same set of words appears in the files, but there's some change in the order of the words\n\n\nNo-comment reordered\n - once the comments have been removed, the same set of words appears in the files, but there's some change in the order of the words\n\n\nStructure/space match\n - the same structure appears in the files, with matching spacing, but the variables/functions may have different names.\n\n\nStructural match\n - the same structure appears in the files, but the variables/functions may have different names.\n\n\nStructure reordered\n - the same structure appears in the files, in a different order, and the variables/functions may have different names.\n\n\n\n\nCodio also highlights trailing whitespace at the ends of lines. When two files match in trailing whitespace, it is often the case that they were copied electronically since trailing whitespace is not normally visible when reading text from a screen or in printouts.\n\n\nInterpreting Matches\n\uf0c1\n\n\nNot all rare matches indicate plagiarism, and it is important to use good judgment to determine whether a result identified by Codio is actually suspicious. In general, it is a good idea to use the side-by-side examination and start at the top-ranked files, working downward until you encounter a series of files that you determine are not actually suspicious.\n\n\nWhen examining files, it is often good to find the corresponding places in two files and see if the differences appear to be coincidental or if it looks like the differences are more than chance. For example, sometimes, two students may have a large block of text highlighted, and this may stem from copying a project description from a course page but making similar grammatical changes. In other cases, students may have very few rare matches scattered in their code, but the matches may come from things like similar words in comments, which are much less constrained than code. In all cases, it is imperative that human judgment is used to determine whether a match from Codio represents plagiarism or not.\n\n\nNote that Codio will not necessarily find all plagiarized text. In particular, it focuses on only rare matches, so if two students have copied code that is very constrained and very similar to other solutions, it will not be detected. However, if there are very few ways to write a solution to the problem, any plagiarism detection will be difficult. In such cases, plagiarized code may show only a few rare matches, which is why human judgment is so important in interpreting the results.", 
            "title": "Plagiarism Checker"
        }, 
        {
            "location": "/courses/plagiarism/#courses", 
            "text": "In order to use this feature you need to set up a course. If you are not using Codio as your main IDE and want to use only the plagiarism detection feature then you should still follow these instructions and ask your students to upload their code into the project using Git or by uploading files manually.", 
            "title": "Courses"
        }, 
        {
            "location": "/courses/plagiarism/#access-plagiarism-features", 
            "text": "When in your course, select your assignment and then click the  Actions  button (button to the top right of the screen) to show the available actions that includes Plagiarism", 
            "title": "Access Plagiarism features"
        }, 
        {
            "location": "/courses/plagiarism/#run", 
            "text": "You can see the  Plagiarism  button near in the upper part of the screen. When you press this you are taken to the following screen.   This screen will show you any plagiarism reports that were run in the past. You can open these if you wish.  On the left you can:   enter a relative path in the workspace to check.  upload items to compare against (e.g. previous years information).  restrict the file types that should be checked. It is possible to add multiple file types by pressing the  Add Extension  button.   These filters can be useful to avoid generating unnecessary noise in your report.  Once you are ready to run a new report, press the  Start  button, which will package up all the files and pass them to the detection engine. You are free to leave the screen at this point and return to it later to see whether the report has been generated.  Codio will include all code from all students in the report, irrespective of whether the assignment is marked by the student as completed.", 
            "title": "Run"
        }, 
        {
            "location": "/courses/plagiarism/#the-report", 
            "text": "Once the report has been generated it can be opened by clicking the  Open  button. A typical report is shown below. The interpretation of the report is explained below.", 
            "title": "The report"
        }, 
        {
            "location": "/courses/plagiarism/#drilling-down", 
            "text": "You can drill down in various ways. The two most common and useful ways are", 
            "title": "Drilling down"
        }, 
        {
            "location": "/courses/plagiarism/#edits", 
            "text": "Shows the differences between the two or more students with similarities. Things that have been added by one student are shown in green, things removed in red and those that are identical are not shaded at all.", 
            "title": "Edits"
        }, 
        {
            "location": "/courses/plagiarism/#side-by-side", 
            "text": "This shows the code of those students with similarities in their code in a side-by-side viewer.", 
            "title": "Side-by-side"
        }, 
        {
            "location": "/courses/plagiarism/#downloading-raw-data", 
            "text": "Should you wish to analyse the report data in other software tools, Codio allows you to download a CSV file of the report output. You will find a button  Download CSV  located at the top right of the main report screen.", 
            "title": "Downloading raw data"
        }, 
        {
            "location": "/courses/plagiarism/#main-report-results", 
            "text": "The main report output is a ranking of the submissions. Several metrics are used, and then an overall rank is produced for each entry. The top line for each entry shows its overall rank as well as the score on each metric. Next to the score is the ranking within that metric.   The metrics are   Points  - every incidence of matching text generates some number of points, and the points metric shows the cumulative score for these entries.  Regions  - counts how many distinct regions (of some maximum size) had matches.  Coverage  - on average, what fraction of the overall text consisted of matching regions.  Tokens  - how many words (in absolute numbers) were found in the matching regions.  Placings  - a weighted average of the other ranks, which is similar to the overall rank, but can sometimes reveal differences.   The other items for each entry are:   File names  - links are provided to the individual files in a match. Next to each file is shown its individual coverage and the number of suspicious tokens out of its total token count.  Edits  - highlights the changes between the two files. This is mostly useful when large portions of the files are similar.  Side-by-side  - the matching files (limit 3) are shown side by side, to make comparison easier", 
            "title": "Main report results"
        }, 
        {
            "location": "/courses/plagiarism/#individual-files", 
            "text": "The plagiarism detection works by trying to identify \"rare matches,\" sequences of words that are similar only in a small number of files. In general, the more rare matches two files have in common, the more suspiciously they are viewed.  To convey information about the rare matches, the reports use size, color, and hover text. When you view a file, either individually or side-by-side, you will see that some portions of it are colored, and that the font size changes. Anything colored is a rare match - words that matched between these two (or more) files, but were otherwise rare in the rest. So, to a first-order approximation, the more colored text, the more suspicious similarities.  Clicking on a colored region in a side-by-side view should bring up the matching region for the other file. In the case that multiple matches exist, the first match may be shown. In rare cases, the corresponding match may be hidden by other matches, so alignment may not occur. The match still exists and is real, but because of presentation decisions, may have become hidden.  Size is based on how many files had the rare text. The fewer files that had the rare text, the larger the font size. The largest font is used when only two files have a piece of matching text. If you hover the mouse over a word, you'll get a pop-up showing the type of match and how many files were involved.  The red region typically tries to indicate the \"anchor\" text, the shortest sequence that was rare in a particular match. So, if two students had the same misspelling in an otherwise common sentence, the misspelled words would show up as red, indicating they were the core of the match. However, the entire sentence around them would also be unique because of the misspellings, so the rest of the sentence would be blue. If there are multiple, overlapping anchor regions, additional words may appear in purple next to the red region. Hovering over a word will show an actual match in which the word was involved. Words can be involved in many matches.  There are actually many types of matches. If you hover over any text, you'll also see a parenthetical comment that indicates the type of match.   Text/case/space match  - the text in the region matched, including the case of the text and the spacing. The only differences may be in punctuation that is considered unimportant.  Text/case match  - like the text/case/space match, but without match on the spacing.  Text match  - the text matches (again, modulo punctuation), but the spacing and case may differ.  No-comment match  - once the comments have been removed, the text matches (again, modulo punctuation), but the spacing and case may differ.  Text reordered  - the same set of words appears in the files, but there's some change in the order of the words  No-comment reordered  - once the comments have been removed, the same set of words appears in the files, but there's some change in the order of the words  Structure/space match  - the same structure appears in the files, with matching spacing, but the variables/functions may have different names.  Structural match  - the same structure appears in the files, but the variables/functions may have different names.  Structure reordered  - the same structure appears in the files, in a different order, and the variables/functions may have different names.   Codio also highlights trailing whitespace at the ends of lines. When two files match in trailing whitespace, it is often the case that they were copied electronically since trailing whitespace is not normally visible when reading text from a screen or in printouts.", 
            "title": "Individual Files"
        }, 
        {
            "location": "/courses/plagiarism/#interpreting-matches", 
            "text": "Not all rare matches indicate plagiarism, and it is important to use good judgment to determine whether a result identified by Codio is actually suspicious. In general, it is a good idea to use the side-by-side examination and start at the top-ranked files, working downward until you encounter a series of files that you determine are not actually suspicious.  When examining files, it is often good to find the corresponding places in two files and see if the differences appear to be coincidental or if it looks like the differences are more than chance. For example, sometimes, two students may have a large block of text highlighted, and this may stem from copying a project description from a course page but making similar grammatical changes. In other cases, students may have very few rare matches scattered in their code, but the matches may come from things like similar words in comments, which are much less constrained than code. In all cases, it is imperative that human judgment is used to determine whether a match from Codio represents plagiarism or not.  Note that Codio will not necessarily find all plagiarized text. In particular, it focuses on only rare matches, so if two students have copied code that is very constrained and very similar to other solutions, it will not be detected. However, if there are very few ways to write a solution to the problem, any plagiarism detection will be difficult. In such cases, plagiarized code may show only a few rare matches, which is why human judgment is so important in interpreting the results.", 
            "title": "Interpreting Matches"
        }, 
        {
            "location": "/courses/settings-actions/", 
            "text": "Page\n\uf0c1\n\n\nLayout\n\uf0c1\n\n\nYou can choose from a variety of panel layouts for each page of content.\n\n\n\n\nThe layouts we currently offer can be found in the dropdown list.\n\n\nClick here\n for information on how to reference these panels when auto opening code files, url previews or terminal windows.\n\n\nThe top-most and default entry in the Layout dropdown is \nPrevious\n. This means it will use the same panel layout as specified on the previous page.\n\n\n\n\nShow/Hide Folders\n\uf0c1\n\n\nYour content will often want to show code samples. Codio's recommended approach is to put each set of code samples into a dedicated folder. Then, using the page settings, you can specify that folder. All non-specified folders are hidden from view in the file tree.\n\n\nThe benefit of hiding folders is that the student is not distracted by a large list of folders and files that are not relevant to the topic your are explaining.\n\n\nFull File Tree:\n\uf0c1\n\n\n\n\nHiding of Folders:\n\uf0c1\n\n\n\n\nDefining folders\n\uf0c1\n\n\nTo define which folders to show make sure your page is selected. Next, in the \nShow Folders\n field, specify the folder or folders which should be shown in the file tree. Use the \n;\n character to separate multiple folders.\n\n\n\n\nIf you have several pages that show the same folders, you only need define the folders on the first page of the set of pages. All subsequent pages will use the same \nShow Folders\n setting until a new one is encountered.\n\n\nContent Type\n\uf0c1\n\n\nYou can specify whether the page content type is markdown (strongly recommended) or HTML. If you choose HTML, then you will need to set the page HTML header and footer in \nGlobal Settings\n.\n\n\n\n\nTeacher only content\n\uf0c1\n\n\nIf this switch is enabled then the page contents will not be show to students. Teachers will be able to see it when they select \nOpen as teacher\n from a assignment in a course.\n\n\nLearning Objectives\n\uf0c1\n\n\nThis is a tag field that can be useful for data analysis.\n\n\nOpen tabs\n\uf0c1\n\n\nYou can automatically perform any of the following actions when a page is shown:\n\n\n\n\nReconfigure the overall IDE panel layout.\n\n\nOpen files.\n\n\nOpen a url preview including external websites.\n\n\nOpen a terminal window and optionally run a terminal command.\n\n\nSelect lines you wish to highlight within each file.\n\n\n\n\nYou should also be aware that you can achieve the same actions from Markdown directives on a page. \nClick here\n for details.\n\n\nPage - Close Tabs\n\uf0c1\n\n\nEnable this to close all panels open from the previous page.\n\n\n\n\n\n\nOpen Tabs\n\uf0c1\n\n\n\n\nFiles can be opened automatically to present the student with relevant files.\n\n\nThe \nAdd Tab\n button allows you to create multiple lines into your configuration to address most scenarios you are likely to encounter.\n\n\nYou can also drag and drop files in from your project file tree to the page to add them to the \nOpen Tabs\n section so that file will be opened in a tab for the reader as well as Drag and Drop on the Open Tabs area in the content.\n\n\nPlease note:\n image files dragged in to a page will be automatically tagged to display within the content rather than in a new panel. If you wish to have an image file open in a panel, then you would need to add it directly in the Open Tabs area. You can also drag/drop from the file tree. The correct path to the file will be included.\n\n\nOpening Files\n\uf0c1\n\n\nTo open files, select the file type and enter the file name, including the path to the file if not in the root of the project workspace.\n\n\n\n\nTo open multiple files in the same panel, enter in the following format:\n\n\nindex.html, main.css\n\n\n\n\nPreviewing\n\uf0c1\n\n\nTo preview your project, select the \nPreview\n Type. If you wish to show a workspace or external website page, use the \nPreview\n option and enter the appropriate URL.\n\n\n\n\nPlease note:\n If the URL you are previewing does not allow embedding in an \niframe\n, then you won't be able to use \nhttps\n addresses. You would have to use an \nhttp\n address instead, in which case it will automatically open in an new browser tab and not within Codio.\n\n\nOpening the terminal and running system commands\n\uf0c1\n\n\nTo open a terminal window, select the \nTerminal\n option.\n\n\nYou can also specify a terminal command to run when a section is displayed. For example, your content may run bash scripts to copy files into the root of your project from the \n/.guides\n folder (which is hidden when content is running) at a certain point in your content.\n\n\n\n\nYou can also specify system commands in a new terminal window like so:\n\n\n\n\nHighlighting lines in your code\n\uf0c1\n\n\nTo highlight one or more lines within an auto-opened file, select the \nHighlight\n option and then\n\n\n\n\nEnter a piece of reference text, contained within your target file, into the \nReference ...\n field\n\n\nSpecify the number of lines, from that reference point, you want to highlight\n\n\n\n\n\n\nUsing reference text rather than a line number means that if you insert anything into your file in the future, Codio is able to adjust the highlighted block based on the reference text. If you insert or remove lines within the block then you would need to adjust the line count.\n\n\nIf there is any potential ambiguity with this approach, simply insert a comment which is guaranteed unique and reference that.\n\n\nAny combinations are acceptable and they will be opened in the order specified.\n\n\n\n\nVisualiser\n\uf0c1\n\n\nCodio supports \nPython Tutor\n, allowing students to overcome a fundamental barrier to learning programming: understanding what happens as the computer executes each line of a program's source code.\nSelect \nVisualiser\n and enter the path to your file.\n\n\nSupported languages:\n\n\n\n\nPython\n\n\nJava\n\n\nJavaScript\n\n\nTypeScript\n\n\nRuby\n\n\nC\n\n\nC++\n\n\n\n\nStudents can visualise what the computer is doing step-by-step as it executes those programs.\n\n\n\n\nExamples\n\uf0c1\n\n\nPython\n\n\nnested = ['spam', 1, ['Brie', 'Roquefort', 'Pol l Veq'], [1, 2, 3]]\nfor temp in nested:\n  print(temp)\n\n\n\n\n\n\nJava\n\n\npublic static void countdown(int n) {\n  if (n == 0) {\n    System.out.println(\nBlastoff!\n);\n  } else {\n    System.out.println(n);\n    countdown(n - 1);\n  }\n}\n\n\n\n\n\n\nFor more information and examples see \nPython Tutor\n.\n\n\n\n\nSpecifying the panel number\n\uf0c1\n\n\nIf your \nlayout\n for this page involves multiple panels, then you can also specify the panel number to display the file in.\n\n\n\n\nIf you leave the panel field empty, then the default panel will be chosen, which is the same as 0.\n\n\nThe panel order is left to right and then top to bottom and the last of all, the filetree (which you would rarely want to use).\n\n\nImportant:\n The first panel is 0, not 1.\n\n\nAssessments\n\uf0c1\n\n\nThis settings item is rarely used. It shows a complete reference of all \nassessments\n in the book or guide. The usual place from which you edit assessments is the assessments button at the top of the page.\n\n\n\n\nIf there are any assessments that had been created but subsequently deleted, they will be highlighted in red. You can then delete them from the project.\n\n\nMedia\n\uf0c1\n\n\nThis setting allows you to add a soundtrack to your page, that plays when the page is shown. It can trigger opening of files, terminal windows and preview windows at designated times within the track.\n\n\nClick here\n for details on how to use this feature.\n\n\nGlobal\n\uf0c1\n\n\nThe settings on this page apply to the entire guide or book.\n\n\n\n\nScripts\n\uf0c1\n\n\nThis allows you to include the path and file name of a script file from a page using an HTML \nsrc\n tag. Provide one script path per line.\n\n\nHTML header and footer\n\uf0c1\n\n\nThis is used for any pages which are designated in the \npage settings\n as an HTML page. The header/footer will be placed before/after the HTML page content.\n\n\nTheme\n\uf0c1\n\n\nThere is currently only a single theme.\n\n\nLexikon Topic\n\uf0c1\n\n\nIf you want a lexikon topic to appear you should place the name of the Lexikon topic here.\n\n\nSuppress page numbering\n\uf0c1\n\n\nRemoves any page numbers from the table of contents when the content is shown.\n\n\nHide Menu\n\uf0c1\n\n\nHides the Codio menu. You should be aware that this will prohibit access to functions that are accessible via the menu.\n\n\nAllow Guide to be closed\n\uf0c1\n\n\nAllows students to close the guide content. The content can be restarted by selecting the 'start guide' icon in the file tree:\n\n\n\nUse Mark as Complete\n\uf0c1\n\n\nFor a discussion on the use of the this feature, please \nclick here\n.\n\n\nThis setting is enabled by default and will show students a button at the end of the assignment, from their \ndashboard\n and from \nEducation\n menu in the IDE they can select to mark as complete.\n\n\nIf you have set the \nassignment Duration\n 'On assignment End' action to mark as complete or disable and mark as complete, the assignment will automatically be marked as complete when the end date/time of the assignment is reached and you can elect to suppress the ability for students to have to mark their assignments as complete by disabling this setting.\n\n\nUse Submit Buttons\n\uf0c1\n\n\nFor a discussion on the use of the this feature, please \nclick here\n.\n\n\nThis is enabled by default and shows students a button for \nassessments\n for them to submit their answers.\nIf you have set the \nAssignment Duration\n, when the end of assignment duration date/time is reached, all answers to the assessments will be automatically submitted\n\n\n\n\nCollapsed on Start\n\uf0c1\n\n\nEnable this to collapse the guides pane in the assignment/project when the \nlayout\n is not \n1 Panel\n. Performs similar task to the \ncollapse\n button in playmode.\n\n\nThe guides can be reopened by clicking the hamburger icon:\n\n\n\nHide Sections Toggle\n\uf0c1\n\n\nEnable this to hide the option for students to switch sections using the Section list hamburger icon\n\n\nHide Back to Dashboard button\n\uf0c1\n\n\nEnable this to hide the 'Back to Dashboard' button that by default will show to the students at the end of the assignment\n\n\n\n\nProtect Layout\n\uf0c1\n\n\nEnable this to prevent tabs being opened or closed by students in the assignment", 
            "title": "Guides Settings and Page actions"
        }, 
        {
            "location": "/courses/settings-actions/#page", 
            "text": "", 
            "title": "Page"
        }, 
        {
            "location": "/courses/settings-actions/#layout", 
            "text": "You can choose from a variety of panel layouts for each page of content.   The layouts we currently offer can be found in the dropdown list.  Click here  for information on how to reference these panels when auto opening code files, url previews or terminal windows.  The top-most and default entry in the Layout dropdown is  Previous . This means it will use the same panel layout as specified on the previous page.", 
            "title": "Layout"
        }, 
        {
            "location": "/courses/settings-actions/#showhide-folders", 
            "text": "Your content will often want to show code samples. Codio's recommended approach is to put each set of code samples into a dedicated folder. Then, using the page settings, you can specify that folder. All non-specified folders are hidden from view in the file tree.  The benefit of hiding folders is that the student is not distracted by a large list of folders and files that are not relevant to the topic your are explaining.", 
            "title": "Show/Hide Folders"
        }, 
        {
            "location": "/courses/settings-actions/#full-file-tree", 
            "text": "", 
            "title": "Full File Tree:"
        }, 
        {
            "location": "/courses/settings-actions/#hiding-of-folders", 
            "text": "", 
            "title": "Hiding of Folders:"
        }, 
        {
            "location": "/courses/settings-actions/#defining-folders", 
            "text": "To define which folders to show make sure your page is selected. Next, in the  Show Folders  field, specify the folder or folders which should be shown in the file tree. Use the  ;  character to separate multiple folders.   If you have several pages that show the same folders, you only need define the folders on the first page of the set of pages. All subsequent pages will use the same  Show Folders  setting until a new one is encountered.", 
            "title": "Defining folders"
        }, 
        {
            "location": "/courses/settings-actions/#content-type", 
            "text": "You can specify whether the page content type is markdown (strongly recommended) or HTML. If you choose HTML, then you will need to set the page HTML header and footer in  Global Settings .", 
            "title": "Content Type"
        }, 
        {
            "location": "/courses/settings-actions/#teacher-only-content", 
            "text": "If this switch is enabled then the page contents will not be show to students. Teachers will be able to see it when they select  Open as teacher  from a assignment in a course.", 
            "title": "Teacher only content"
        }, 
        {
            "location": "/courses/settings-actions/#learning-objectives", 
            "text": "This is a tag field that can be useful for data analysis.", 
            "title": "Learning Objectives"
        }, 
        {
            "location": "/courses/settings-actions/#open-tabs", 
            "text": "You can automatically perform any of the following actions when a page is shown:   Reconfigure the overall IDE panel layout.  Open files.  Open a url preview including external websites.  Open a terminal window and optionally run a terminal command.  Select lines you wish to highlight within each file.   You should also be aware that you can achieve the same actions from Markdown directives on a page.  Click here  for details.", 
            "title": "Open tabs"
        }, 
        {
            "location": "/courses/settings-actions/#page-close-tabs", 
            "text": "Enable this to close all panels open from the previous page.", 
            "title": "Page - Close Tabs"
        }, 
        {
            "location": "/courses/settings-actions/#open-tabs_1", 
            "text": "Files can be opened automatically to present the student with relevant files.  The  Add Tab  button allows you to create multiple lines into your configuration to address most scenarios you are likely to encounter.  You can also drag and drop files in from your project file tree to the page to add them to the  Open Tabs  section so that file will be opened in a tab for the reader as well as Drag and Drop on the Open Tabs area in the content.  Please note:  image files dragged in to a page will be automatically tagged to display within the content rather than in a new panel. If you wish to have an image file open in a panel, then you would need to add it directly in the Open Tabs area. You can also drag/drop from the file tree. The correct path to the file will be included.", 
            "title": "Open Tabs"
        }, 
        {
            "location": "/courses/settings-actions/#opening-files", 
            "text": "To open files, select the file type and enter the file name, including the path to the file if not in the root of the project workspace.   To open multiple files in the same panel, enter in the following format:  index.html, main.css", 
            "title": "Opening Files"
        }, 
        {
            "location": "/courses/settings-actions/#previewing", 
            "text": "To preview your project, select the  Preview  Type. If you wish to show a workspace or external website page, use the  Preview  option and enter the appropriate URL.   Please note:  If the URL you are previewing does not allow embedding in an  iframe , then you won't be able to use  https  addresses. You would have to use an  http  address instead, in which case it will automatically open in an new browser tab and not within Codio.", 
            "title": "Previewing"
        }, 
        {
            "location": "/courses/settings-actions/#opening-the-terminal-and-running-system-commands", 
            "text": "To open a terminal window, select the  Terminal  option.  You can also specify a terminal command to run when a section is displayed. For example, your content may run bash scripts to copy files into the root of your project from the  /.guides  folder (which is hidden when content is running) at a certain point in your content.   You can also specify system commands in a new terminal window like so:", 
            "title": "Opening the terminal and running system commands"
        }, 
        {
            "location": "/courses/settings-actions/#highlighting-lines-in-your-code", 
            "text": "To highlight one or more lines within an auto-opened file, select the  Highlight  option and then   Enter a piece of reference text, contained within your target file, into the  Reference ...  field  Specify the number of lines, from that reference point, you want to highlight    Using reference text rather than a line number means that if you insert anything into your file in the future, Codio is able to adjust the highlighted block based on the reference text. If you insert or remove lines within the block then you would need to adjust the line count.  If there is any potential ambiguity with this approach, simply insert a comment which is guaranteed unique and reference that.  Any combinations are acceptable and they will be opened in the order specified.", 
            "title": "Highlighting lines in your code"
        }, 
        {
            "location": "/courses/settings-actions/#visualiser", 
            "text": "Codio supports  Python Tutor , allowing students to overcome a fundamental barrier to learning programming: understanding what happens as the computer executes each line of a program's source code.\nSelect  Visualiser  and enter the path to your file.  Supported languages:   Python  Java  JavaScript  TypeScript  Ruby  C  C++   Students can visualise what the computer is doing step-by-step as it executes those programs.", 
            "title": "Visualiser"
        }, 
        {
            "location": "/courses/settings-actions/#examples", 
            "text": "Python  nested = ['spam', 1, ['Brie', 'Roquefort', 'Pol l Veq'], [1, 2, 3]]\nfor temp in nested:\n  print(temp)   Java  public static void countdown(int n) {\n  if (n == 0) {\n    System.out.println( Blastoff! );\n  } else {\n    System.out.println(n);\n    countdown(n - 1);\n  }\n}   For more information and examples see  Python Tutor .", 
            "title": "Examples"
        }, 
        {
            "location": "/courses/settings-actions/#specifying-the-panel-number", 
            "text": "If your  layout  for this page involves multiple panels, then you can also specify the panel number to display the file in.   If you leave the panel field empty, then the default panel will be chosen, which is the same as 0.  The panel order is left to right and then top to bottom and the last of all, the filetree (which you would rarely want to use).  Important:  The first panel is 0, not 1.", 
            "title": "Specifying the panel number"
        }, 
        {
            "location": "/courses/settings-actions/#assessments", 
            "text": "This settings item is rarely used. It shows a complete reference of all  assessments  in the book or guide. The usual place from which you edit assessments is the assessments button at the top of the page.   If there are any assessments that had been created but subsequently deleted, they will be highlighted in red. You can then delete them from the project.", 
            "title": "Assessments"
        }, 
        {
            "location": "/courses/settings-actions/#media", 
            "text": "This setting allows you to add a soundtrack to your page, that plays when the page is shown. It can trigger opening of files, terminal windows and preview windows at designated times within the track.  Click here  for details on how to use this feature.", 
            "title": "Media"
        }, 
        {
            "location": "/courses/settings-actions/#global", 
            "text": "The settings on this page apply to the entire guide or book.", 
            "title": "Global"
        }, 
        {
            "location": "/courses/settings-actions/#scripts", 
            "text": "This allows you to include the path and file name of a script file from a page using an HTML  src  tag. Provide one script path per line.", 
            "title": "Scripts"
        }, 
        {
            "location": "/courses/settings-actions/#html-header-and-footer", 
            "text": "This is used for any pages which are designated in the  page settings  as an HTML page. The header/footer will be placed before/after the HTML page content.", 
            "title": "HTML header and footer"
        }, 
        {
            "location": "/courses/settings-actions/#theme", 
            "text": "There is currently only a single theme.", 
            "title": "Theme"
        }, 
        {
            "location": "/courses/settings-actions/#lexikon-topic", 
            "text": "If you want a lexikon topic to appear you should place the name of the Lexikon topic here.", 
            "title": "Lexikon Topic"
        }, 
        {
            "location": "/courses/settings-actions/#suppress-page-numbering", 
            "text": "Removes any page numbers from the table of contents when the content is shown.", 
            "title": "Suppress page numbering"
        }, 
        {
            "location": "/courses/settings-actions/#hide-menu", 
            "text": "Hides the Codio menu. You should be aware that this will prohibit access to functions that are accessible via the menu.", 
            "title": "Hide Menu"
        }, 
        {
            "location": "/courses/settings-actions/#allow-guide-to-be-closed", 
            "text": "Allows students to close the guide content. The content can be restarted by selecting the 'start guide' icon in the file tree:", 
            "title": "Allow Guide to be closed"
        }, 
        {
            "location": "/courses/settings-actions/#use-mark-as-complete", 
            "text": "For a discussion on the use of the this feature, please  click here .  This setting is enabled by default and will show students a button at the end of the assignment, from their  dashboard  and from  Education  menu in the IDE they can select to mark as complete.  If you have set the  assignment Duration  'On assignment End' action to mark as complete or disable and mark as complete, the assignment will automatically be marked as complete when the end date/time of the assignment is reached and you can elect to suppress the ability for students to have to mark their assignments as complete by disabling this setting.", 
            "title": "Use Mark as Complete"
        }, 
        {
            "location": "/courses/settings-actions/#use-submit-buttons", 
            "text": "For a discussion on the use of the this feature, please  click here .  This is enabled by default and shows students a button for  assessments  for them to submit their answers.\nIf you have set the  Assignment Duration , when the end of assignment duration date/time is reached, all answers to the assessments will be automatically submitted", 
            "title": "Use Submit Buttons"
        }, 
        {
            "location": "/courses/settings-actions/#collapsed-on-start", 
            "text": "Enable this to collapse the guides pane in the assignment/project when the  layout  is not  1 Panel . Performs similar task to the  collapse  button in playmode.  The guides can be reopened by clicking the hamburger icon:", 
            "title": "Collapsed on Start"
        }, 
        {
            "location": "/courses/settings-actions/#hide-sections-toggle", 
            "text": "Enable this to hide the option for students to switch sections using the Section list hamburger icon", 
            "title": "Hide Sections Toggle"
        }, 
        {
            "location": "/courses/settings-actions/#hide-back-to-dashboard-button", 
            "text": "Enable this to hide the 'Back to Dashboard' button that by default will show to the students at the end of the assignment", 
            "title": "Hide Back to Dashboard button"
        }, 
        {
            "location": "/courses/settings-actions/#protect-layout", 
            "text": "Enable this to prevent tabs being opened or closed by students in the assignment", 
            "title": "Protect Layout"
        }, 
        {
            "location": "/dashboard/account/", 
            "text": "Account settings overview\n\uf0c1\n\n\nA brief overview of interesting account settings.\n\n\n\n\n\n-\n\n\nCookie Requirements\n\uf0c1\n\n\nIn order for Codio to work correctly you need to allow cookies. Check our \nPrivacy Policy\n for more information about cookies.\n\n\nThe following information explains how to enable cookies for all sites. You can also enable them only for certain sites, which is not explained below.\n\n\nTo enable cookies in Chrome:\n\uf0c1\n\n\nIn your browser enter: \nchrome://settings/content/cookies\n\nand\n\n\n\n\nenable \nAllow sites to save and read cookie data (recommended)\n\n\ndisable \nBlock third party cookies\n\n\n\n\n\n\nImage from Chrome Version 59.0.3071.86 (Official Build) (64-bit)\n\n\nTo enable cookies in Firefox:\n\uf0c1\n\n\nIn your browser enter: \nabout:preferences#privacy\n\nSelect \nUser custom settings for history\n from the drop down in the History section and\n\n\n\n\ncheck \nAccept cookies from sites\n\n\nselect 'Always' in the drop down for \nAccept third-party cookies\n\n\n\n\n\n\nImage from Firefox 55.0.2 (64-bit)\n\n\nTo enable cookies in Safari:\n\uf0c1\n\n\nIn your browser go to \nSafari\n Preferences\n\n\n\nSelect the \nPrivacy\n tab and ensure check \nBlock all cookies\n and \nPrevent cross-site tracking\n are not checked.\n\n\n\n\nIf using an earlier version of Safari, check \nAlways Allow\n in the Cookies and website data section\n\n\nImage from Safari 12.0 on macOS Sierra 10.12.6\n\n\nFirewall and network settings\n\uf0c1\n\n\nCodio can usually run from anywhere in your browser without any special settings. However, some school or university firewall settings may require special configuration.\n\n\nThis page contains information for\n\n\n\n\nSchool network system administrators\n\n\nStudents and teachers who may be using Codio from home\n\n\n\n\nFirewall settings\n\uf0c1\n\n\nThe following is a list of ports and URLs that Codio access from time to time. We have put these in priority order.\n\n\n\n\n*.codio.com\n the main Codio site and application\n\n\n*.codio.io\n domains that are auto-generated for each user project\n\n\napi.keen.io\n statistics gathering to measure student time spent in units   (stats)\n\n\n*.typekit.net\n web fonts\n\n\nfonts.gstatic.com\n web fonts\n\n\nfast.fonts.net\n web fonts\n\n\n*.cloudfront.net\n our CDN for speeding up static content\n\n\n.youtube.com \n \n.vimeo.com\n for video's included in Course content\n\n\n\n\ngravatar.com\n used for user gravatars (pictures)\n\n\n\n\n\n\n.intercom.io__, \ncdnjs.cloudflare.com\n and __\n.pubnub.com\n are highly recommended as they relate to  the help and support application (Intercom) built into Codio.\n\n\n\n\n\n\nIf your institution blocks access to YouTube as a general rule, your IT department can whitelist YouTube access that only allows access to content from registered and accredited educational content repositories. See \nhere\n for more information on this.\n\n\nPorts\n\uf0c1\n\n\nWe recommend opening the following ports\n\n\n\n\n80 and 443\n for standard communications\n\n\n3000\n is a standard port for user projects\n\n\n9500\n is a standard SSL port for user projects\n\n\n\n\nWorking from home\n\uf0c1\n\n\nSometimes the anti-virus/firewall settings on your personal devices may interfere with home usage and make the experience slow.\n\n\nYou should check your settings and ensure that items in the above \nFirewall settings\n list are added to your exclusion list.\n\n\nConnectivity Test\n\uf0c1\n\n\nIf you continue to experience difficulties, visit the \nConnection Diagnostics\n page and send us back the generated output going to \nHelp \n Support/Contact Us\n and attach the output file using the paperclip icon)\n\n\n\nBrowser support\n\uf0c1\n\n\nCodio is best experienced on the very latest browsers, in particular Chrome, but should run fine on the following browsers:\n\n\n\n\nChrome\n 21 or later\n\n\nFirefox\n - 22 or later\n\n\nIE\n - 10 or later\n\n\nSafari\n - 6 or later\n\n\nOpera\n - 15 or later\n\n\n\n\nIf using \nSafari\n and accessing Codio via an \nLMS\n, disable \"Prevent cross-site tracking\" to ensure access.\n\n\n\n\nIf you are experiencing any issue where Codio will not run as it should, please send an email to help@codio.com.\n\n\n\n\nDisable IE Compatibility View\n\uf0c1\n\n\nIt could happen that even if you have Internet Explorer 10 or a later version, we detect a older version of the browser.\n\n\nThis is due to the \nCompatibility Mode\n of the Browser which enables old features we no longer support.\n\n\nTo disable this option, please go to \nTools \u2192 F12 developer tools\n and be sure that in \nBrowser Mode\n is selected \n\u00abInternet Explorer 10\u00bb\n and in \nDocument Mode\n is selected \n\u00abStandards (Page default)\u00bb\n.\n\n\nResetting student passwords\n\uf0c1\n\n\nYou can change a student's password in the following way:\n\n\n\n\nFrom the \nClasses\n area, click on your class to open it.\n\n\n\n\n\n\n\n\nClick on the \nStudents\n tab, top centre of your screen.\n\n\n\n\n\n\n\n\nYou will see all students in your class displayed on this screen. Find the student whose password needs to be changed and click on the blue triple dot icon to the right of their name. Choose \nChange students password\n and follow the steps to reset.\n\n\n\n\nForgot your password\n\uf0c1\n\n\nIf you have forgotten your password, you should use the \nlost password\n link on the log-in page to reset your password automatically via email.\n\n\nFor School and University students only:\n If you do not have access to the email address you used in creating your Codio account and you are a student, please contact your teacher. He or she will be able to reset your password for you.\n\n\nIf you wish to change your password (you should also do this if you forgot your password and it was reset) follow these steps:\n\n\n\n\n\n\nClick on your name and gravatar (bottom left of screen)\n\n\n\n\n\n\n\nFrom the options along the top of the page, choose \nAccount\n\n\n\n\n\n\n\n\nAbout halfway down the \nAccount\n page is the \nChange Password\n area. The student should enter their new password, and then click \nUpdate password\n.\n\n\n\n\n\n\n\nPublic key\n\uf0c1\n\n\nCodio automatically generates a public key for your account. This key can then be used whenever Codio attempts communication with an external server that requires public/private key based authentication such as SSH or SFTP access.\n\n\n\n\nWhere is it used?\n\uf0c1\n\n\nCodio makes use of the public key in the following places\n\n\n\n\nSFTP deployment target\n\n\nRSYNC deployment target\n\n\nSSH Terminal\n\n\nGit\n\n\n\n\nIn both cases, you will need to install the public key onto the remote system. In the case of SFTP, you should know how to do this already.\n\n\nAdding your public key to a remote server\n\uf0c1\n\n\nIf you want to get your Codio public key onto a remote server, just press the Upload Public Key button. You enter your user credentials on the remote and Codio will get it installed in the \n~/.ssh/authorized_keys\n file.\n\n\n\n\nAdding your public key to GitHub or BitBucket\n\uf0c1\n\n\nIf you are working with GitHub or BitBucket, then you need to install the public key. Codio makes this very easy for you. Goto \nCodio\nAccount\n and select GitHub or BitBucket tab and select 'Upload your public key to GitHub/BitBucket'\n\n\n\n\nYou will be redirected to your GitHub/BitBucket account and asked to authorise the application\n\n\nOn accepting this you will then be redirected back to your Codio account.\n\n\nGitHub\n\uf0c1\n\n\nThe GitHub tab lets you associate your account with your GitHub account and where you can upload your public key. See \nSSH Key\n\n\n\n\nYou can sign in with GitHub as well.\n\n\nBitBucket\n\uf0c1\n\n\nThe BitBucket tab lets you associate your account with your BitBucket account and where you can upload your public key. See \nSSH Key\n\n\nYou can sign in with BitBucket as well.\n\n\nChange account details\n\uf0c1\n\n\nYou can change the following settings\n\n\n\n\nAccount name\n - changing this will not affect the URL associated with your account name. This name is for display and communication purposes only.\n\n\nEmail address\n\n\n\n\n\n\nDelete your account\n\uf0c1\n\n\nYou can delete your account at any time from the \nCodio \n Account\n menu item and going to the \nAccount\n tab\n\n\n\n\nPlease be warned that when you do finally close the account, it cannot be retrieved, nor can its contents, so please make sure you export any projects you want to keep or push the to a remote Git repo.\n\n\nOrganisation Billing\n\uf0c1\n\n\n\n\nFor Schools and University organisations, the billing screen allows you to generate invoices for your account (for new accounts and renewal of existing accounts), and for active subscriptions, view the details of the current plan as well as enter the email of the person who should receive billing notifications.\n\n\nTo access the organsisation billing screen:\n\n\n\n\nClick on your profile picture (bottom left of \nClasses\n)\n\n\n\nClick the name of your school (under \nMy Organizations\n)\n\n\n\nYou will see billing options listed across the top of the page.\n\n\n\n\n\nSelect the country you are in and 'Save'. Then enter the number of student licenses required (\nminimum 25\n). The plans available will be shown , select the plan you require and if you require the invoice to be sent to someone else, you can change the recipient.\n\n\nIf you have a promotion code, enter it in the appropriate field. Validation is case insensitive.\n\n\n\n\nIf the promotion code is invalid, the message \nInvalid promotion code\n will be shown\n\n\nIf the promotion code has expired, the message \nThis promotion code has expired\n will be shown\n\n\nPromotion codes are only available for new users and not available for self pay plans.\n\n\n\n\nWhen you are ready, click the 'Generate Invoice' button and the invoice will be generated and sent to the email address.\n\n\nThe option to switch to/from a Self Pay plan is also available but be aware if you have an annual plan and have already paid this might lead to a conflict.\n\n\n\n\nImportant\n : This is accessed from the Organization screens and having clicked on your Organization. Please do not use the normal Billing area for individuals that you can access by clicking on your name/gravatar (bottom left of screen) and selecting the \nBilling\n tab unless you wish to subscribe as an \nIndividual\n or already are subscribed as an \nIndividual\n\n\nIndividual Billing\n\uf0c1\n\n\nThe user billing screen can be found on the Billing tab of your Account Settings. You can find both your subscription details and billing history here.\n\n\n\n\nTo access your individual billing area, follow these steps:\n\n\n\n\n\n\nClick on your name and gravatar (bottom left of screen)\n\n\n\n\n\n\n\nFrom the options along the top of the page, choose \nBilling\n\n\n\n\n\n\n\n\nBookstores\n\uf0c1\n\n\nSome institutions may provide Codio licenses via the bookstore. Your course instructor or course syllabus will specify if this is available at your particular school.\n\n\nA single license can be used for a specified timeframe - 1 semester (5 months), 2 semesters (10 months) or a year. Specific licenses options may depend on your local bookstore.\n\n\nPurchasing a license\n\n\nTo purchase a license, you can request the following from your bookstore\n\n\n1 Semester  - Codio 1-Semester Subscription - ISBN: 978-1-7331872-5-1\n2 Semesters - Codio 2 Semester Subscription ISBN 978-1-73331872-8-2\nAnnual - Codio Annual Subscription ISBN # 978-1-7331872-1-3\n\n\n\nYour bookstore will provide you with a sheet that contains a code that can be used to activate your subscription for the specified timeframe.\n\n\nNOTE: A single subscription can be used for multiple courses using Codio during the specified timeframe.\n\n\nActivating a bookstore license\n\uf0c1\n\n\nTo log in to Codio, please follow your instructor's directions. This may be through your local LMS (Canvas, Blackboard, Desire2Learn, Moodle, etc) or through Codio.com using a class token.\n\n\nThe first time you log in, there will be a small banner at the top requesting you go to \u201cBilling\u201d. Please click on it or navigate to it by clicking on your username in the bottom left and selecting the \u201cBilling\u201d tab and after selecting the \"Plan\" drop down field go to the \nRedeem Code\n option and click the \nUpgrade\n button where you can then enter the code provided to you. Please note the code is case sensitive so enter it exactly as given.\nIf you have any problems \ncontact us\n through your Codio account or email us at \nhelp@codio.com\n\n\nEducational Discounts\n\uf0c1\n\n\nWe offer substantial \nWhole School\n license discounts for Schools, Colleges and Universities as well as a full 30 day trial of all the Education Features\n\n\nContact us\n\uf0c1\n\n\nCustomer Technical Support\n\uf0c1\n\n\nWe have an extensive documentation section where you can find out how to \nadd students\n, \nadd teachers\n and much more.\n\n\nTo access the documentation\n\n\n\n\nClick \nHelp\n in the top menu bar on our website.\n\n\n\n\nIf you are logged into Codio, you can access the documentation section in 2 ways:\n\n\n\n\nif on the Dashboard, by selecting the \nHelp\n button from the left-hand menu.\n\n\nor if you have a project/unit open, from the top menu bar using Help\nDocumentation\n\n\n\n\nTo contact us:\n\n\n\n\nThere is a contact button on the bottom right hand corner of our website.\n\n\n\n\nIf you are logged into Codio:\n\n\n\n\nif on the Dashboard, you can use the \nSupport\n button from the left-hand menu (just below the \nHelp\n button)\n\n\nor if you have a project/unit open, from the top menu bar using \nHelp\nSupport/Contact Us\n.\n\n\n\n\nIf it is out of our office hours, we will get back to you as soon as possible.\n\n\nSales Inquiries\n\uf0c1\n\n\nIf you are interested in purchasing Codio, please see our \npricing\n. If you have any questions about how Codio could be right for you, we offer \ndemos and webinars\n for you and your colleagues. Or alternatively, please email us at help@codio.com, and we will get in touch as soon as possible.", 
            "title": "Account"
        }, 
        {
            "location": "/dashboard/account/#account-settings-overview", 
            "text": "A brief overview of interesting account settings.   -", 
            "title": "Account settings overview"
        }, 
        {
            "location": "/dashboard/account/#cookie-requirements", 
            "text": "In order for Codio to work correctly you need to allow cookies. Check our  Privacy Policy  for more information about cookies.  The following information explains how to enable cookies for all sites. You can also enable them only for certain sites, which is not explained below.", 
            "title": "Cookie Requirements"
        }, 
        {
            "location": "/dashboard/account/#to-enable-cookies-in-chrome", 
            "text": "In your browser enter:  chrome://settings/content/cookies \nand   enable  Allow sites to save and read cookie data (recommended)  disable  Block third party cookies    Image from Chrome Version 59.0.3071.86 (Official Build) (64-bit)", 
            "title": "To enable cookies in Chrome:"
        }, 
        {
            "location": "/dashboard/account/#to-enable-cookies-in-firefox", 
            "text": "In your browser enter:  about:preferences#privacy \nSelect  User custom settings for history  from the drop down in the History section and   check  Accept cookies from sites  select 'Always' in the drop down for  Accept third-party cookies    Image from Firefox 55.0.2 (64-bit)", 
            "title": "To enable cookies in Firefox:"
        }, 
        {
            "location": "/dashboard/account/#to-enable-cookies-in-safari", 
            "text": "In your browser go to  Safari  Preferences  \nSelect the  Privacy  tab and ensure check  Block all cookies  and  Prevent cross-site tracking  are not checked.   If using an earlier version of Safari, check  Always Allow  in the Cookies and website data section  Image from Safari 12.0 on macOS Sierra 10.12.6", 
            "title": "To enable cookies in Safari:"
        }, 
        {
            "location": "/dashboard/account/#firewall-and-network-settings", 
            "text": "Codio can usually run from anywhere in your browser without any special settings. However, some school or university firewall settings may require special configuration.  This page contains information for   School network system administrators  Students and teachers who may be using Codio from home", 
            "title": "Firewall and network settings"
        }, 
        {
            "location": "/dashboard/account/#firewall-settings", 
            "text": "The following is a list of ports and URLs that Codio access from time to time. We have put these in priority order.   *.codio.com  the main Codio site and application  *.codio.io  domains that are auto-generated for each user project  api.keen.io  statistics gathering to measure student time spent in units   (stats)  *.typekit.net  web fonts  fonts.gstatic.com  web fonts  fast.fonts.net  web fonts  *.cloudfront.net  our CDN for speeding up static content  .youtube.com    .vimeo.com  for video's included in Course content   gravatar.com  used for user gravatars (pictures)    .intercom.io__,  cdnjs.cloudflare.com  and __ .pubnub.com  are highly recommended as they relate to  the help and support application (Intercom) built into Codio.    If your institution blocks access to YouTube as a general rule, your IT department can whitelist YouTube access that only allows access to content from registered and accredited educational content repositories. See  here  for more information on this.", 
            "title": "Firewall settings"
        }, 
        {
            "location": "/dashboard/account/#ports", 
            "text": "We recommend opening the following ports   80 and 443  for standard communications  3000  is a standard port for user projects  9500  is a standard SSL port for user projects", 
            "title": "Ports"
        }, 
        {
            "location": "/dashboard/account/#working-from-home", 
            "text": "Sometimes the anti-virus/firewall settings on your personal devices may interfere with home usage and make the experience slow.  You should check your settings and ensure that items in the above  Firewall settings  list are added to your exclusion list.", 
            "title": "Working from home"
        }, 
        {
            "location": "/dashboard/account/#connectivity-test", 
            "text": "If you continue to experience difficulties, visit the  Connection Diagnostics  page and send us back the generated output going to  Help   Support/Contact Us  and attach the output file using the paperclip icon)", 
            "title": "Connectivity Test"
        }, 
        {
            "location": "/dashboard/account/#browser-support", 
            "text": "Codio is best experienced on the very latest browsers, in particular Chrome, but should run fine on the following browsers:   Chrome  21 or later  Firefox  - 22 or later  IE  - 10 or later  Safari  - 6 or later  Opera  - 15 or later   If using  Safari  and accessing Codio via an  LMS , disable \"Prevent cross-site tracking\" to ensure access.   If you are experiencing any issue where Codio will not run as it should, please send an email to help@codio.com.", 
            "title": "Browser support"
        }, 
        {
            "location": "/dashboard/account/#disable-ie-compatibility-view", 
            "text": "It could happen that even if you have Internet Explorer 10 or a later version, we detect a older version of the browser.  This is due to the  Compatibility Mode  of the Browser which enables old features we no longer support.  To disable this option, please go to  Tools \u2192 F12 developer tools  and be sure that in  Browser Mode  is selected  \u00abInternet Explorer 10\u00bb  and in  Document Mode  is selected  \u00abStandards (Page default)\u00bb .", 
            "title": "Disable IE Compatibility View"
        }, 
        {
            "location": "/dashboard/account/#resetting-student-passwords", 
            "text": "You can change a student's password in the following way:   From the  Classes  area, click on your class to open it.     Click on the  Students  tab, top centre of your screen.     You will see all students in your class displayed on this screen. Find the student whose password needs to be changed and click on the blue triple dot icon to the right of their name. Choose  Change students password  and follow the steps to reset.", 
            "title": "Resetting student passwords"
        }, 
        {
            "location": "/dashboard/account/#forgot-your-password", 
            "text": "If you have forgotten your password, you should use the  lost password  link on the log-in page to reset your password automatically via email.  For School and University students only:  If you do not have access to the email address you used in creating your Codio account and you are a student, please contact your teacher. He or she will be able to reset your password for you.  If you wish to change your password (you should also do this if you forgot your password and it was reset) follow these steps:    Click on your name and gravatar (bottom left of screen)    From the options along the top of the page, choose  Account     About halfway down the  Account  page is the  Change Password  area. The student should enter their new password, and then click  Update password .", 
            "title": "Forgot your password"
        }, 
        {
            "location": "/dashboard/account/#public-key", 
            "text": "Codio automatically generates a public key for your account. This key can then be used whenever Codio attempts communication with an external server that requires public/private key based authentication such as SSH or SFTP access.", 
            "title": "Public key"
        }, 
        {
            "location": "/dashboard/account/#where-is-it-used", 
            "text": "Codio makes use of the public key in the following places   SFTP deployment target  RSYNC deployment target  SSH Terminal  Git   In both cases, you will need to install the public key onto the remote system. In the case of SFTP, you should know how to do this already.", 
            "title": "Where is it used?"
        }, 
        {
            "location": "/dashboard/account/#adding-your-public-key-to-a-remote-server", 
            "text": "If you want to get your Codio public key onto a remote server, just press the Upload Public Key button. You enter your user credentials on the remote and Codio will get it installed in the  ~/.ssh/authorized_keys  file.", 
            "title": "Adding your public key to a remote server"
        }, 
        {
            "location": "/dashboard/account/#adding-your-public-key-to-github-or-bitbucket", 
            "text": "If you are working with GitHub or BitBucket, then you need to install the public key. Codio makes this very easy for you. Goto  Codio Account  and select GitHub or BitBucket tab and select 'Upload your public key to GitHub/BitBucket'   You will be redirected to your GitHub/BitBucket account and asked to authorise the application  On accepting this you will then be redirected back to your Codio account.", 
            "title": "Adding your public key to GitHub or BitBucket"
        }, 
        {
            "location": "/dashboard/account/#github", 
            "text": "The GitHub tab lets you associate your account with your GitHub account and where you can upload your public key. See  SSH Key   You can sign in with GitHub as well.", 
            "title": "GitHub"
        }, 
        {
            "location": "/dashboard/account/#bitbucket", 
            "text": "The BitBucket tab lets you associate your account with your BitBucket account and where you can upload your public key. See  SSH Key  You can sign in with BitBucket as well.", 
            "title": "BitBucket"
        }, 
        {
            "location": "/dashboard/account/#change-account-details", 
            "text": "You can change the following settings   Account name  - changing this will not affect the URL associated with your account name. This name is for display and communication purposes only.  Email address", 
            "title": "Change account details"
        }, 
        {
            "location": "/dashboard/account/#delete-your-account", 
            "text": "You can delete your account at any time from the  Codio   Account  menu item and going to the  Account  tab   Please be warned that when you do finally close the account, it cannot be retrieved, nor can its contents, so please make sure you export any projects you want to keep or push the to a remote Git repo.", 
            "title": "Delete your account"
        }, 
        {
            "location": "/dashboard/account/#organisation-billing", 
            "text": "For Schools and University organisations, the billing screen allows you to generate invoices for your account (for new accounts and renewal of existing accounts), and for active subscriptions, view the details of the current plan as well as enter the email of the person who should receive billing notifications.  To access the organsisation billing screen:   Click on your profile picture (bottom left of  Classes )  Click the name of your school (under  My Organizations )  You will see billing options listed across the top of the page.   Select the country you are in and 'Save'. Then enter the number of student licenses required ( minimum 25 ). The plans available will be shown , select the plan you require and if you require the invoice to be sent to someone else, you can change the recipient.  If you have a promotion code, enter it in the appropriate field. Validation is case insensitive.   If the promotion code is invalid, the message  Invalid promotion code  will be shown  If the promotion code has expired, the message  This promotion code has expired  will be shown  Promotion codes are only available for new users and not available for self pay plans.   When you are ready, click the 'Generate Invoice' button and the invoice will be generated and sent to the email address.  The option to switch to/from a Self Pay plan is also available but be aware if you have an annual plan and have already paid this might lead to a conflict.   Important  : This is accessed from the Organization screens and having clicked on your Organization. Please do not use the normal Billing area for individuals that you can access by clicking on your name/gravatar (bottom left of screen) and selecting the  Billing  tab unless you wish to subscribe as an  Individual  or already are subscribed as an  Individual", 
            "title": "Organisation Billing"
        }, 
        {
            "location": "/dashboard/account/#individual-billing", 
            "text": "The user billing screen can be found on the Billing tab of your Account Settings. You can find both your subscription details and billing history here.   To access your individual billing area, follow these steps:    Click on your name and gravatar (bottom left of screen)    From the options along the top of the page, choose  Billing", 
            "title": "Individual Billing"
        }, 
        {
            "location": "/dashboard/account/#bookstores", 
            "text": "Some institutions may provide Codio licenses via the bookstore. Your course instructor or course syllabus will specify if this is available at your particular school.  A single license can be used for a specified timeframe - 1 semester (5 months), 2 semesters (10 months) or a year. Specific licenses options may depend on your local bookstore.  Purchasing a license  To purchase a license, you can request the following from your bookstore  1 Semester  - Codio 1-Semester Subscription - ISBN: 978-1-7331872-5-1\n2 Semesters - Codio 2 Semester Subscription ISBN 978-1-73331872-8-2\nAnnual - Codio Annual Subscription ISBN # 978-1-7331872-1-3  Your bookstore will provide you with a sheet that contains a code that can be used to activate your subscription for the specified timeframe.  NOTE: A single subscription can be used for multiple courses using Codio during the specified timeframe.", 
            "title": "Bookstores"
        }, 
        {
            "location": "/dashboard/account/#activating-a-bookstore-license", 
            "text": "To log in to Codio, please follow your instructor's directions. This may be through your local LMS (Canvas, Blackboard, Desire2Learn, Moodle, etc) or through Codio.com using a class token.  The first time you log in, there will be a small banner at the top requesting you go to \u201cBilling\u201d. Please click on it or navigate to it by clicking on your username in the bottom left and selecting the \u201cBilling\u201d tab and after selecting the \"Plan\" drop down field go to the  Redeem Code  option and click the  Upgrade  button where you can then enter the code provided to you. Please note the code is case sensitive so enter it exactly as given.\nIf you have any problems  contact us  through your Codio account or email us at  help@codio.com", 
            "title": "Activating a bookstore license"
        }, 
        {
            "location": "/dashboard/account/#educational-discounts", 
            "text": "We offer substantial  Whole School  license discounts for Schools, Colleges and Universities as well as a full 30 day trial of all the Education Features", 
            "title": "Educational Discounts"
        }, 
        {
            "location": "/dashboard/account/#contact-us", 
            "text": "", 
            "title": "Contact us"
        }, 
        {
            "location": "/dashboard/account/#customer-technical-support", 
            "text": "We have an extensive documentation section where you can find out how to  add students ,  add teachers  and much more.  To access the documentation   Click  Help  in the top menu bar on our website.   If you are logged into Codio, you can access the documentation section in 2 ways:   if on the Dashboard, by selecting the  Help  button from the left-hand menu.  or if you have a project/unit open, from the top menu bar using Help Documentation   To contact us:   There is a contact button on the bottom right hand corner of our website.   If you are logged into Codio:   if on the Dashboard, you can use the  Support  button from the left-hand menu (just below the  Help  button)  or if you have a project/unit open, from the top menu bar using  Help Support/Contact Us .   If it is out of our office hours, we will get back to you as soon as possible.", 
            "title": "Customer Technical Support"
        }, 
        {
            "location": "/dashboard/account/#sales-inquiries", 
            "text": "If you are interested in purchasing Codio, please see our  pricing . If you have any questions about how Codio could be right for you, we offer  demos and webinars  for you and your colleagues. Or alternatively, please email us at help@codio.com, and we will get in touch as soon as possible.", 
            "title": "Sales Inquiries"
        }, 
        {
            "location": "/dashboard/desktopapp/", 
            "text": "A brief overview of the Codio desktop app.\n\n\n\n\n\nThe desktop app is to allow a local code workspace to synchronize with a Codio box.\n\n\nUnits/Projects from the \nClassroom dashboard\n and \nMy Projects\n area can be connected.\n\n\nA Codio account is required\n\n\n\n\nExcluding files\n\uf0c1\n\n\nFiles/folders can be excluded from synchronisation by using \n.codioignore\n file in the source project.\nEnter on a new line the file/folders to be excluded defining them relative to the location of the \n.codioignore\n file and defining folders with \n/\n\n\nFor example if the \n.codioignore\n file is located in the project workspace and you wish to exclude\n\n\n\n\nbin\n \n \nnode_modules\n folder\n\n\nthe file \nerror.jade\n in the \nviews\n folder\n\n\nthe files \napp.js\n and \nREADME.md\n\n\n\n\nthe \n.codioignore\n file will be\n\n\n/bin\n/node_modules\n/views/error.jade\napp.js\nREADME.md\n\n\n\n\n\n\nPlease note that the \n.codioignore\n file is included in the desktop app files.\n\n\nIf students wish to exclude files when pushing back to their Codio account they can do so, either by editing any existing \n.codioignore\n file or creating the file themselves. If the teacher creates the \n.codioignore\n file, adding a 'comment' line to the top of the file to make it clear to any students what they should not change could help avoid potential problems.\nA line starting with \n#\n serves as a comment\n\n\nClick here\n to go to the download page and install to your local machine\n\n\nStarting the app\n\uf0c1\n\n\nWhen first starting the app you need to choose the server to connect to. In most cases this will be \nhttps://codio.com\n but if you are in the United Kingdom/Europe, it maybe \nhttps://codio.co.uk\n.\n\n\n\n\nYou can check by logging into your Codio account in your browser and you will see the server domain noted there\n\n\nHaving selected the server log in using your codio credentials.\n\n\nNote:\n that if you usually access Codio through an \nLMS\n, you may not have a Codio account password set. If that is the case, go to the online login screen where you can go through the \nlost password\n process to define a codio account password. We would then recommend you log into your account online and change this password to one you will remember in the future.  Setting a Codio account password will not effect or change how you currently access Codio via your LMS\n\n\n\n\nAccessing and connecting to your online content\n\uf0c1\n\n\n\n\nWhen logged in you can access your content either from \nMy Classroom\n or \nMy Projects\n area\n\n\nSelect either:\n\n\n\n\n\n\nconnect\n - to pull all the code from the selected unit to a folder on your PC that you define.\n\n.\n\n\n\n\n\n\nOpen in Codio\n - to open the unit in your Codio account\n\n\n\n\n\n\nWhen connecting, browse to a folder on your PC where you would like to store the code and pull the content\n\n\nManaging your offline content\n\uf0c1\n\n\nWhen you have connected you can then push/pull/open the unit in Codio and manage the local workspace folder settings.\n\n\n\n\n1.\n Click the \npull\n button to pull content in from your Codio account. \nNote\n Any files you already have stored locally will be overwritten\n\n\n2.\n Click the \npush\n button to push the content from your local workspace folder back to your Codio account. \nNote\n This will overwrite the project/unit in your Codio account\n\n\n3.\n Click the \nOpen in Codio\n button to open your unit in a browser tab. This can be useful if you wish to compare what you have stored locally to what you last pulled from your Codio account\n\n\n4.\n Click the \nfolder\n icon to manage your local workspace folder settings\n\n\nLocal workspace folder settings\n\uf0c1\n\n\n\n\n1.\n Click the \nOpen the folder\n button to open the folder containing your local files\n\n\n2.\n Click the \nChange folder\n button to change the folder storing your local files. \nNote\n the content of the previous folder will not be automatically copied or transferred to the newly selected folder. If you wish to do this, you should return to the previous screen and \npull\n to that new folder\n\n\n3.\n Click the \nDisconnect\n button to disconnect the unit from your Codio account. You will be returned to the previous screen where you can then \nconnect\n the unit again if you wish", 
            "title": "Desktop App"
        }, 
        {
            "location": "/dashboard/desktopapp/#excluding-files", 
            "text": "Files/folders can be excluded from synchronisation by using  .codioignore  file in the source project.\nEnter on a new line the file/folders to be excluded defining them relative to the location of the  .codioignore  file and defining folders with  /  For example if the  .codioignore  file is located in the project workspace and you wish to exclude   bin     node_modules  folder  the file  error.jade  in the  views  folder  the files  app.js  and  README.md   the  .codioignore  file will be  /bin\n/node_modules\n/views/error.jade\napp.js\nREADME.md   Please note that the  .codioignore  file is included in the desktop app files.  If students wish to exclude files when pushing back to their Codio account they can do so, either by editing any existing  .codioignore  file or creating the file themselves. If the teacher creates the  .codioignore  file, adding a 'comment' line to the top of the file to make it clear to any students what they should not change could help avoid potential problems.\nA line starting with  #  serves as a comment  Click here  to go to the download page and install to your local machine", 
            "title": "Excluding files"
        }, 
        {
            "location": "/dashboard/desktopapp/#starting-the-app", 
            "text": "When first starting the app you need to choose the server to connect to. In most cases this will be  https://codio.com  but if you are in the United Kingdom/Europe, it maybe  https://codio.co.uk .   You can check by logging into your Codio account in your browser and you will see the server domain noted there  Having selected the server log in using your codio credentials.  Note:  that if you usually access Codio through an  LMS , you may not have a Codio account password set. If that is the case, go to the online login screen where you can go through the  lost password  process to define a codio account password. We would then recommend you log into your account online and change this password to one you will remember in the future.  Setting a Codio account password will not effect or change how you currently access Codio via your LMS", 
            "title": "Starting the app"
        }, 
        {
            "location": "/dashboard/desktopapp/#accessing-and-connecting-to-your-online-content", 
            "text": "When logged in you can access your content either from  My Classroom  or  My Projects  area  Select either:    connect  - to pull all the code from the selected unit to a folder on your PC that you define. .    Open in Codio  - to open the unit in your Codio account    When connecting, browse to a folder on your PC where you would like to store the code and pull the content", 
            "title": "Accessing and connecting to your online content"
        }, 
        {
            "location": "/dashboard/desktopapp/#managing-your-offline-content", 
            "text": "When you have connected you can then push/pull/open the unit in Codio and manage the local workspace folder settings.   1.  Click the  pull  button to pull content in from your Codio account.  Note  Any files you already have stored locally will be overwritten  2.  Click the  push  button to push the content from your local workspace folder back to your Codio account.  Note  This will overwrite the project/unit in your Codio account  3.  Click the  Open in Codio  button to open your unit in a browser tab. This can be useful if you wish to compare what you have stored locally to what you last pulled from your Codio account  4.  Click the  folder  icon to manage your local workspace folder settings", 
            "title": "Managing your offline content"
        }, 
        {
            "location": "/dashboard/desktopapp/#local-workspace-folder-settings", 
            "text": "1.  Click the  Open the folder  button to open the folder containing your local files  2.  Click the  Change folder  button to change the folder storing your local files.  Note  the content of the previous folder will not be automatically copied or transferred to the newly selected folder. If you wish to do this, you should return to the previous screen and  pull  to that new folder  3.  Click the  Disconnect  button to disconnect the unit from your Codio account. You will be returned to the previous screen where you can then  connect  the unit again if you wish", 
            "title": "Local workspace folder settings"
        }, 
        {
            "location": "/dashboard/navigation/", 
            "text": "The Codio dashboard is the main screen you arrive at after logging into Codio. From here you access all the main components of Codio.\n\n\nThe appearance of the dashboard depends on whether you are a teacher/instructor or a student. The information below relates to teacher/instructors. \nClick here\n for information on the student dashboard.\n\n\nDashboard options\n\uf0c1\n\n\nHere are the main options from the dashboard.\n\n\n\n\n\n\nClasses\n: this is where you administer classes and assign projects and courses to students. \nAbout classes\n.\n\n\nCourses\n: courses are teaching materials that are nicely organized for repeated teaching of content from semester to semester (or term to term, year to year). Course Units can be single Codio projects or a mapping to a part of a Codio book. \nAbout courses\n.\n\n\nMy Projects\n: a project is a cloud based server with the Codio IDE attached. It is a great place to experiment. You can create as many as you like and configure your server (box) from the command line exactly as you would with any other server. \nAbout projects\n.\n\n\nMy Books\n: books lets you build a complete book, with chapters, sections and pages that can be nested to any depth to form a table of contents and associated content that mirrors a normal book structure. Parts of a book can then be mapped to course units for class assignments. \nAbout books\n\n\nStacks\n: Stacks are templated snapshots of a project's software configuration and are a very important and powerful feature of Codio. If you are assigning content to classes of students, it is very important you have a full understanding of stacks. \nAbout stacks\n.\n\n\nStarter Packs\n: a Starter Pack is a templated snapshot of a project's code workspace. Additionally a stack is specified. The result is an instantly startable snapshot of a fully configured environment. \nAbout starter packs\n.\n\n\nDocumentation\n: a link to the general document. \nDocumentation link\n.\n\n\nSupport\n: this is our integrated support environment. If you need assistance from us, click here to leave us a detailed message and we will get back to you quickly.", 
            "title": "Navigation"
        }, 
        {
            "location": "/dashboard/navigation/#dashboard-options", 
            "text": "Here are the main options from the dashboard.    Classes : this is where you administer classes and assign projects and courses to students.  About classes .  Courses : courses are teaching materials that are nicely organized for repeated teaching of content from semester to semester (or term to term, year to year). Course Units can be single Codio projects or a mapping to a part of a Codio book.  About courses .  My Projects : a project is a cloud based server with the Codio IDE attached. It is a great place to experiment. You can create as many as you like and configure your server (box) from the command line exactly as you would with any other server.  About projects .  My Books : books lets you build a complete book, with chapters, sections and pages that can be nested to any depth to form a table of contents and associated content that mirrors a normal book structure. Parts of a book can then be mapped to course units for class assignments.  About books  Stacks : Stacks are templated snapshots of a project's software configuration and are a very important and powerful feature of Codio. If you are assigning content to classes of students, it is very important you have a full understanding of stacks.  About stacks .  Starter Packs : a Starter Pack is a templated snapshot of a project's code workspace. Additionally a stack is specified. The result is an instantly startable snapshot of a fully configured environment.  About starter packs .  Documentation : a link to the general document.  Documentation link .  Support : this is our integrated support environment. If you need assistance from us, click here to leave us a detailed message and we will get back to you quickly.", 
            "title": "Dashboard options"
        }, 
        {
            "location": "/dashboard/organisations/", 
            "text": "An organization is always required for institutional teaching. The organization area contains settings for managing accounts, LMS integration and many other organization related settings.\n\n\nOrganisation overview\n\uf0c1\n\n\nInteresting organization settings.\n\n\n\n\n\n-\n\n\nAdministrator role\n\uf0c1\n\n\nAs the creator of your educational organization in Codio, you have administrator rights. This means that you can add and remove \nteachers\n from your organization, edit your organization information, manage your students \ndashboard settings\n, create \ngrading templates\n and \ndelete\n your organization.\n\n\nTo access the administration tools:\n\n\n\n\nClick on your profile picture (bottom left of \nCourses\n)\n\n\n\nClick the name of your school (under \nMy Organizations\n)\n\n\n\nYou will see admin options listed across the top of the page.\n\n\n\n\n\nAdd teachers\n\uf0c1\n\n\nOnce you have set up your organization, the next step is to invite teachers to use Codio too. There are 2 ways you can do this:\n\n\nInvite Teacher to the Organization\n\uf0c1\n\n\n\n\n\n\nClick your name/gravatar, bottom of the left hand pane\n\n\n\n\n\n\n\n\nClick the name of your organization (under \nMy Organizations\n)\n\n\n\n\n\n\n\n\nClick the \nMembers\n tab\n\n\n\n\n\n\n\n\nIn the  \nInvite Teacher to the Organization\n area, enter in their email address. If you also wish them to have full \naccess\n rights to the organization, check the \nAdd this teacher to owners group\n.\n\n\n\n\n\n\n\n\nAn email will be sent to your colleague containing a link to sign up and on completion they will be added into your Organization automatically.\n\nN.B.\n They must use the email address the invitation was sent to or they will not be added to the Organization.\n\n\n\n\n\n\nAny invitations not completed will show in the area below and where you can also \nResend\n or \nRevoke\n if you require. Once the invitee has joined the organization they will no longer show in this area but show in the \nAll Members\n list below (and also \nOwners\n list if 'Add this teacher to owners group' was checked)\n\n\n\n\n\n\n\n\nInvitation Token\n\uf0c1\n\n\n\n\n\n\nClick your name/gravatar, bottom of the left hand pane\n\n\n\n\n\n\n\n\nClick the name of your organization (under \nMy Organizations\n)\n\n\n\n\n\n\n\n\nClick the \nOrganization Settings\n tab\n\n\n\n\n\n\n\n\nAbout half way down you will see an \nInvitation\n area, displaying an \nInvite URL\n and an \nInvite token\n.\n\n\n\n\n\n\n\n\nGive any teachers who are not already Codio users the invite URL.\n\n\n\n\n\n\nWhen they enter the URL in their browser, they will automatically be taken through the sign-up process and as they select that they are a Teacher, will then be added to your Organization.\n\n\n\n\n\n\nAlternatively, teachers can register themselves for a Codio account by following the sign-up process at www.codio.com. Once they have done this (selecting that they are a \nTeacher\n, they will be asked for an \nInvite token\n to join your educational organization. This is provided in step 4 above - give them the token (not the URL).\n\n\n\n\n\n\nIf you already have classes set up you can add and invite teachers directly into your class(es). See\n\n\nAdding teachers to a class\n\n\n\n\n\n\nYou can then if you wish add them as an \norganization owner\n so they can then manage and create courses themselves and have full admin access to the organization\n\n\nAdd organization owners\n\uf0c1\n\n\nYou are the \nOwner\n of your organization if you created it. You can add other owners (these will usually be other teachers who you wish to give admin rights to).\nThere are 2 ways you can do this:\n\n\nAdd a new user to your Organization Owners group\n\uf0c1\n\n\n\n\n\n\nClick your name/gravatar, bottom of the left hand pane\n\n\n\n\n\n\n\nClick the name of your organization (under \nMy Organizations\n)\n\n\n\n\n\n\n\nClick the \nMembers\n tab\n\n\n\n\n\n\n\nIn the  \nInvite Teacher to the Organization\n area, enter in their Email address and check the 'Add this teacher to owners group'.\n\n\n\n\n\n\n\nAn email will be sent to your colleague containing a link to sign up and on completion they will be added into your Organization automatically and to the \nOwners\n group.\n\nN.B.\n They must use the email address the invitation was sent to or they will not be added to the Organization.\n\n\n\n\n\n\nAny invitations not completed will show in the area below and where you can also 'Resend' or 'Revoke' if you require. Once the invitee has joined the organization they will no longer show in this area but show in the \nAll Members\n list below and also \nOwners\n list.\n\n\n\n\n\n\n\nAdd an existing Codio user to your Organization Owners group\n\uf0c1\n\n\n\n\n\n\nClick your name/gravatar, bottom of the left hand pane\n\n\n\n\n\n\n\nClick on the name of your  educational organization - under \nMy Organizations\n, which is about halfway down the screen.\n\n\n\n\n\n\n\nClick the \nMembers\n tab\n\n\n\n\n\n\n\nClick \nOwners\n\n\n\n\n\n\n\n\nYou should see yourself listed as an owner. To add another teacher, choose the \nAdd User\n drop down and as you type their Codio Username, the listing will filter down so you can then select them.\n\n\nAdd students\n\uf0c1\n\n\nYou do not add students to an organization directly. They are added by inviting them to join a course. Please \nclick here\n for more information.\n\n\nCodio also creates test students so instructors are able to see how students interact with a course. This is described in the course section.\n\n\nIf you are using an LMS for a class then the LMS platform will handle the addition of students to the Codio class automatically.\n\n\nStudent consent form\n\uf0c1\n\n\nThe student consent form is a feature for Codio organizations. It allows you to show an IP consent form, whose content you create yourself, to Codio users.\n\n\nTo configure the consent form information, click on your user name from the dashboard. Next, select your organization. You will then see the \nIP Consent\n tab at the top of the screen.\n\n\nIf you enable this feature, all students will be shown the form when they first create an account. If a student has already created an account then the next time they sign in, they will be shown the form. They will not be able to access Codio until they do consent.\n\n\n\n\nCreating content\n\uf0c1\n\n\n\n\nYou should first create the content that you wish to display to the student. You enter your text in the lower portion of the screen. You can use markdown to format your text. If you are not familiar with markdown, here is a reference for markdown:\n\n\n\n\nDaring Fireball\n - the author of markdown\n\n\n\n\nYou can press the \nSave Draft\n button to save your changes and continue editing later.\n\n\nYou can also \nPreview\n your changes to see how the rendered output appears.\n\n\nPublishing and revisions\n\uf0c1\n\n\nYou need to publish your changes so that they appear to the student. You can create new versions over time. Earlier versions of the form can be recalled by selecting the version from the drop down list.\n\n\nOnce you are happy with your text, you press the \nPublish new version\n button.\n\n\nExporting student consent data\n\uf0c1\n\n\nIf you would like to download a log of all students who have consented, press the \nDownload CSV\n link in the upper section.\n\n\nThe CSV file contains the following data\n\n\n\n\nUser name\n\n\nCodio user ID\n\n\nEmail address\n\n\nRevision of the consent form they consented to\n\n\nDate and time of the consent.\n\n\n\n\nView organization members\n\uf0c1\n\n\nSometimes you might need to check who is registered as a member of your educational organization. To view all members of your school organization follow these steps:\n\n\n\n\n\n\nClick your name/gravatar, bottom of the left hand pane\n\n\n\n\n\n\n\nClick on the name of your  educational organization - under \nMy Organizations\n, which is about halfway down the screen.\n\n\n\n\n\n\n\nClick the \nMembers\n tab\n\n\n\n\n\n\n\nClick \nAll Members\n\n\n\n\n\n\n\n\nYou will be able to see all the members of your school organization.\n\n\nThe \nTest Students\n group contains the demo student accounts created for you when the Organization was created. See \nTest Students\n for more information.\n\n\nThe \nUsers without class\n group contains all users that are not members of a class. See \nDelete Class\n for more information.  This may be as a result of a class being deleted or it may be that a new user has joined your organization but is not yet either a Teacher or a Student in a class.\nSelect this group and you can then remove these users from your organization if required.\n\n\n\nPlease note that removing users from your Organization does not delete their Codio account. Only the account owner can \ndelete their account\n.\n\n\nStudent dashboard settings\n\uf0c1\n\n\nOrganization owners can manage the student dashboard view by setting their default page to 'My Projects' as an alternative to \nMy Classroom\n as well as optionally hiding \nMy Classroom\n and \nCourses\n menu items.\n\n\nTo do this, access the administration tools:\n\n\n\n\nClick on your profile picture (bottom left of \nClasses\n)\n\n\n\nClick the name of your institution (under \nMy Organizations\n)\n\n\n\nYou will see admin options listed across the top of the page.\n\n\n\nSelect \nDashboard Settings\n\n\nMake the required changes and \nUpdate\n to save the changes\n\n\n\n\n\nN.B.\n Your students may need to reload Codio in their browser when they next log in for the changes to be visible to them\n\n\nAccess for students to individual courses can also be managed in the course permissions. See \nRestrict Course access\n for more information.\n\n\nCustom script\n\uf0c1\n\n\nTo integrate third-party systems to help/track students, custom scripts can be enabled.\n\n\nEnabling this will allow third-party systems (such as \nsense.network\n to help/track students.\n\n\nIn all cases, the \nuserid\n,\nemail\n and the user type (Student/Teacher) will be passed.\n\n\nIf required by the third-party system used, custom js code can be included in the \nCustom Script\n section.\n\n\nAny such code should be entered without script tags.\n\n\ne.g.\n\n\nvar http = new XMLHttpRequest();\nvar url = 'https://userdomain/url'; //Change to valid URL for your third-party system\nvar params = 'userId=' + codio.userId ;\nhttp.open('POST', url, true);\nhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\nhttp.onreadystatechange = function() {//Call a function when the state changes.\n    if(http.readyState == 4 \n http.status == 200) {\n        alert(http.responseText);\n    }\n}\nhttp.send(params);\n\n\n\n\nYou can also add \nconsole.log\n entries to be able to test/view output\n\n\ne.g.\n\n\nconsole.log('params', codio);\nconsole.log('params', window);\nconsole.log('params', document)\nconsole.log(window.codio.currentPage)\nconsole.log(window.codio.totalNumberOfPages)\n\n\n\n\n\n\nIf you require any assistance with this, please don't hesitate to \ncontact us\n in the usual manner.\n\n\nRemove owners\n\uf0c1\n\n\nYou may want to remove one or more of the owners you have set for your organization. It is worth noting that you always need at least one owner. (If you want to know how to add owners, jump to \nadd organization owners\n).\n\n\nTo remove owners:\n\n\n\n\n\n\nClick your name/gravatar, bottom of the left hand pane\n\n\n\n\n\n\n\nClick on the name of your  educational organization - under \nMy Organizations\n, which is about halfway down the screen.\n\n\n\n\n\n\n\nIf you want to remove the owner rights of anyone in your organization, Click the \nMembers\n tab\n\n\n\n\n\n\n\nUnder \nPermanent Teams\n, Click \nOwners\n\n\n\n\n\n\n\n\nChoose \nRemove\n on the right hand side of the name of the person whose rights you want to remove. (note: you must always have at least one person in this group to act as the owner)\n\n\n\n\n\n\nRemove members\n\uf0c1\n\n\nThere are some occasions where you may want to remove old members in order to make room for new members - for example if a class of students leaves and you want to use the account licences for other students.\n\n\nTo remove members:\n\n\n\n\n\n\nClick your name/gravatar, bottom of the left hand pane\n\n\n\n\n\n\n\nClick on the name of your  educational organization - under \nMy Organizations\n, which is about halfway down the screen.\n\n\n\n\n\n\n\nClick the \nMembers\n tab\n\n\n\n\n\n\n\nUnder \nPermanent Teams\n, Click \nAll Members\n\n\n\n\n\n\n\n\nYou will be able to see all the members of your school organization.\n\n\n\n\n\n\nChoose \nRemove\n on the right hand side of the name of the person who you want to remove from your organization.\n\n\n\n\n\n\nIf you want to use the freed-up accounts with new students, follow the steps listed in \nAdd Users\n\n\n\n\n\n\nOrganization Assessments Library\n\uf0c1\n\n\nIn addition to Codio's global assessments library, you can create Organization assessments libraries. This allows your faculty to share assessment items with other instructors similar to how you can share Courses within an Organization.\n\n\nCreate an Organization Assessments Library\n\uf0c1\n\n\n\n\n\n\nClick your name/gravatar, bottom of the left hand pane\n\n\n\n\n\n\n\nClick the name of your organization (under \nMy Organizations\n)\n\n\n\n\n\n\n\nClick the Assessments Library tab\n\n\n\n\n\n\n\nClick \u201cCreate a New Library\u201d\n\n\n\n\n\n\nEnter the name of the assessments library you want to create and press \u201cCreate\u201d\n\n\n\n\n\n\n\nRead more about assessment libraries \nhere\n.\n\n\nAdd Collaborators to an Assessments Library\n\uf0c1\n\n\n\n\nUnder the Assessments Library tab, click on the library you want to add collaborators to\n\n\n\n\n\n\n* Click on the Permissions tab.\n\n\nAdd Permission:\n Either type the user name or use the drop down arrow to select an organization member to give permission to. By default, the collaborators are given \u201cRead\u201d permission, meaning they cannot add to or edit assessments in the library. To give a user \u201cWrite\u201d permission, simply select the permission level next to their user name in the list.\n\n\nRead Permission for Teachers:\n  Turning this on allows all Teachers in the organization to have \u201cRead\u201d permission, meaning they cannot add to or edit assessments in the library.\n\n\n\n\nRemove:\n To remove a collaborator, simply press the \u201cRemove\u201d button next to their user name. Please note that is \u201cRead permission for teachers\u201d is turned on, that user may still have read permission if they are still a teacher account and a member of the organization.\n\n\nPublic/private settings\n\uf0c1\n\n\nOrganization owners can disable this feature to allow members of the Organization to create Public Projects/Stacks/Starter Packs/Courses and Modules. By default, these will be created as Private.\n\n\nPrivate projects can still be shared to other users in the normal manner. See \nPermissions\n\n\nN.B.\n Any existing Projects/Stacks/Starter Packs/Courses and Modules created by members of the organization prior to any changes being made will not be effected\n\n\nTo enable the creation of Public Projects/Stacks/Starter Packs/Courses and Modules, access the administration tools:\n\n\n\n\nClick on your profile picture (bottom left of \nClasses\n)\n\n\n\nClick the name of your institution (under \nMy Organizations\n)\n\n\n\nYou will see admin options listed across the top of the page.\n\n\n\nSelect \nOrganization Settings\n\n\nGo to the Private/Public Settings area and click the slider to disable this, and \nUpdate\n to save the changes\n\n\n\n\n\nOrganization owners can also block Codio support team from being able to access members accounts to provide platform support.\n\n\nSee also:\n\n\n\n\nCreating and importing a project\n\n\nCreating a Stack\n\n\nCreating a Pack\n\n\nCreating a course\n\n\n\n\nGigaboxes\n\uf0c1\n\n\nCodio's default boxes are allocated 400MB of memory. If you need larger boxes then you can upgrade your subscription to give access to 1GB, 2GB, 8GB,16GB and GPU (for GPU-accelerated instances) boxes.\n\n\nYou purchase a specific number of Gigaboxes that can be used by anyone within your organization. Codio tracks usage based on active projects rather than total projects. In other words, you can have 100 projects which use a Gigabox but as long as only one is active at a time, this requires only a single Gigabox unit to be purchased.\n\n\nTo see the status of your current Gigabox usage, for all users\n\n\n\n\nClick on your user name in the dashboard\n\n\nSelect your organization \n\n\nClick on the Organization Settings tab\n\n\n\n\nYou can then scroll down to the Gigaboxes section.\n\n\nDelete organization\n\uf0c1\n\n\nIf, for any reason you want to completely delete your organization, you can do so in the following way:\n\n\n\n\n\n\nClick your name/gravatar, bottom of the left hand pane\n\n\n\n\n\n\n\nClick on the name of your  educational organization - under \nMy Organizations\n, which is about halfway down the screen.\n\n\n\n\n\n\n\nClick the \nOrganization settings\n tab\n\n\n\n\n\n\n\nGo to the \nDelete\n section at the bottom of the page, and type the confirmation code. Note that once your school action has been deleted, the action cannot be reverted.\n\n\n\n\n\n\nOrganisation contact URL\n\uf0c1\n\n\nIf you wish to set your own contact URL's for your students (e.g. you have a forum or LMS discussion area for them to use or you have your own resources available to assist students), you can do so in the following way:\n\n\n\n\n\n\nClick your name/gravatar, bottom of the left hand pane\n\n\n\n\n\n\n\nClick on the name of your  educational organization - under \nMy Organizations\n, which is about halfway down the screen.\n\n\n\n\n\n\n\nClick the \nOrganization settings\n tab\n\n\n\n\n\n\n\nGo to the \nEducation Settings\n section toward the  bottom of the page, and enter the text you wish to show along with the URL you wish to direct your students to. You can set as many options as you require and also define the default option that will be checked automatically for the students.\n\n\n\n\n\n\n\nIf these are set, when a student uses any of the ways to contact us, they will be shown all the options in addition to contacting Codio directly if they have a problem accessing the Codio platform, or loading a unit can contact us.\n\n\n\n\n\n\n\n\n\n\nThese can also be set at the \nclass\n level so if you have specific areas/forums for your classes for students to raise questions, you can set the contact URL there and it will override the organisation setting\n\n\n\n\nN.B. \"Teacher\" accounts will not be effected by this setting and they will still be able to contact Codio in the usual manner. See \nSupport\n for more on this\n\n\nOrganisation release grades\n\uf0c1\n\n\nBy default Students are not shown the grades until you decide to release them to the class but if you wish to automatically \nRelease Grades\n when students complete a unit, you can enable this feature so when you create new \nclasses\n this option is automatically enabled.\n\n\nEnabling this feature will not effect existing classes\n\n\n\n\n\n\nClick your name/gravatar, bottom of the left hand pane\n\n\n\n\n\n\n\nClick on the name of your  educational organization - under \nMy Organizations\n, which is about halfway down the screen.\n\n\n\n\n\n\n\nClick the \nOrganization settings\n tab\n\n\n\n\n\n\n\nGo to the \nEducation Settings\n section toward the  bottom of the page, and enable the feature\n\n\n\n\n\n\n\nThe status of this feature can be changed in individual classes if required. See \nhere\n for more information", 
            "title": "Organizations"
        }, 
        {
            "location": "/dashboard/organisations/#organisation-overview", 
            "text": "Interesting organization settings.   -", 
            "title": "Organisation overview"
        }, 
        {
            "location": "/dashboard/organisations/#administrator-role", 
            "text": "As the creator of your educational organization in Codio, you have administrator rights. This means that you can add and remove  teachers  from your organization, edit your organization information, manage your students  dashboard settings , create  grading templates  and  delete  your organization.  To access the administration tools:   Click on your profile picture (bottom left of  Courses )  Click the name of your school (under  My Organizations )  You will see admin options listed across the top of the page.", 
            "title": "Administrator role"
        }, 
        {
            "location": "/dashboard/organisations/#add-teachers", 
            "text": "Once you have set up your organization, the next step is to invite teachers to use Codio too. There are 2 ways you can do this:", 
            "title": "Add teachers"
        }, 
        {
            "location": "/dashboard/organisations/#invite-teacher-to-the-organization", 
            "text": "Click your name/gravatar, bottom of the left hand pane     Click the name of your organization (under  My Organizations )     Click the  Members  tab     In the   Invite Teacher to the Organization  area, enter in their email address. If you also wish them to have full  access  rights to the organization, check the  Add this teacher to owners group .     An email will be sent to your colleague containing a link to sign up and on completion they will be added into your Organization automatically. N.B.  They must use the email address the invitation was sent to or they will not be added to the Organization.    Any invitations not completed will show in the area below and where you can also  Resend  or  Revoke  if you require. Once the invitee has joined the organization they will no longer show in this area but show in the  All Members  list below (and also  Owners  list if 'Add this teacher to owners group' was checked)", 
            "title": "Invite Teacher to the Organization"
        }, 
        {
            "location": "/dashboard/organisations/#invitation-token", 
            "text": "Click your name/gravatar, bottom of the left hand pane     Click the name of your organization (under  My Organizations )     Click the  Organization Settings  tab     About half way down you will see an  Invitation  area, displaying an  Invite URL  and an  Invite token .     Give any teachers who are not already Codio users the invite URL.    When they enter the URL in their browser, they will automatically be taken through the sign-up process and as they select that they are a Teacher, will then be added to your Organization.    Alternatively, teachers can register themselves for a Codio account by following the sign-up process at www.codio.com. Once they have done this (selecting that they are a  Teacher , they will be asked for an  Invite token  to join your educational organization. This is provided in step 4 above - give them the token (not the URL).    If you already have classes set up you can add and invite teachers directly into your class(es). See  Adding teachers to a class    You can then if you wish add them as an  organization owner  so they can then manage and create courses themselves and have full admin access to the organization", 
            "title": "Invitation Token"
        }, 
        {
            "location": "/dashboard/organisations/#add-organization-owners", 
            "text": "You are the  Owner  of your organization if you created it. You can add other owners (these will usually be other teachers who you wish to give admin rights to).\nThere are 2 ways you can do this:", 
            "title": "Add organization owners"
        }, 
        {
            "location": "/dashboard/organisations/#add-a-new-user-to-your-organization-owners-group", 
            "text": "Click your name/gravatar, bottom of the left hand pane    Click the name of your organization (under  My Organizations )    Click the  Members  tab    In the   Invite Teacher to the Organization  area, enter in their Email address and check the 'Add this teacher to owners group'.    An email will be sent to your colleague containing a link to sign up and on completion they will be added into your Organization automatically and to the  Owners  group. N.B.  They must use the email address the invitation was sent to or they will not be added to the Organization.    Any invitations not completed will show in the area below and where you can also 'Resend' or 'Revoke' if you require. Once the invitee has joined the organization they will no longer show in this area but show in the  All Members  list below and also  Owners  list.", 
            "title": "Add a new user to your Organization Owners group"
        }, 
        {
            "location": "/dashboard/organisations/#add-an-existing-codio-user-to-your-organization-owners-group", 
            "text": "Click your name/gravatar, bottom of the left hand pane    Click on the name of your  educational organization - under  My Organizations , which is about halfway down the screen.    Click the  Members  tab    Click  Owners     You should see yourself listed as an owner. To add another teacher, choose the  Add User  drop down and as you type their Codio Username, the listing will filter down so you can then select them.", 
            "title": "Add an existing Codio user to your Organization Owners group"
        }, 
        {
            "location": "/dashboard/organisations/#add-students", 
            "text": "You do not add students to an organization directly. They are added by inviting them to join a course. Please  click here  for more information.  Codio also creates test students so instructors are able to see how students interact with a course. This is described in the course section.  If you are using an LMS for a class then the LMS platform will handle the addition of students to the Codio class automatically.", 
            "title": "Add students"
        }, 
        {
            "location": "/dashboard/organisations/#student-consent-form", 
            "text": "The student consent form is a feature for Codio organizations. It allows you to show an IP consent form, whose content you create yourself, to Codio users.  To configure the consent form information, click on your user name from the dashboard. Next, select your organization. You will then see the  IP Consent  tab at the top of the screen.  If you enable this feature, all students will be shown the form when they first create an account. If a student has already created an account then the next time they sign in, they will be shown the form. They will not be able to access Codio until they do consent.", 
            "title": "Student consent form"
        }, 
        {
            "location": "/dashboard/organisations/#creating-content", 
            "text": "You should first create the content that you wish to display to the student. You enter your text in the lower portion of the screen. You can use markdown to format your text. If you are not familiar with markdown, here is a reference for markdown:   Daring Fireball  - the author of markdown   You can press the  Save Draft  button to save your changes and continue editing later.  You can also  Preview  your changes to see how the rendered output appears.", 
            "title": "Creating content"
        }, 
        {
            "location": "/dashboard/organisations/#publishing-and-revisions", 
            "text": "You need to publish your changes so that they appear to the student. You can create new versions over time. Earlier versions of the form can be recalled by selecting the version from the drop down list.  Once you are happy with your text, you press the  Publish new version  button.", 
            "title": "Publishing and revisions"
        }, 
        {
            "location": "/dashboard/organisations/#exporting-student-consent-data", 
            "text": "If you would like to download a log of all students who have consented, press the  Download CSV  link in the upper section.  The CSV file contains the following data   User name  Codio user ID  Email address  Revision of the consent form they consented to  Date and time of the consent.", 
            "title": "Exporting student consent data"
        }, 
        {
            "location": "/dashboard/organisations/#view-organization-members", 
            "text": "Sometimes you might need to check who is registered as a member of your educational organization. To view all members of your school organization follow these steps:    Click your name/gravatar, bottom of the left hand pane    Click on the name of your  educational organization - under  My Organizations , which is about halfway down the screen.    Click the  Members  tab    Click  All Members     You will be able to see all the members of your school organization.  The  Test Students  group contains the demo student accounts created for you when the Organization was created. See  Test Students  for more information.  The  Users without class  group contains all users that are not members of a class. See  Delete Class  for more information.  This may be as a result of a class being deleted or it may be that a new user has joined your organization but is not yet either a Teacher or a Student in a class.\nSelect this group and you can then remove these users from your organization if required.  Please note that removing users from your Organization does not delete their Codio account. Only the account owner can  delete their account .", 
            "title": "View organization members"
        }, 
        {
            "location": "/dashboard/organisations/#student-dashboard-settings", 
            "text": "Organization owners can manage the student dashboard view by setting their default page to 'My Projects' as an alternative to  My Classroom  as well as optionally hiding  My Classroom  and  Courses  menu items.  To do this, access the administration tools:   Click on your profile picture (bottom left of  Classes )  Click the name of your institution (under  My Organizations )  You will see admin options listed across the top of the page.  Select  Dashboard Settings  Make the required changes and  Update  to save the changes   N.B.  Your students may need to reload Codio in their browser when they next log in for the changes to be visible to them  Access for students to individual courses can also be managed in the course permissions. See  Restrict Course access  for more information.", 
            "title": "Student dashboard settings"
        }, 
        {
            "location": "/dashboard/organisations/#custom-script", 
            "text": "To integrate third-party systems to help/track students, custom scripts can be enabled.  Enabling this will allow third-party systems (such as  sense.network  to help/track students.  In all cases, the  userid , email  and the user type (Student/Teacher) will be passed.  If required by the third-party system used, custom js code can be included in the  Custom Script  section.  Any such code should be entered without script tags.  e.g.  var http = new XMLHttpRequest();\nvar url = 'https://userdomain/url'; //Change to valid URL for your third-party system\nvar params = 'userId=' + codio.userId ;\nhttp.open('POST', url, true);\nhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\nhttp.onreadystatechange = function() {//Call a function when the state changes.\n    if(http.readyState == 4   http.status == 200) {\n        alert(http.responseText);\n    }\n}\nhttp.send(params);  You can also add  console.log  entries to be able to test/view output  e.g.  console.log('params', codio);\nconsole.log('params', window);\nconsole.log('params', document)\nconsole.log(window.codio.currentPage)\nconsole.log(window.codio.totalNumberOfPages)   If you require any assistance with this, please don't hesitate to  contact us  in the usual manner.", 
            "title": "Custom script"
        }, 
        {
            "location": "/dashboard/organisations/#remove-owners", 
            "text": "You may want to remove one or more of the owners you have set for your organization. It is worth noting that you always need at least one owner. (If you want to know how to add owners, jump to  add organization owners ).  To remove owners:    Click your name/gravatar, bottom of the left hand pane    Click on the name of your  educational organization - under  My Organizations , which is about halfway down the screen.    If you want to remove the owner rights of anyone in your organization, Click the  Members  tab    Under  Permanent Teams , Click  Owners     Choose  Remove  on the right hand side of the name of the person whose rights you want to remove. (note: you must always have at least one person in this group to act as the owner)", 
            "title": "Remove owners"
        }, 
        {
            "location": "/dashboard/organisations/#remove-members", 
            "text": "There are some occasions where you may want to remove old members in order to make room for new members - for example if a class of students leaves and you want to use the account licences for other students.  To remove members:    Click your name/gravatar, bottom of the left hand pane    Click on the name of your  educational organization - under  My Organizations , which is about halfway down the screen.    Click the  Members  tab    Under  Permanent Teams , Click  All Members     You will be able to see all the members of your school organization.    Choose  Remove  on the right hand side of the name of the person who you want to remove from your organization.    If you want to use the freed-up accounts with new students, follow the steps listed in  Add Users", 
            "title": "Remove members"
        }, 
        {
            "location": "/dashboard/organisations/#organization-assessments-library", 
            "text": "In addition to Codio's global assessments library, you can create Organization assessments libraries. This allows your faculty to share assessment items with other instructors similar to how you can share Courses within an Organization.", 
            "title": "Organization Assessments Library"
        }, 
        {
            "location": "/dashboard/organisations/#create-an-organization-assessments-library", 
            "text": "Click your name/gravatar, bottom of the left hand pane    Click the name of your organization (under  My Organizations )    Click the Assessments Library tab    Click \u201cCreate a New Library\u201d    Enter the name of the assessments library you want to create and press \u201cCreate\u201d    Read more about assessment libraries  here .", 
            "title": "Create an Organization Assessments Library"
        }, 
        {
            "location": "/dashboard/organisations/#add-collaborators-to-an-assessments-library", 
            "text": "Under the Assessments Library tab, click on the library you want to add collaborators to   \n* Click on the Permissions tab.  Add Permission:  Either type the user name or use the drop down arrow to select an organization member to give permission to. By default, the collaborators are given \u201cRead\u201d permission, meaning they cannot add to or edit assessments in the library. To give a user \u201cWrite\u201d permission, simply select the permission level next to their user name in the list.  Read Permission for Teachers:   Turning this on allows all Teachers in the organization to have \u201cRead\u201d permission, meaning they cannot add to or edit assessments in the library.   Remove:  To remove a collaborator, simply press the \u201cRemove\u201d button next to their user name. Please note that is \u201cRead permission for teachers\u201d is turned on, that user may still have read permission if they are still a teacher account and a member of the organization.", 
            "title": "Add Collaborators to an Assessments Library"
        }, 
        {
            "location": "/dashboard/organisations/#publicprivate-settings", 
            "text": "Organization owners can disable this feature to allow members of the Organization to create Public Projects/Stacks/Starter Packs/Courses and Modules. By default, these will be created as Private.  Private projects can still be shared to other users in the normal manner. See  Permissions  N.B.  Any existing Projects/Stacks/Starter Packs/Courses and Modules created by members of the organization prior to any changes being made will not be effected  To enable the creation of Public Projects/Stacks/Starter Packs/Courses and Modules, access the administration tools:   Click on your profile picture (bottom left of  Classes )  Click the name of your institution (under  My Organizations )  You will see admin options listed across the top of the page.  Select  Organization Settings  Go to the Private/Public Settings area and click the slider to disable this, and  Update  to save the changes   Organization owners can also block Codio support team from being able to access members accounts to provide platform support.  See also:   Creating and importing a project  Creating a Stack  Creating a Pack  Creating a course", 
            "title": "Public/private settings"
        }, 
        {
            "location": "/dashboard/organisations/#gigaboxes", 
            "text": "Codio's default boxes are allocated 400MB of memory. If you need larger boxes then you can upgrade your subscription to give access to 1GB, 2GB, 8GB,16GB and GPU (for GPU-accelerated instances) boxes.  You purchase a specific number of Gigaboxes that can be used by anyone within your organization. Codio tracks usage based on active projects rather than total projects. In other words, you can have 100 projects which use a Gigabox but as long as only one is active at a time, this requires only a single Gigabox unit to be purchased.  To see the status of your current Gigabox usage, for all users   Click on your user name in the dashboard  Select your organization   Click on the Organization Settings tab   You can then scroll down to the Gigaboxes section.", 
            "title": "Gigaboxes"
        }, 
        {
            "location": "/dashboard/organisations/#delete-organization", 
            "text": "If, for any reason you want to completely delete your organization, you can do so in the following way:    Click your name/gravatar, bottom of the left hand pane    Click on the name of your  educational organization - under  My Organizations , which is about halfway down the screen.    Click the  Organization settings  tab    Go to the  Delete  section at the bottom of the page, and type the confirmation code. Note that once your school action has been deleted, the action cannot be reverted.", 
            "title": "Delete organization"
        }, 
        {
            "location": "/dashboard/organisations/#organisation-contact-url", 
            "text": "If you wish to set your own contact URL's for your students (e.g. you have a forum or LMS discussion area for them to use or you have your own resources available to assist students), you can do so in the following way:    Click your name/gravatar, bottom of the left hand pane    Click on the name of your  educational organization - under  My Organizations , which is about halfway down the screen.    Click the  Organization settings  tab    Go to the  Education Settings  section toward the  bottom of the page, and enter the text you wish to show along with the URL you wish to direct your students to. You can set as many options as you require and also define the default option that will be checked automatically for the students.    If these are set, when a student uses any of the ways to contact us, they will be shown all the options in addition to contacting Codio directly if they have a problem accessing the Codio platform, or loading a unit can contact us.      These can also be set at the  class  level so if you have specific areas/forums for your classes for students to raise questions, you can set the contact URL there and it will override the organisation setting   N.B. \"Teacher\" accounts will not be effected by this setting and they will still be able to contact Codio in the usual manner. See  Support  for more on this", 
            "title": "Organisation contact URL"
        }, 
        {
            "location": "/dashboard/organisations/#organisation-release-grades", 
            "text": "By default Students are not shown the grades until you decide to release them to the class but if you wish to automatically  Release Grades  when students complete a unit, you can enable this feature so when you create new  classes  this option is automatically enabled.  Enabling this feature will not effect existing classes    Click your name/gravatar, bottom of the left hand pane    Click on the name of your  educational organization - under  My Organizations , which is about halfway down the screen.    Click the  Organization settings  tab    Go to the  Education Settings  section toward the  bottom of the page, and enable the feature    The status of this feature can be changed in individual classes if required. See  here  for more information", 
            "title": "Organisation release grades"
        }, 
        {
            "location": "/dashboard/overview/", 
            "text": "A brief overview of the Codio dashboard.", 
            "title": "Overview"
        }, 
        {
            "location": "/dashboard/support/", 
            "text": "If you need support, then the most effective way is to use our integrated support system. You will find this in the dashboard and the IDE.\n\n\nDashboard\n\uf0c1\n\n\nSupport is available in the dashboard from the \nChat\n link on the left.\n\n\nIDE\n\uf0c1\n\n\nSupport is available within the IDE from the \nHelp\n menu item, then \nSupport\n.\n\n\nSupport Dialog\n\uf0c1\n\n\nThere is a support dialog that appears when you invoke the support option. This tracks all conversations and threads you have had with Codio and where you can also start a new conversation.\n\n\n\n\nIf you are in Codio, you can see when a reply to your query arrives even if you have closed the support dialog box\n\n\n\nStudent Support\n\uf0c1\n\n\nYou can set a Contact URL for your students at the organisation level, see \nOrganisation Contact URL\n and/or at the class level, see \nClass Contact URL\n so they can raise any questions they may have directly to your preferred area\n\n\nIf you set the contact URL for a class, this will override any contact URL you may have set at the organisation level.\n\n\nStudents will then be given the option to report a problem, ask a question related to their course work or if they have a problem accessing the Codio platform, or loading a unit can contact us\n\n\n\n\nN.B. \"Teacher\" accounts will not be effected by this setting and they will still be able to contact Codio in the usual manner.", 
            "title": "Support"
        }, 
        {
            "location": "/dashboard/support/#dashboard", 
            "text": "Support is available in the dashboard from the  Chat  link on the left.", 
            "title": "Dashboard"
        }, 
        {
            "location": "/dashboard/support/#ide", 
            "text": "Support is available within the IDE from the  Help  menu item, then  Support .", 
            "title": "IDE"
        }, 
        {
            "location": "/dashboard/support/#support-dialog", 
            "text": "There is a support dialog that appears when you invoke the support option. This tracks all conversations and threads you have had with Codio and where you can also start a new conversation.   If you are in Codio, you can see when a reply to your query arrives even if you have closed the support dialog box", 
            "title": "Support Dialog"
        }, 
        {
            "location": "/dashboard/support/#student-support", 
            "text": "You can set a Contact URL for your students at the organisation level, see  Organisation Contact URL  and/or at the class level, see  Class Contact URL  so they can raise any questions they may have directly to your preferred area  If you set the contact URL for a class, this will override any contact URL you may have set at the organisation level.  Students will then be given the option to report a problem, ask a question related to their course work or if they have a problem accessing the Codio platform, or loading a unit can contact us   N.B. \"Teacher\" accounts will not be effected by this setting and they will still be able to contact Codio in the usual manner.", 
            "title": "Student Support"
        }, 
        {
            "location": "/project/books/", 
            "text": "Introduction\n\uf0c1\n\n\nCodio Books lets you build a complete book, with chapters, sections and pages that can be nested to any depth to form a table of contents and associated content that mirrors a normal book structure. Parts of a book can then be mapped to course assignments for course assignments.\n\n\nOften, a student will want to review materials taught earlier in a course. With books, they are able to do this even though that content does not form a part of the current assignment. This is very useful for revision purposes prior to lab, assessments, exams etc.\n\n\nA Codio book still sits on top of a Codio box so you have the same capabilities that projects and assignments have. Before we introduced books, switching assignments wasted time as a new assignment needed to load, which took several seconds. If you frequently switch assignments (for instance during student revision) this delay becomes irritating. With a book, there is no delay and the student can freely access all parts of the book irrespective of which assignment they are accessing.\n\n\nRecommendations\n\uf0c1\n\n\nWe strongly recommend you have a thorough understanding of the following before embarking on large scale books.\n\n\n\n\nContent authoring\n\n\nCourses\n, especially how \ncourses map to books\n\n\nAssigning content to courses\n\n\nLimitations (see below)\n\n\n\n\nLimitations, restrictions and when not to use a book\n\uf0c1\n\n\nThere are cases where authoring your content in a book is not appropriate. For more information on this, please refer to \nlimitations and restrictions\n.\n\n\nCourses\n\uf0c1\n\n\nRather than assign a Book to a course, you can map any sections of the Book to the usual course and module structure. So you can still divide a course into modules and assignments and assign these to a course but, provided the course author allows it, students can look at any part of the book even when assigned a single assignment. This is ideal for referring back to material covered previously and for general revision. See \nBook Visibility\n for more information.\n\n\nAssessments\n\uf0c1\n\n\nAlthough it is entirely up to the book author, a book will usually contains a number of assessments. When you map a course assignment to a section of the book, any assessments that fall within that assignment are shown in the course dashboard.\n\n\nYou should make a decision as to when assessments should be in the book and when they are better suited to a project assignment. Generally speaking, standard assessments that are used to monitor student engagement with content belong in the book.\n\n\nQuestions that are assigned to a course for homework or lab assessments could also go in a book but are usually better in a course project assignment. Please refer to \nlimitations and restrictions\n for a discussion on cheating related risks to putting assessments in a book.\n\n\nLimitations and restrictions\n\uf0c1\n\n\nWhen you map book content to a course assignment, you should be aware that certain features may not work as expected.\n\n\nBecause a book sits on a single Codio box, if the student is able to access the terminal window or is able to see the file tree, they can effectively access parts of the book that are outside the scope of the assignment. In many cases, this does not matter, but you should be aware of it.\n\n\nHere are some specific things to be aware of.\n\n\n\n\nAuto grade script\n: in \nassignment settings\n, you can specify an auto grade script to execute when the student makes the assignment as complete. You can still use this but if the script you are executing needs to be assignment specific, then you should include an argument that is passed to your script so it knows the assignment context.\n\n\nPlagiarism\n - plagiarism detection makes little sense in books. If you have are doing coding assignments, then you should use a \nproject assignment\n within a course.\n\n\nMark as complete\n: this works as expected but, unlike course project assignments and projects, it cannot set the project to be read-only as the book project can be mapped to other assignments which will require access to the box.\n\n\nSecure assessments\n: if you want to minimize the risk of student cheating, then you should understand that students may be able to access the terminal window and access all parts of the underlying box. As a result, we would recommend that more \nsecure assessments\n are placed in project assignments rather than book based assignments. This also allows full disabling of the box by setting a project to read-only after being marked as complete.\n\n\n\n\nCreating and managing books\n\uf0c1\n\n\nCreating a new book\n\uf0c1\n\n\nCreating a new book is done from the main books screen. Press the large blue \nNew Book\n button in the top right of the screen.\n\n\nYou will get the same options for creating a book as for a project, so you can start from scratch or import from a project or a Git repo. You also have control over visibility as with projects and courses.\n\n\nEditing a book in the IDE\n\uf0c1\n\n\nOnce the book has been created, you can edit the book in the IDE by clicking on the book.\n\n\nEditing a book's settings\n\uf0c1\n\n\nModify a book's settings by clicking on the gear icon.\n\n\nDeleting a book\n\uf0c1\n\n\nYou can delete a book by clicking on the gear icon and then pressing the \nDelete\n button.\n\n\nTable of contents\n\uf0c1\n\n\nThe table of contents is edited using the Codio Guide authoring capability. This is the same functionality as available for authoring project and project assignment content.\n\n\nPlease \nclick here\n for full details.\n\n\nEditing page content\n\uf0c1\n\n\nThe page content is edited using the Codio Guide authoring capability. This is the same funcitonality as available for authoring project and project assignment content.\n\n\nPlease \nclick here\n for full details.\n\n\nPublishing and the stack\n\uf0c1\n\n\nIt is important to understand how and why a book is published.\n\n\nUntil you publish a book, it behaves exactly as a project does. You can open it up and work with it but it cannot be accessed by anyone or mapped to a course until it has been published. After a book is published, you can continue to work on the book without the published version being affected.\n\n\nPlease note the following.\n\n\n\n\nPublishing creates a snapshot of the book and creates a new version.\n\n\nYou can continue work on the book without affecting the published version.\n\n\nWhen you map a course assignment to a book, it will only pull from a published version.\n\n\n\n\nWhen you press the \nPublish\n button, the following screen will appear.\n\n\n\n\nNew stack (no modifications) or only code workspace changes made\n\uf0c1\n\n\nIf, in your book, you have\n\n\n\n\nonly made changes to the code workspace (the contents of the file tree in the IDE or \n/home/codio/workspace\n)\n\n\nor you have switched the stack but not made any stack modifications or installed any software since\n\n\n\n\nthen you should\n\n\n\n\nEnter the changelog text, which is a description of the changes made since the last publish.\n\n\nPress the \nStack Unchanged\n button.\n\n\nPress the \nPublish Book\n button.\n\n\n\n\n\n\nStack modified\n\uf0c1\n\n\nIf you have made any changes to the stack then you should press the \nStack modified\n button. Please be aware that changes to the stack can be made indirectly by applications as well as manual file changes. For example, if you modified a database's contents that is not configured to live in the workspace area then these count as stack changes.\n\n\n\n\nYou should now decide whether you want to\n\n\n\n\ncreate a new version of the stack used by the book\n\n\ncreate a brand new stack for this book.\n\n\n\n\nStack modified : New Stack Version\n\uf0c1\n\n\nNote that if the stack you are using is not owned by you or you don't have permissions to modify the stack, then you will not be able to select this option. In this case you should create a new stack as explained below under \nStack modified: New Stack\n.\n\n\nYou should enter a description of the stack changes made and then press \nPublish Book\n. The new stack version will appear in your stacks listing in the normal way.\n\n\n\n\nStack modified: New Stack\n\uf0c1\n\n\nIf you do not have permissions to create a new stack version or you want to create a new stack that this and potentially other books, projects or assignments should use, then select this option.\n\n\nThis will create a new stack with the permissions you specify. To give access only to others within your organization, select \nPrivate\n and then select the owner organization from the drop down list below.\n\n\nIt will take a few minutes to prepare the stack, so please be patient. Once it is created, it will be visible your stacks listing.\n\n\n\n\nLater book modifications\n\uf0c1\n\n\nIf, after publishing, you make further changes to our book then you will need to re-publish when you want those changes are available to courses. This will not happen automatically. You will need to update the project assignment within your course to pull the published version by pressing \nUpdate to latest version\n.\n\n\nCourse mapping\n\uf0c1\n\n\nA book cannot be assigned to a course without mapping it through a course. The advantage of this approach is that you can break your book into smaller chunks that map to lessons or lectures.\n\n\nYou can map the entire book through a single course assignment if you are not concerned about detailed assignment mappings.\n\n\nPlease refer to \nCreating book based course assignments\n page for details on how to do this.\n\n\nPermissions and collaboration\n\uf0c1\n\n\nBy default, a book is only available to you for editing purposes and only you can create courses from a Book.\n\n\nYou can change permissions to allow others\n\n\n\n\nto edit your book\n\n\nto create courses from your book.\n\n\n\n\nTo modify the permissions, goto \nBooks\n from the dashboard. Then select the settings icon.\n\n\n\n\nPrivate / Public visibility\n\uf0c1\n\n\nIf the book is set to \nPrivate\n, unless you override the permissions, only you can modify a book contents and create course assignments from it. Private books cannot be assigned to public courses.\n\n\nIf the book is set to \nPublic\n, then any Codio user inside or outside your organization can create courses from your book but they will not be able to edit it.  The default organization setting restricts the ability to create Public books. To allow this, see \nPublic/Private Settings\n.\n\n\n\n\nPermissions and collaboration\n\uf0c1\n\n\nIf you want 2 or more people to collaborate on a book, you need to understand how Codio manages this process.\n\n\nYou need to give explicit permission to other users or to an organization and apply write permissions.\n\n\nThe permissions can be changed by selecting the \nPermissions\n tab on the book settings screen. You should first specify which user or organization you want to grant permissions to. You need to know the precise organization or user name and this is case sensitive. We do not support lookups as the potential for incorrect assignment is too great.\n\n\n\n\nYou can grant the following permissions.\n\n\n\n\nRead\n : this allows the user or organization specified to create course assignments from your book.\n\n\nWrite\n : this allows the user or organization to create course assignments and to edit your book. If you want to co-author/collaborate with another user on a book, then you an either follow the process described below or you can use git and a remote git repo.\n\n\n\n\nIt is important to understand that each user editing a book is not actually editing the same physical project. Codio uses snapshotting of the latest published version. If using the basic collaboration approach described below and not git, then you should remember that \nonly one user should make changes at a time\n.\n\n\nIf User A and User B want to collaborate, then they each need to inform the other when they are working on the content. If they fail to do so, then one person will have to surrender their changes at some point.\n\n\nLet's say User A has created a book and authored some content. User A now wants User B to be able to work on the content. User A should first \npublish\n the book. Be aware that if User A does not publish the book, then User B will start with an empty book.\n\n\nWhen User B accesses the book (from the \nShared with me\n tab on the main books listing), Codio will take a snapshot of the published book and User B can start work on it. In other words, User B is \nnot\n editing User A's book, User B is now working on a clone of the published book.\n\n\nUser B now makes changes to the book. When done, User B should publish the book and inform User A that the changes are complete and published. At this point, when User A opens the project, a dialog will appear showing that User B has published new changes. User A can now update her own version of the book from this published version. And so the cycle continues.\n\n\n\n\nYou can do this with as many users as you like, provided that only one user is making changes at a time.\n\n\nCreating course assignments\n\uf0c1\n\n\nBooks cannot be accessed directly by students. Once your book is \npublished\n, you need to \nmap parts of it to one or more course assignments\n, which can then be \nassigned to a course\n.", 
            "title": "Books"
        }, 
        {
            "location": "/project/books/#introduction", 
            "text": "Codio Books lets you build a complete book, with chapters, sections and pages that can be nested to any depth to form a table of contents and associated content that mirrors a normal book structure. Parts of a book can then be mapped to course assignments for course assignments.  Often, a student will want to review materials taught earlier in a course. With books, they are able to do this even though that content does not form a part of the current assignment. This is very useful for revision purposes prior to lab, assessments, exams etc.  A Codio book still sits on top of a Codio box so you have the same capabilities that projects and assignments have. Before we introduced books, switching assignments wasted time as a new assignment needed to load, which took several seconds. If you frequently switch assignments (for instance during student revision) this delay becomes irritating. With a book, there is no delay and the student can freely access all parts of the book irrespective of which assignment they are accessing.", 
            "title": "Introduction"
        }, 
        {
            "location": "/project/books/#recommendations", 
            "text": "We strongly recommend you have a thorough understanding of the following before embarking on large scale books.   Content authoring  Courses , especially how  courses map to books  Assigning content to courses  Limitations (see below)", 
            "title": "Recommendations"
        }, 
        {
            "location": "/project/books/#limitations-restrictions-and-when-not-to-use-a-book", 
            "text": "There are cases where authoring your content in a book is not appropriate. For more information on this, please refer to  limitations and restrictions .", 
            "title": "Limitations, restrictions and when not to use a book"
        }, 
        {
            "location": "/project/books/#courses", 
            "text": "Rather than assign a Book to a course, you can map any sections of the Book to the usual course and module structure. So you can still divide a course into modules and assignments and assign these to a course but, provided the course author allows it, students can look at any part of the book even when assigned a single assignment. This is ideal for referring back to material covered previously and for general revision. See  Book Visibility  for more information.", 
            "title": "Courses"
        }, 
        {
            "location": "/project/books/#assessments", 
            "text": "Although it is entirely up to the book author, a book will usually contains a number of assessments. When you map a course assignment to a section of the book, any assessments that fall within that assignment are shown in the course dashboard.  You should make a decision as to when assessments should be in the book and when they are better suited to a project assignment. Generally speaking, standard assessments that are used to monitor student engagement with content belong in the book.  Questions that are assigned to a course for homework or lab assessments could also go in a book but are usually better in a course project assignment. Please refer to  limitations and restrictions  for a discussion on cheating related risks to putting assessments in a book.", 
            "title": "Assessments"
        }, 
        {
            "location": "/project/books/#limitations-and-restrictions", 
            "text": "When you map book content to a course assignment, you should be aware that certain features may not work as expected.  Because a book sits on a single Codio box, if the student is able to access the terminal window or is able to see the file tree, they can effectively access parts of the book that are outside the scope of the assignment. In many cases, this does not matter, but you should be aware of it.  Here are some specific things to be aware of.   Auto grade script : in  assignment settings , you can specify an auto grade script to execute when the student makes the assignment as complete. You can still use this but if the script you are executing needs to be assignment specific, then you should include an argument that is passed to your script so it knows the assignment context.  Plagiarism  - plagiarism detection makes little sense in books. If you have are doing coding assignments, then you should use a  project assignment  within a course.  Mark as complete : this works as expected but, unlike course project assignments and projects, it cannot set the project to be read-only as the book project can be mapped to other assignments which will require access to the box.  Secure assessments : if you want to minimize the risk of student cheating, then you should understand that students may be able to access the terminal window and access all parts of the underlying box. As a result, we would recommend that more  secure assessments  are placed in project assignments rather than book based assignments. This also allows full disabling of the box by setting a project to read-only after being marked as complete.", 
            "title": "Limitations and restrictions"
        }, 
        {
            "location": "/project/books/#creating-and-managing-books", 
            "text": "", 
            "title": "Creating and managing books"
        }, 
        {
            "location": "/project/books/#creating-a-new-book", 
            "text": "Creating a new book is done from the main books screen. Press the large blue  New Book  button in the top right of the screen.  You will get the same options for creating a book as for a project, so you can start from scratch or import from a project or a Git repo. You also have control over visibility as with projects and courses.", 
            "title": "Creating a new book"
        }, 
        {
            "location": "/project/books/#editing-a-book-in-the-ide", 
            "text": "Once the book has been created, you can edit the book in the IDE by clicking on the book.", 
            "title": "Editing a book in the IDE"
        }, 
        {
            "location": "/project/books/#editing-a-books-settings", 
            "text": "Modify a book's settings by clicking on the gear icon.", 
            "title": "Editing a book's settings"
        }, 
        {
            "location": "/project/books/#deleting-a-book", 
            "text": "You can delete a book by clicking on the gear icon and then pressing the  Delete  button.", 
            "title": "Deleting a book"
        }, 
        {
            "location": "/project/books/#table-of-contents", 
            "text": "The table of contents is edited using the Codio Guide authoring capability. This is the same functionality as available for authoring project and project assignment content.  Please  click here  for full details.", 
            "title": "Table of contents"
        }, 
        {
            "location": "/project/books/#editing-page-content", 
            "text": "The page content is edited using the Codio Guide authoring capability. This is the same funcitonality as available for authoring project and project assignment content.  Please  click here  for full details.", 
            "title": "Editing page content"
        }, 
        {
            "location": "/project/books/#publishing-and-the-stack", 
            "text": "It is important to understand how and why a book is published.  Until you publish a book, it behaves exactly as a project does. You can open it up and work with it but it cannot be accessed by anyone or mapped to a course until it has been published. After a book is published, you can continue to work on the book without the published version being affected.  Please note the following.   Publishing creates a snapshot of the book and creates a new version.  You can continue work on the book without affecting the published version.  When you map a course assignment to a book, it will only pull from a published version.   When you press the  Publish  button, the following screen will appear.", 
            "title": "Publishing and the stack"
        }, 
        {
            "location": "/project/books/#new-stack-no-modifications-or-only-code-workspace-changes-made", 
            "text": "If, in your book, you have   only made changes to the code workspace (the contents of the file tree in the IDE or  /home/codio/workspace )  or you have switched the stack but not made any stack modifications or installed any software since   then you should   Enter the changelog text, which is a description of the changes made since the last publish.  Press the  Stack Unchanged  button.  Press the  Publish Book  button.", 
            "title": "New stack (no modifications) or only code workspace changes made"
        }, 
        {
            "location": "/project/books/#stack-modified", 
            "text": "If you have made any changes to the stack then you should press the  Stack modified  button. Please be aware that changes to the stack can be made indirectly by applications as well as manual file changes. For example, if you modified a database's contents that is not configured to live in the workspace area then these count as stack changes.   You should now decide whether you want to   create a new version of the stack used by the book  create a brand new stack for this book.", 
            "title": "Stack modified"
        }, 
        {
            "location": "/project/books/#stack-modified-new-stack-version", 
            "text": "Note that if the stack you are using is not owned by you or you don't have permissions to modify the stack, then you will not be able to select this option. In this case you should create a new stack as explained below under  Stack modified: New Stack .  You should enter a description of the stack changes made and then press  Publish Book . The new stack version will appear in your stacks listing in the normal way.", 
            "title": "Stack modified : New Stack Version"
        }, 
        {
            "location": "/project/books/#stack-modified-new-stack", 
            "text": "If you do not have permissions to create a new stack version or you want to create a new stack that this and potentially other books, projects or assignments should use, then select this option.  This will create a new stack with the permissions you specify. To give access only to others within your organization, select  Private  and then select the owner organization from the drop down list below.  It will take a few minutes to prepare the stack, so please be patient. Once it is created, it will be visible your stacks listing.", 
            "title": "Stack modified: New Stack"
        }, 
        {
            "location": "/project/books/#later-book-modifications", 
            "text": "If, after publishing, you make further changes to our book then you will need to re-publish when you want those changes are available to courses. This will not happen automatically. You will need to update the project assignment within your course to pull the published version by pressing  Update to latest version .", 
            "title": "Later book modifications"
        }, 
        {
            "location": "/project/books/#course-mapping", 
            "text": "A book cannot be assigned to a course without mapping it through a course. The advantage of this approach is that you can break your book into smaller chunks that map to lessons or lectures.  You can map the entire book through a single course assignment if you are not concerned about detailed assignment mappings.  Please refer to  Creating book based course assignments  page for details on how to do this.", 
            "title": "Course mapping"
        }, 
        {
            "location": "/project/books/#permissions-and-collaboration", 
            "text": "By default, a book is only available to you for editing purposes and only you can create courses from a Book.  You can change permissions to allow others   to edit your book  to create courses from your book.   To modify the permissions, goto  Books  from the dashboard. Then select the settings icon.", 
            "title": "Permissions and collaboration"
        }, 
        {
            "location": "/project/books/#private-public-visibility", 
            "text": "If the book is set to  Private , unless you override the permissions, only you can modify a book contents and create course assignments from it. Private books cannot be assigned to public courses.  If the book is set to  Public , then any Codio user inside or outside your organization can create courses from your book but they will not be able to edit it.  The default organization setting restricts the ability to create Public books. To allow this, see  Public/Private Settings .", 
            "title": "Private / Public visibility"
        }, 
        {
            "location": "/project/books/#permissions-and-collaboration_1", 
            "text": "If you want 2 or more people to collaborate on a book, you need to understand how Codio manages this process.  You need to give explicit permission to other users or to an organization and apply write permissions.  The permissions can be changed by selecting the  Permissions  tab on the book settings screen. You should first specify which user or organization you want to grant permissions to. You need to know the precise organization or user name and this is case sensitive. We do not support lookups as the potential for incorrect assignment is too great.   You can grant the following permissions.   Read  : this allows the user or organization specified to create course assignments from your book.  Write  : this allows the user or organization to create course assignments and to edit your book. If you want to co-author/collaborate with another user on a book, then you an either follow the process described below or you can use git and a remote git repo.   It is important to understand that each user editing a book is not actually editing the same physical project. Codio uses snapshotting of the latest published version. If using the basic collaboration approach described below and not git, then you should remember that  only one user should make changes at a time .  If User A and User B want to collaborate, then they each need to inform the other when they are working on the content. If they fail to do so, then one person will have to surrender their changes at some point.  Let's say User A has created a book and authored some content. User A now wants User B to be able to work on the content. User A should first  publish  the book. Be aware that if User A does not publish the book, then User B will start with an empty book.  When User B accesses the book (from the  Shared with me  tab on the main books listing), Codio will take a snapshot of the published book and User B can start work on it. In other words, User B is  not  editing User A's book, User B is now working on a clone of the published book.  User B now makes changes to the book. When done, User B should publish the book and inform User A that the changes are complete and published. At this point, when User A opens the project, a dialog will appear showing that User B has published new changes. User A can now update her own version of the book from this published version. And so the cycle continues.   You can do this with as many users as you like, provided that only one user is making changes at a time.", 
            "title": "Permissions and collaboration"
        }, 
        {
            "location": "/project/books/#creating-course-assignments", 
            "text": "Books cannot be accessed directly by students. Once your book is  published , you need to  map parts of it to one or more course assignments , which can then be  assigned to a course .", 
            "title": "Creating course assignments"
        }, 
        {
            "location": "/project/packs/", 
            "text": "Starter Packs are a very powerful way to create and manage templated projects. Please read the following sections for full details.\n\n\nWhat is a starter pack?\n\uf0c1\n\n\nStarter Packs are a very powerful way to create and manage templated projects that include\n\n\n\n\nThe base Ubuntu operating system. This is always present so you don't need to think about this really.\n\n\nA \nStack\n (base software dependencies such as databases, languages and other system components). This is entirely optional, but Codio's Stack features ensure that you don't have to laboriously configure the Stack.\n\n\nAny code present in your Project. It's entirely up to you what you include. It could be a Wordpress site, or a front-end framework or some working code examples.\n\n\n\n\nWith Starter Packs, you can organize and share your own Starter Packs as well as find Codio Certified Packs and even Packs published by others.\n\n\nCertified packs\n\uf0c1\n\n\nTo save you as much time as possible, we include a range of Codio certified Starter Packs. These have been tried and tested by the Codio team. We are adding to these all the time.\n\n\nTo access these, click on the \nCertified\n header. You can then use the search field to look for technologies.\n\n\n\n\nRequesting additional packs\n\uf0c1\n\n\nIf you want additional Starter Packs, you can easily create your own. However, if you feel that we should add a new Codio Certified Pack, then please email us at help@codio.com with full details and we'll try to get it added for you.\n\n\nSelecting a pack\n\uf0c1\n\n\nOnce you have found the Starter Pack you want to use, you can create a new Project based on this in either of these ways\n\n\n\n\nClick on the name of the pack  to see full details about this Pack before pressing the \nUse Pack\n button in the top right of the information panel.\n\n\n\n\nYou will then be transferred to the \nCreate Project\n dialog, so Codio can create a new Project for you based on the selected Starter Pack.\n\n\n\n\nCreating a pack\n\uf0c1\n\n\nYou can create a new Starter Pack by pressing the \nNew Pack\n button in the top right of the screen. Please refer to the \nPack Guidelines\n for details in how to approach Starter Pack creation.\n\n\nSelecting the Source\n\uf0c1\n\n\nYou need to tell Codio where to get its source code from. There are two options\n\n\n\n\nCodio\n : you have a Codio project where your code is located\n\n\nGit/Mercurial\n : you can specify a Git or Mercurial repo that gets pulled in afresh each time someone creates a new Project based on your Starter Pack.  \nPlease Note\n: We strongly advise that you use the HTTPS URL to the repository. If you use the SSH URL any users that do not have their Codio SSH Key uploaded to the remote will not be able to create a project from this Starter Pack.\n\n\n\n\nSelecting a Stack\n\uf0c1\n\n\nEach Starter Pack requires a \nStack\n. If you only need a base Ubuntu Box, then you do not need to specify a Stack.\n\n\nPlease be aware that a Starter Pack is simply a Codio Stack plus a code workspace. If you based your Starter Pack on a Project that has had the Box modified (additional Box components installed, npm global install etc.), then these will not be present in a Project created from the Starter Pack.\n\n\nDescription Details\n\uf0c1\n\n\nYou can add short and long descriptions as well as an image and tags. Tags are important and will allow you and others to find Packs in a more targeted fashion.\n\n\nVisibilty\n\uf0c1\n\n\nBy default, Starter Packs are kept private to your account until you make them public, at which point they will appear in the \nPopular\n and \nAll\n Packs listings for all Codio Users.\n\n\nIf you are a member of an Organization, the Organization owner can disable the ability for you to create public starter packs. See \nPublic/Private Settings\n.\n\n\nIf you want to keep your Starter Pack private to your Organization, you can select the Private option and set the Owner option to your Organization.\n\n\nImportant\n : please do not make your Packs public unless they are tried, tested and fit for public consumption so as not to fill the \nAll\n listing with junk.\n\n\nOwnership\n\uf0c1\n\n\nYou can specify whether other Codio Users within your Organization are able to access and Administer your Packs. If you are not a member of an Organization, this cannot be used.\n\n\nWrite a tutorial\n\uf0c1\n\n\nCodio guide\n is a very powerful content authoring feature that lets you write course content that is fully integrated into the IDE. So if you are creating a starter pack for tuition purposes, this is extremely useful and easy to use.\n\n\nPack guidelines\n\uf0c1\n\n\nWhen creating a Starter Pack, here are some ideas on strategy and how to make them as useful as possible.\n\n\nStarting Stack\n\uf0c1\n\n\nWhen you create a Pack, you should first create a new Project from the closest Stack that meets your requirements. You can also use the Base Stack and then \ninstall your own components\n.\n\n\n.codio file\n\uf0c1\n\n\nIt is often helpful to create a \n.codio\n file in the root of your project so that running common terminal commands and previewing can be accessed quickly and easily. \nInformation on this can be found here\n.\n\n\nTo enable your project to preview inside a Codio tab, you will need to configure the preview to run over https. We recommend this as being the default behavior as it will run both inside Codio and in a new browser tab this way. This will require you to configure any services to run on any port between 9500 and 9000.\n\n\nThe following \n.codio\n file is typical:\n\n\n{\n// Configure your Run and Preview buttons here.\n\n// Run button configuration\n  \ncommands\n: {\n        \nStart Express Server\n: \nnpm start\n\n  },\n\n// Preview button configuration\n  \npreview\n: {\n        \nPreview\n: \nhttps://{{domain}}:9500/\n\n  }\n}\n\n\n\n\nConfiguring the correct port in the range of 9500 to 9999 depends on the server side technology you are using.\n\n\nCreate a new Stack\n\uf0c1\n\n\nIf you have installed or configured any components that are not a part of the code workspace, then you may want to create a special Stack that your Starter Pack uses. If you don't do this, then Projects that are created from the Starter Pack will need to have these modifications performed after Project creation. This might be an \nnpm install\n if you are using Node.\n\n\nUse GitHub\n\uf0c1\n\n\nAlthough you can use Codio as the source for your Starter Pack, we recommend pushing your Project to a Git remote. This gives better version control over time. The creation process is also somewhat faster.\n\n\nWhen you create the Starter Pack, you can specify the Git url.\n\n\nLong Description\n\uf0c1\n\n\nYou should include a full description of your Starter Pack that appears when someone clicks on it within the Starter Packs listing. Check out some of Codio Certified Pack long descriptions.\n\n\nWrite a Codio Guide\n\uf0c1\n\n\nCodio Guides\n is a very powerful content authoring feature that lets you write course content that is fully integrated into the IDE. So if you are creating a Starter Pack for tuition purposes, a Guide is extremely useful and easy to use.\n\n\nREADME.md file\n\uf0c1\n\n\nYou should create a \nREADME.md\n file in the root of your project that displays helpful information the user can see when they open the project.\n\n\nBelow is a template you could use.\n\n\n# Title\nPut the name of your Pack here containing the primary technology or technologies with a version number, along with a short description.\n\n## Using the Pack\nDescribe how the user should get started. Point to your `.codio` menu options if you have created any.\n\n## How the Pack was prepared\nIt can be helpful to others or even to you later on to describe how you built the Pack. What we often do is to include a set of instructions that can be pasted into a Bash script to recreate the Pack with a single command.\n\n**Example** : This Starter Pack was built on the Node+Grunt+MongoDB Stack. We than ran the following commands before creating the Pack.\n\nnpm install -g express\nnpm install -g express-generator\nexpress .\nnpm install\n\n## Useful Links\n\n- [Express site](http://expressjs.com/)\n- [Node](http://nodejs.org/)\n- [npm](https://www.npmjs.org/)\n- [Grunt](http://gruntjs.com/)\n- [MongoDB](https://www.mongodb.org)\n\n\n\n\n\nUpdating a pack\n\uf0c1\n\n\nThe best way to update an existing Starter Pack is to follow these steps\n\n\n\n\nEither a) create a new Project from your Starter Pack or b) locate an existing Project that you wish to use for your Starter Pack.\n\n\nLocate the Starter Pack again the main listing.\n\n\nPress Edit.\n\n\nIn the \nSOURCE\n field, locate the correctly configured Project.\n\n\nPress \nCREATE\n at the bottom of the form.\n\n\n\n\nCodio does not support versioning for Starter Packs.\n\n\nChanging the source in the Starter Pack Edit screen\n\uf0c1\n\n\nWhen you edit your Starter Pack, the Source field is enabled if\n\n\n\n\nYou are the owner of the source Project\n\n\nThe Project is present and has not been deleted.\n\n\n\n\nIf someone else owns the Project or if you have deleted the underlying Project, then you can still edit the Project data fields below the Source field and the original Project that was used will be retained.\n\n\nDeleting a pack\n\uf0c1\n\n\nTo delete a Starter Pack, first locate and select the pack. You can then press the red 'Delete' icon at the bottom right of the information screen. You will be required to enter a confirmation code before it is finally deleted.\n\n\nAny projects that were created from a Starter Pack will not be impacted.", 
            "title": "How to use starter packs"
        }, 
        {
            "location": "/project/packs/#what-is-a-starter-pack", 
            "text": "Starter Packs are a very powerful way to create and manage templated projects that include   The base Ubuntu operating system. This is always present so you don't need to think about this really.  A  Stack  (base software dependencies such as databases, languages and other system components). This is entirely optional, but Codio's Stack features ensure that you don't have to laboriously configure the Stack.  Any code present in your Project. It's entirely up to you what you include. It could be a Wordpress site, or a front-end framework or some working code examples.   With Starter Packs, you can organize and share your own Starter Packs as well as find Codio Certified Packs and even Packs published by others.", 
            "title": "What is a starter pack?"
        }, 
        {
            "location": "/project/packs/#certified-packs", 
            "text": "To save you as much time as possible, we include a range of Codio certified Starter Packs. These have been tried and tested by the Codio team. We are adding to these all the time.  To access these, click on the  Certified  header. You can then use the search field to look for technologies.", 
            "title": "Certified packs"
        }, 
        {
            "location": "/project/packs/#requesting-additional-packs", 
            "text": "If you want additional Starter Packs, you can easily create your own. However, if you feel that we should add a new Codio Certified Pack, then please email us at help@codio.com with full details and we'll try to get it added for you.", 
            "title": "Requesting additional packs"
        }, 
        {
            "location": "/project/packs/#selecting-a-pack", 
            "text": "Once you have found the Starter Pack you want to use, you can create a new Project based on this in either of these ways   Click on the name of the pack  to see full details about this Pack before pressing the  Use Pack  button in the top right of the information panel.   You will then be transferred to the  Create Project  dialog, so Codio can create a new Project for you based on the selected Starter Pack.", 
            "title": "Selecting a pack"
        }, 
        {
            "location": "/project/packs/#creating-a-pack", 
            "text": "You can create a new Starter Pack by pressing the  New Pack  button in the top right of the screen. Please refer to the  Pack Guidelines  for details in how to approach Starter Pack creation.", 
            "title": "Creating a pack"
        }, 
        {
            "location": "/project/packs/#selecting-the-source", 
            "text": "You need to tell Codio where to get its source code from. There are two options   Codio  : you have a Codio project where your code is located  Git/Mercurial  : you can specify a Git or Mercurial repo that gets pulled in afresh each time someone creates a new Project based on your Starter Pack.   Please Note : We strongly advise that you use the HTTPS URL to the repository. If you use the SSH URL any users that do not have their Codio SSH Key uploaded to the remote will not be able to create a project from this Starter Pack.", 
            "title": "Selecting the Source"
        }, 
        {
            "location": "/project/packs/#selecting-a-stack", 
            "text": "Each Starter Pack requires a  Stack . If you only need a base Ubuntu Box, then you do not need to specify a Stack.  Please be aware that a Starter Pack is simply a Codio Stack plus a code workspace. If you based your Starter Pack on a Project that has had the Box modified (additional Box components installed, npm global install etc.), then these will not be present in a Project created from the Starter Pack.", 
            "title": "Selecting a Stack"
        }, 
        {
            "location": "/project/packs/#description-details", 
            "text": "You can add short and long descriptions as well as an image and tags. Tags are important and will allow you and others to find Packs in a more targeted fashion.", 
            "title": "Description Details"
        }, 
        {
            "location": "/project/packs/#visibilty", 
            "text": "By default, Starter Packs are kept private to your account until you make them public, at which point they will appear in the  Popular  and  All  Packs listings for all Codio Users.  If you are a member of an Organization, the Organization owner can disable the ability for you to create public starter packs. See  Public/Private Settings .  If you want to keep your Starter Pack private to your Organization, you can select the Private option and set the Owner option to your Organization.  Important  : please do not make your Packs public unless they are tried, tested and fit for public consumption so as not to fill the  All  listing with junk.", 
            "title": "Visibilty"
        }, 
        {
            "location": "/project/packs/#ownership", 
            "text": "You can specify whether other Codio Users within your Organization are able to access and Administer your Packs. If you are not a member of an Organization, this cannot be used.", 
            "title": "Ownership"
        }, 
        {
            "location": "/project/packs/#write-a-tutorial", 
            "text": "Codio guide  is a very powerful content authoring feature that lets you write course content that is fully integrated into the IDE. So if you are creating a starter pack for tuition purposes, this is extremely useful and easy to use.", 
            "title": "Write a tutorial"
        }, 
        {
            "location": "/project/packs/#pack-guidelines", 
            "text": "When creating a Starter Pack, here are some ideas on strategy and how to make them as useful as possible.", 
            "title": "Pack guidelines"
        }, 
        {
            "location": "/project/packs/#starting-stack", 
            "text": "When you create a Pack, you should first create a new Project from the closest Stack that meets your requirements. You can also use the Base Stack and then  install your own components .", 
            "title": "Starting Stack"
        }, 
        {
            "location": "/project/packs/#codio-file", 
            "text": "It is often helpful to create a  .codio  file in the root of your project so that running common terminal commands and previewing can be accessed quickly and easily.  Information on this can be found here .  To enable your project to preview inside a Codio tab, you will need to configure the preview to run over https. We recommend this as being the default behavior as it will run both inside Codio and in a new browser tab this way. This will require you to configure any services to run on any port between 9500 and 9000.  The following  .codio  file is typical:  {\n// Configure your Run and Preview buttons here.\n\n// Run button configuration\n   commands : {\n         Start Express Server :  npm start \n  },\n\n// Preview button configuration\n   preview : {\n         Preview :  https://{{domain}}:9500/ \n  }\n}  Configuring the correct port in the range of 9500 to 9999 depends on the server side technology you are using.", 
            "title": ".codio file"
        }, 
        {
            "location": "/project/packs/#create-a-new-stack", 
            "text": "If you have installed or configured any components that are not a part of the code workspace, then you may want to create a special Stack that your Starter Pack uses. If you don't do this, then Projects that are created from the Starter Pack will need to have these modifications performed after Project creation. This might be an  npm install  if you are using Node.", 
            "title": "Create a new Stack"
        }, 
        {
            "location": "/project/packs/#use-github", 
            "text": "Although you can use Codio as the source for your Starter Pack, we recommend pushing your Project to a Git remote. This gives better version control over time. The creation process is also somewhat faster.  When you create the Starter Pack, you can specify the Git url.", 
            "title": "Use GitHub"
        }, 
        {
            "location": "/project/packs/#long-description", 
            "text": "You should include a full description of your Starter Pack that appears when someone clicks on it within the Starter Packs listing. Check out some of Codio Certified Pack long descriptions.", 
            "title": "Long Description"
        }, 
        {
            "location": "/project/packs/#write-a-codio-guide", 
            "text": "Codio Guides  is a very powerful content authoring feature that lets you write course content that is fully integrated into the IDE. So if you are creating a Starter Pack for tuition purposes, a Guide is extremely useful and easy to use.", 
            "title": "Write a Codio Guide"
        }, 
        {
            "location": "/project/packs/#readmemd-file", 
            "text": "You should create a  README.md  file in the root of your project that displays helpful information the user can see when they open the project.  Below is a template you could use.  # Title\nPut the name of your Pack here containing the primary technology or technologies with a version number, along with a short description.\n\n## Using the Pack\nDescribe how the user should get started. Point to your `.codio` menu options if you have created any.\n\n## How the Pack was prepared\nIt can be helpful to others or even to you later on to describe how you built the Pack. What we often do is to include a set of instructions that can be pasted into a Bash script to recreate the Pack with a single command.\n\n**Example** : This Starter Pack was built on the Node+Grunt+MongoDB Stack. We than ran the following commands before creating the Pack.\n\nnpm install -g express\nnpm install -g express-generator\nexpress .\nnpm install\n\n## Useful Links\n\n- [Express site](http://expressjs.com/)\n- [Node](http://nodejs.org/)\n- [npm](https://www.npmjs.org/)\n- [Grunt](http://gruntjs.com/)\n- [MongoDB](https://www.mongodb.org)", 
            "title": "README.md file"
        }, 
        {
            "location": "/project/packs/#updating-a-pack", 
            "text": "The best way to update an existing Starter Pack is to follow these steps   Either a) create a new Project from your Starter Pack or b) locate an existing Project that you wish to use for your Starter Pack.  Locate the Starter Pack again the main listing.  Press Edit.  In the  SOURCE  field, locate the correctly configured Project.  Press  CREATE  at the bottom of the form.   Codio does not support versioning for Starter Packs.", 
            "title": "Updating a pack"
        }, 
        {
            "location": "/project/packs/#changing-the-source-in-the-starter-pack-edit-screen", 
            "text": "When you edit your Starter Pack, the Source field is enabled if   You are the owner of the source Project  The Project is present and has not been deleted.   If someone else owns the Project or if you have deleted the underlying Project, then you can still edit the Project data fields below the Source field and the original Project that was used will be retained.", 
            "title": "Changing the source in the Starter Pack Edit screen"
        }, 
        {
            "location": "/project/packs/#deleting-a-pack", 
            "text": "To delete a Starter Pack, first locate and select the pack. You can then press the red 'Delete' icon at the bottom right of the information screen. You will be required to enter a confirmation code before it is finally deleted.  Any projects that were created from a Starter Pack will not be impacted.", 
            "title": "Deleting a pack"
        }, 
        {
            "location": "/project/projects/", 
            "text": "Codio works with a series of templates, or Codio stacks.\n\n\nYou can use our pre-configured stacks or create your own. This template approach makes Codio easy to use, configure and adapt.\n\n\nCodio's templates deliver fully preconfigured servers in less than 5 seconds, no matter how complex the configuration..\n\n\nYou can use our pre-configured stacks or create your own.\n\n\nWhat is a project?\n\uf0c1\n\n\nHere are the key things you need to know about projects.\n\n\n\n\nA project is an Ubuntu server.\n\n\nWe commonly refer to your project server as a \nbox\n.\n\n\nYou can create as many projects as you need.\n\n\nEach project box is fully isolated from every other one.\n\n\nWhen you open a project you are taken into the box and are shown the Codio IDE.\n\n\nYou have access to the command line via a terminal window.\n\n\nYou have sudo level privileges to your server, so you can install and configure any box exactly as you please.\n\n\nYou can snapshot the software configuration, commonly referred to as a \nstack\n, of any box and add it to the \nStacks\n template library.\n\n\nYou can snapshot the combination of a Stack and the project code workspace and add it to the \nStarter Packs\n template library.\n\n\n\n\nStrong recommendations\n\uf0c1\n\n\nWe strongly recommend that you are familiar with the following concepts if you plan to assign projects to classes of students. Even if you don't knowledge of the following project related features will stand you in good stead.\n\n\n\n\nThe Codio IDE\n\n\nStacks\n\n\nStarter Packs\n\n\nAuthoring tutorial content with Codio Guides and Books\n\n\nCourses\n\n\nClass management\n\n\n\n\nCreating and importing a project\n\uf0c1\n\n\nCreate a new project, or import one by, clicking on the New Project button on the Dashboard.\n\n\n\n\nYou can then choose which of the following Project creation methods you want to use.\n\n\nCreating an empty project\n\uf0c1\n\n\nSelect a commonly used Stack from the available list:\n\n\nFor example:\n\n\n\n\nLAMP:\n LAMP Stack containing PHP, Apache and MySql with no code workspace.\n\n\nPython:\n Python Stack with no code workspace.\n\n\nEmpty Stack:\n an empty Ubuntu Box with no code workspace (suitable for HTML/CSS/JS projects).\n\n\n\n\nProjects created from a Stack will include an explanatory README.md file providing useful information to help you get started and will open automatically for newly created projects.\n\n\nThe list of stacks is only a starting point. You can take any stack and then customize it from the command line. Users have \nsudo\n level privileges and so can install and configure exactly as they please.\n\n\nRefer to the \nsection on Stacks\n to learn how to create and manage your own software configuration templates.\n\n\nImporting code into a project\n\uf0c1\n\n\nClick on the \n'Click here....'\n link to import or select an alternative software configuration:\n\n\n\n\nEmpty with Stack\n will create a new project with a stack you select from the full stack options, rather than the limited options available on the main \nNew Project\n screen.\n\n\nFork project\n lets you create a new project from another of your projects.\n\n\nStarter Pack\n which is the combination of a Stack and a pre-configured code workspace.\n\n\nImport\n lets you import from Git or from a Zip file of a Codio project.\n\n\n\n\n\n\nSelecting a Stack\n\uf0c1\n\n\nIf you have clicked on the \nclick here\n link, you can then specify the Stack your new Project will be assigned.\n\n\nDetails\n\uf0c1\n\n\nYou should give your project a name and a description, which will appear in the projects listing.\n\n\nVisibility\n\uf0c1\n\n\nProjects that are public can be found by any Codio user. If you have a personal subscription or you are a member of an Organization, you can mark the Project as private. In \nMy Projects\n you will see a padlock icon for any Projects that are private.\n\n\nOrganization owners can enable the ability for you to create public projects. See \nPublic/Private Settings\n.\n\n\nYou can assign access read, write and full admin rights (ability for others to access the Box from the terminal) to other users for private projects from within the IDE from the \nProject-\nPermissions\n menu.\n\n\nAccessing your projects\n\uf0c1\n\n\nThe \nMy Projects\n area shows all your coding Projects.\n\n\nOpening a Project\n\uf0c1\n\n\nTo view a project in the IDE, simply click on one of your projects.\n\n\nSorting\n\uf0c1\n\n\nYour Projects can be sorted by name or by date last accessed.\n\n\nFiltering\n\uf0c1\n\n\nYou can search for a specific project by typing into the Search field. The file list will dynamically filter for you as you type.\n\n\nProject Settings\n\uf0c1\n\n\nYou can access your project settings by clicking the gear icon in the right side of the listing.\n\n\nSearching projects\n\uf0c1\n\n\nCodio lets you locate projects in a number of different ways from your project dashboard.\n\n\nNormal Searching\n\uf0c1\n\n\nThe simplest and most powerful way to use search is to simply start typing, whereupon Codio will search within all project names, project description and owner fields and filter your project list accordingly.\n\n\nAdvanced Searching\n\uf0c1\n\n\nIf you want to search in different ways, you can use search tokens to narrow your search. Codio supports the following tokens:\n\n\nTokens with parameters\n\uf0c1\n\n\nThe following tokens allow you to type something after the colon delimiter\n\n\n\n\nname:\n search the project name\n\n\ndesc:\n search the project description\n\n\nowner:\n search the project owner\n\n\norg:\n search for an organization name\n\n\nbegin:\n search for a class start date (Education feature)\n\n\nend:\n search for a class end date (Education feature)\n\n\n\n\nTokens without parameters\n\uf0c1\n\n\nThese tokens do not take any parameters so add a space after them if you have anything else to enter in the search line.\n\n\n\n\nmy:\n show only projects owned by me.\n\n\nshared:\n show only projects that are shared with me.\n\n\npublic:\n show only my public projects.\n\n\nprivate:\n show only my private projects.\n\n\n\n\nExamples\n\uf0c1\n\n\n\n\npublic: desc:javascript\n searches your public projects where 'javascript' appears in the project description.\n\n\nowner:superman javascript\n searches projects owned by the user 'superman'' where 'javascript' appears in the project name or description.\n\n\n\n\nAccessing another user's project\n\uf0c1\n\n\nIf you know the user name of another Codio user, you can enter the URL for their account which is of the format:\n\n\nhttps://codio.com/username\n\n\nYou will then see that user's Dashboard and all public projects will be displayed. You can then load any of those projects into the IDE by clicking on it.\n\n\nYou will not be able to edit the project but you can \nfork\n it into your own account.\n\n\nIf a project has been \nshared\n to you, you will be able to view this from your \nMy Projects \n Shared with me\n area.", 
            "title": "Project Templates"
        }, 
        {
            "location": "/project/projects/#what-is-a-project", 
            "text": "Here are the key things you need to know about projects.   A project is an Ubuntu server.  We commonly refer to your project server as a  box .  You can create as many projects as you need.  Each project box is fully isolated from every other one.  When you open a project you are taken into the box and are shown the Codio IDE.  You have access to the command line via a terminal window.  You have sudo level privileges to your server, so you can install and configure any box exactly as you please.  You can snapshot the software configuration, commonly referred to as a  stack , of any box and add it to the  Stacks  template library.  You can snapshot the combination of a Stack and the project code workspace and add it to the  Starter Packs  template library.", 
            "title": "What is a project?"
        }, 
        {
            "location": "/project/projects/#strong-recommendations", 
            "text": "We strongly recommend that you are familiar with the following concepts if you plan to assign projects to classes of students. Even if you don't knowledge of the following project related features will stand you in good stead.   The Codio IDE  Stacks  Starter Packs  Authoring tutorial content with Codio Guides and Books  Courses  Class management", 
            "title": "Strong recommendations"
        }, 
        {
            "location": "/project/projects/#creating-and-importing-a-project", 
            "text": "Create a new project, or import one by, clicking on the New Project button on the Dashboard.   You can then choose which of the following Project creation methods you want to use.", 
            "title": "Creating and importing a project"
        }, 
        {
            "location": "/project/projects/#creating-an-empty-project", 
            "text": "Select a commonly used Stack from the available list:  For example:   LAMP:  LAMP Stack containing PHP, Apache and MySql with no code workspace.  Python:  Python Stack with no code workspace.  Empty Stack:  an empty Ubuntu Box with no code workspace (suitable for HTML/CSS/JS projects).   Projects created from a Stack will include an explanatory README.md file providing useful information to help you get started and will open automatically for newly created projects.  The list of stacks is only a starting point. You can take any stack and then customize it from the command line. Users have  sudo  level privileges and so can install and configure exactly as they please.  Refer to the  section on Stacks  to learn how to create and manage your own software configuration templates.", 
            "title": "Creating an empty project"
        }, 
        {
            "location": "/project/projects/#importing-code-into-a-project", 
            "text": "Click on the  'Click here....'  link to import or select an alternative software configuration:   Empty with Stack  will create a new project with a stack you select from the full stack options, rather than the limited options available on the main  New Project  screen.  Fork project  lets you create a new project from another of your projects.  Starter Pack  which is the combination of a Stack and a pre-configured code workspace.  Import  lets you import from Git or from a Zip file of a Codio project.", 
            "title": "Importing code into a project"
        }, 
        {
            "location": "/project/projects/#selecting-a-stack", 
            "text": "If you have clicked on the  click here  link, you can then specify the Stack your new Project will be assigned.", 
            "title": "Selecting a Stack"
        }, 
        {
            "location": "/project/projects/#details", 
            "text": "You should give your project a name and a description, which will appear in the projects listing.", 
            "title": "Details"
        }, 
        {
            "location": "/project/projects/#visibility", 
            "text": "Projects that are public can be found by any Codio user. If you have a personal subscription or you are a member of an Organization, you can mark the Project as private. In  My Projects  you will see a padlock icon for any Projects that are private.  Organization owners can enable the ability for you to create public projects. See  Public/Private Settings .  You can assign access read, write and full admin rights (ability for others to access the Box from the terminal) to other users for private projects from within the IDE from the  Project- Permissions  menu.", 
            "title": "Visibility"
        }, 
        {
            "location": "/project/projects/#accessing-your-projects", 
            "text": "The  My Projects  area shows all your coding Projects.", 
            "title": "Accessing your projects"
        }, 
        {
            "location": "/project/projects/#opening-a-project", 
            "text": "To view a project in the IDE, simply click on one of your projects.", 
            "title": "Opening a Project"
        }, 
        {
            "location": "/project/projects/#sorting", 
            "text": "Your Projects can be sorted by name or by date last accessed.", 
            "title": "Sorting"
        }, 
        {
            "location": "/project/projects/#filtering", 
            "text": "You can search for a specific project by typing into the Search field. The file list will dynamically filter for you as you type.", 
            "title": "Filtering"
        }, 
        {
            "location": "/project/projects/#project-settings", 
            "text": "You can access your project settings by clicking the gear icon in the right side of the listing.", 
            "title": "Project Settings"
        }, 
        {
            "location": "/project/projects/#searching-projects", 
            "text": "Codio lets you locate projects in a number of different ways from your project dashboard.", 
            "title": "Searching projects"
        }, 
        {
            "location": "/project/projects/#normal-searching", 
            "text": "The simplest and most powerful way to use search is to simply start typing, whereupon Codio will search within all project names, project description and owner fields and filter your project list accordingly.", 
            "title": "Normal Searching"
        }, 
        {
            "location": "/project/projects/#advanced-searching", 
            "text": "If you want to search in different ways, you can use search tokens to narrow your search. Codio supports the following tokens:", 
            "title": "Advanced Searching"
        }, 
        {
            "location": "/project/projects/#tokens-with-parameters", 
            "text": "The following tokens allow you to type something after the colon delimiter   name:  search the project name  desc:  search the project description  owner:  search the project owner  org:  search for an organization name  begin:  search for a class start date (Education feature)  end:  search for a class end date (Education feature)", 
            "title": "Tokens with parameters"
        }, 
        {
            "location": "/project/projects/#tokens-without-parameters", 
            "text": "These tokens do not take any parameters so add a space after them if you have anything else to enter in the search line.   my:  show only projects owned by me.  shared:  show only projects that are shared with me.  public:  show only my public projects.  private:  show only my private projects.", 
            "title": "Tokens without parameters"
        }, 
        {
            "location": "/project/projects/#examples", 
            "text": "public: desc:javascript  searches your public projects where 'javascript' appears in the project description.  owner:superman javascript  searches projects owned by the user 'superman'' where 'javascript' appears in the project name or description.", 
            "title": "Examples"
        }, 
        {
            "location": "/project/projects/#accessing-another-users-project", 
            "text": "If you know the user name of another Codio user, you can enter the URL for their account which is of the format:  https://codio.com/username  You will then see that user's Dashboard and all public projects will be displayed. You can then load any of those projects into the IDE by clicking on it.  You will not be able to edit the project but you can  fork  it into your own account.  If a project has been  shared  to you, you will be able to view this from your  My Projects   Shared with me  area.", 
            "title": "Accessing another user's project"
        }, 
        {
            "location": "/project/stacks/", 
            "text": "Codio projects are mounted to software configuration templates, known as Codio stacks.\n\n\nYou can use our pre-configured stacks or create your own. This template approach makes Codio easy to use, configure and adapt.\n\n\nCodio\u2019s templates deliver fully preconfigured servers in less than 5 seconds, no matter how complex the configuration.\n\n\nWhat is a stack?\n\uf0c1\n\n\nIt is very important to understand how Stacks work in Codio, especially when working with classes and courses. Incorrect usage can result in a project working when being edited but failing when assigned to a class.\n\n\nA stack refers to the software configuration of a project server (Box). This incorporates everything on the server outside the code workspace (\n/home/codio/workspace\n) that you see in the IDE's file tree.\n\n\nYou can \nsnapshot a box's stack\n at any point and add it to the \nStacks\n template library as we explain later.\n\n\nHow a Codio project works.\n\uf0c1\n\n\nWhen you create a new Codio project, course unit or book, you always specify a stack. The specified stack will contain the operating system (always) and other components such as languages, databases and tools.\n\n\nStack modifications\n\uf0c1\n\n\nYou will often want to make changes to the software on your server. Any such changes you, or an application, makes outside the workspace folder represents a stack change. Whether such changes are made using \nsudo apt-get install\n, manually editing a config file, changes to a database due to application usage etc., these changes all represent stack modifications.\n\n\nAny modifications you make will work fine on the project you are working on as the owner, but as soon as you assign that project or unit to a class of students, the modifications will not be transferred.\n\n\nIn order to address this, you need to ensure that any project with a modified stack first has a clean stack created that includes your modifications and that the project points to that clean stack.\n\n\nThe process for \ncreating a stack\n and \nswitching the project to point to the new stack\n is straightforward.\n\n\nUse Case\n\uf0c1\n\n\nLet\u2019s consider a MySQL database use case. If the database data location is in the usual place within the stack (\n/var/lib/mysql/\n) then when the project is assigned to the class, each student gets their own database, independent of others students, as you would expect.\n\n\nHowever, if the stack is changed for any reason (you, as project owner, change the stack or stack version or your change the stack for an already assigned unit) then all database data would be reset to the state of the new stack as the database data folder is not a part of the workspace.\n\n\nIf you want to keep the database independent of the stack, then you would need to locate the database file in the workspace folder itself (by editing \n/etc/mysql/mysql.conf.d/mysqld.cnf\n. This way, you could update the database software via a stack change but the database data remains intact when you switch stacks.\n\n\nIn summary, you should remember the following \u2026\n\n\n\n\nProject = Selected Stack + Stack Changes + Workspace Folder\n\n\nWhen projects or units are assigned to a class then at the point of the assignment: Unit = Select Stack + Workspace (no stack modifications)\n\n\nStack modifications in the source project or unit are \nnot transferred\n when assigned to a class\n\n\n\n\nOnce the project or unit has been assigned to students, if they happen to make changes to their stacks, then each one is individually handled so there are no issues unless you or they select a new stack from \nProject-\nStacks-\nStack settings\n.\n\n\nStacks and Stack Versions\n\uf0c1\n\n\nWhen you create a brand new stack or a new stack version, in both cases you are creating a new stack internally. The only difference between a stack and a stack version is that the stack versions are nicely organized under an already named stack. This makes them easy to find and prevents your stack list getting unnecessarily long.\n\n\nSo, when referring to a stack in the documentation, we mean either a single stack or a stack version. Assigning a different stack version will also reset all project contents outside the workspace folder to those of the new stack version.\n\n\nWhat to do prior to assigning to a class\n\uf0c1\n\n\nIf you have modified the stack in any way, then there are a few use-cases that commonly occur when working with modified stacks prior to assigning to a class.\n\n\n\n\nProjects\n: generally speaking, if you have made any modifications then you should \ncreate a new stack\n, \nswitch your project to the new stack\n once it is created and finally \nassign it to the class\n. This ensures maximum efficiency and speed. You do this from the class screen by pressing the large blue \n+\n button, then choosing \nAdd project as unit\n. When you are asked if you want to use the projects stack or create a new stack, you can use the project\u2019s stack as this is now clean. If you have not yet created a new stack to incorporate the modifications then you can create a new one when you add the project to a class, or select an existing one, by selecting \nCreate new stack\n. It is good practice to go to your project and set it to point to this stack as soon as possible. It is however, much better practice to update the stack before you assign to the class.\n\n\nCourse units\n : you should always first \ncreate a custom stack\n and then \nswitch the unit\u2019s stack\n, and any other units that use the same configuration, to the newly created stack. You can then \nassign a course module\n (which assigns all its units) to the class.\n\n\nBooks\n : if you are working with a book then the Book points to a stack. If you make any modifications, you have to create a new stack version (or new stack if appropriate) and then \nswitch your stack settings\n to point to the new stack version. Once this has been done, you should publish a new version of your book. The final step is to update the course to update all units that point to a book.\n\n\n\n\nSwitching Stacks\n\uf0c1\n\n\nRemember, when you \nswitch a project\u2019s stack\n from \nProject-\nSettings-\nStack settings\n, all stack modifications that you may have made relative to the original stack will be replaced by the new stack. Usually this is fine as you would have first created the new stack from the project before switching.\n\n\nBooks\n\uf0c1\n\n\nCodio Books are somewhat different. There is an explanation above on handling stack modifications for Books. You can \nrefer to the main Books section\n.\n\n\nModifying a stack\n\uf0c1\n\n\nA Codio project, course unit or book always has a stack associated with it. When you create a new project you specify the stack. You can also \nswitch a project's stack\n at any time.\n\n\nYou can modify the stack at any time. You do not do this directly. Instead, you open up a project, course unit or book and make the stack changes from the \ncommand line\n. The concepts behind this are explained in detail on the \nWhat is a stack?\n page.\n\n\nTo modify a stack you should be aware of the following rules.\n\n\nYou are the owner or have write access\n\uf0c1\n\n\nIf you are the stack owner or have write access to the stack then you are able to create new versions of an existing stack. See \nvisibility settings\n for information on ownership.\n\n\nYou are not the owner and do not have write access\n\uf0c1\n\n\nIf you do not have write access to the stack, which is the case for the Codio certified stacks, then you will first need to create a new stack. After this you can create your own versions from that stack as you will be the owner.\n\n\nIf the stack's is \nPrivate\n and the owner is set to an organization of which you are a member, then you will have write access and will be able to create new versions of that stack. See \nvisibility settings\n for information on ownership.\n\n\nCreating a stack\n\uf0c1\n\n\nPlease make sure you have read \nWhat is a stack?\n as this contains important concepts and information.\n\n\nThis page explains how to create a new stack or a new stack version from a project. Stack management for \ncourse units\n and \nbooks\n is handled by the publish action and is explained in their respective sections.\n\n\nCreate new stack from the IDE\n\uf0c1\n\n\nWith the project open in the IDE, select the menu option \nProject-\nStack-\nCreate New\n. This will allow you to create a new stack or a new version of an existing stack you have the rights to update. By default it will be private to you. If you wish to make it available to others, please refer to the \nVisibility\n information below.\n\n\n\n\nCreate new stack from the dashboard\n\uf0c1\n\n\nFrom the dashboard, click on the \nStacks\n item on the left hand side. On the stacks listing page, press the large blue \n+\n button to create a new stack. You then point to your project.\n\n\n\n\nWhen you have completed the required fields and pressed the \nCreate\n button, we will generate a Stack image for you. This can take a few minutes, depending on the size of the Stack image. You  do not need to remain on this screen while the Stack is created, so feel free to continue to other parts of Codio. The source project will not be accessible until the stack has been created.\n\n\n\n\nStack Blueprint\n: you should specify is the Codio project that you want to use for your Stack blueprint. Enter any part of your Project name and you will see them listed in a dropdown.\n\n\nName and Description\n: next, add a short name for your Stack and a longer description. You can also add a more detailed overview of your Stack by selecting the \"add a long description\" link. You can write this long description in Markdown.\n\n\nImage\n: you can also add an image to make your Stack more instantly recognizable in the listing. This should be a square image, which will be reduced in size and will appear in a circle as shown below.\n\n\nTags\n: you can also add tags to your Stack. The tags should be component names ideally. There is an autocomplete function that will help you to use already defined tags to avoid tag duplication and ensure maximum efficiency when searching.\n\n\n\n\nStack Guidelines\n\uf0c1\n\n\nWhen creating a Stack, here are some ideas on strategy and how to make them as useful as possible.\n\n\nStarting Stack\n\uf0c1\n\n\nWhen you create a Stack, you should first create a new Project from the closest Stack that meets your requirements. You can also use the Base Stack and then \ninstall your own components\n.\n\n\nLong Description\n\uf0c1\n\n\nYou should include a full description of your Stack that appears when someone clicks on it within the Stacks listing. This information will also be available to users in Projects by going to \nProject\nStack Info\n in their Project, which should open automatically. Check out some of Codio Certified Pack long descriptions.\n\n\nBelow is a template you could use.\n\n\n# Title\nPut the name of your Stack here.\n\n## Using the Stack\nDescribe how the user should get started.\n\n## Starter Pack\nIf there are related Starter Packs you have created from this Stack that include code files, detail them here.\n\n## Components Installed\nIt can be helpful to others or even to you later on to describe the installed Components and versions.\n\n## Configuration Files\nDetail where any component configuration files can be found. As you install components from `Tools\nInstall Software` a log file of all this information will be opened.\n\n## General Information\nInclude any general information on the use and operation of any installed components.\n\n## Codio Documentation\nWe recommend you include useful links to the Codio Documentation.\n\n##Stack Specific Links\nProvide useful links on the Stack components.\n\n\n\n\nExample (from Codio Certified LAMP Stack)\n\uf0c1\n\n\n# LAMP\n\n## Using this Stack\nThis Codio Stack gives you a complete **LAMP** stack ready to use and with all services up and running.\n\n## Related Stacks \n Starter Packs\nThere are various other Stacks and Starter Packs that may be of interest. Please search the listing for\n\n- Stack : **LEMP**\n- Stack : **LAPP**\n- Stack : **LAMP** + Composer\n- Starter Pack : **Laravel** (LAMP + Composer + Laravel)\n\n## Components Installed\nThis Stack contains the following major component versions\n\n- **PHP** 5.5.9\n- **Apache** 2.4.7\n- **MySQL** 14.14 Distrib 5.5.46\n\n## Configuration Files\nYou can find configuration files in the following locations\n\n- **PHP config file** : `/etc/php5/apache2/php.ini`\n- **Apache config** : `/etc/apache2/apache2.conf`\n- **MySQL default config file** :  `/etc/mysql/my.cnf`\n\n## General Information\n\n# Apache Server\nApache should be started by default. You can manually start, stop and restart it using the following terminal commands:\n\n$ sudo service apache2 start\n$ sudo service  apache2 stop\n$ sudo service  apache2 restart\n\n\n# MySQL\n\n## Start, Stop, Restart the MySQL server\nMySQL should be started by default. You can manually start, stop and restart the MySQL server using the following terminal commands:\n\n$ sudo service mysql start\n$ sudo service mysql stop\n$ sudo service mysql restart\n\n\n## Connecting to the MySQL monitor\nAssuming the MySQL server is started, you can connect to it using `mysql` from the terminal. Exit using `ctrl+c`.\n\n## Root Password\nIf you want to set the root password, use the following command from the terminal\n\nmysqladmin -u root password NEWPASSWORD`\n\n\n## Codio Documentation\nPlease be aware of the following useful links\n\n- [How to Access your Box](/ide/boxes/)\n- [If your firewall only allows access to port 80](/ide/boxes/ext-access/)\n- [Creating Codio menu items to avoid repetitive terminal commands](/ide/boxes/runmenu/)\n- [Using Git in Codio](/ide/editing/git/)\n- [Customizing the IDE settings](/ide/customization/)\n- [Restarting your Box](/ide/boxes/restart-reset/)\n- [Creating multiple code editing panels in the IDE](/ide/panels/)\n\n## Stack Specific Links\n\n- [PHP](http://php.net)\n- [Apache](http://httpd.apache.org)\n- [MySQL](http://dev.mysql.com)\n\n## Updating Components\nIf this Stack is not using any of the latest components, please email support@codio.com and we will update it.\n\n\n\n\nVisibility and Ownership\n\uf0c1\n\n\nSee \nvisibility settings\n for information on who can access or edit your stack.\n\n\nBy default, Stacks are kept private to your account until you make them public, at which point they will appear in the \nPopular\n and \nAll\n Stacks listings for all Codio Users.\n\n\nIf you set the owner of the Stack to your Organization, they will appear in the \nOrganizations\n listing for members of your Organization\n\n\nIf you are a member of an Organization, the Organization owner can enable the ability for you to create public Stacks. See \nPublic/Private Settings\n.\n\n\nIf you want to keep your Stack private to your Organization, select the Private option and set the Owner option to your Organization.\n\n\nOwner\n\uf0c1\n\n\nBy default, you will be the owner of this Stack and only you can edit it and \ncreate new versions\n of the Stack.\n\n\nIf you want to allow others to see and administer your Stack, you can assign it to another organization.\n\n\nSwitching a project's stack\n\uf0c1\n\n\nThere are various reasons why you might want to switch your project's stack to a new one.\n\n\n\n\nCreated new stack\n : this is the most important and common use case. If you have modified your stack and then created a new stack (or a new version) from it then it makes sense to point your project to it once it has been created.\n\n\nMistake\n : you specified the wrong stack when you created the project.\n\n\nNew stack version\n : a new version of a stack has been created and you want to point to the latest one.\n\n\n\n\nImportant\n\uf0c1\n\n\nYou should remember that when you switch a stack, everything outside the workspace folder you see in the tree (\n/home/codio/workspace\n) will be replaced by the new stack. This is discussed at length in the \nWhat is a stack?\n section.\n\n\nFrom the projects listing\n\uf0c1\n\n\nSelect the gear icon for the project from the main projects listing. You will then be able to change the stack or the stack version.\n\n\nUpdating a stack (version)\n\uf0c1\n\n\nHaving created a new stack, you may later want to update the Stack properties or take another stack snapshot from a Codio project.\n\n\nYou can update your stack\n\n\n\n\nfrom the \nStacks\n area of the Codio dashboard\n\n\nfrom the IDE\n\n\n\n\nUpdating from the dashboard\n\uf0c1\n\n\n\n\nTo update the Stack, first select it from the stack list. You can then update the stack name or description fields by pressing the \nEdit\n button.\n\n\nTo create a new version of a stack, press the \nNew Version\n button. Then choose the project from which the stack should be generated from the \nSource\n field. Add a comment describing what has changed since the last version. At that point, a new version will be generated. This can take a few minutes.\n\n\n\n\nUpdating from the IDE\n\uf0c1\n\n\nIt is often simpler to update a stack from within the IDE and the project that you are currently working on. After you have finished making changes to your box (installing new components etc.) you can create a new stack version from the \nProjects-\nStack-\nCreate New\n menu.\n\n\n\n\nYou should now press the \nNew Version\n button and enter some text to describe the stack changes since the last version.\n\n\nIt will take a few minutes to build the new version. If your stack is pointing to the latest version then you need not do anything more. If it is pointing to a specific stack version, then you will need to change the stack to point to either the 'latest version' or to the version of the stack that was just built. You do this from the the \nProject-\nStack-\nSettings\n menu item.\n\n\nViewing version history\n\uf0c1\n\n\nYou can view the version history of a stack by from the \nStacks\n area of the Codio dashbaord. Select the stack from the listing and then click on the \nVersions\n link at the top of the page.\n\n\n\n\nUsing a stack\n\uf0c1\n\n\nYou can select a stack\n\n\n\n\nwhen a new project is created\n\n\nor by \nswitching the stack\n if the project is already created\n\n\nor directly from the stacks listing, as explained below.\n\n\n\n\nTo create a new project from the Stack listing, you should first locate your Stack. You can select from My Stacks, Certified or All.\n\n\n\n\nTo search for a Stack, enter appropriate search text in the search field. This will typically be the name of the main Stack component(s) you are searching for. This will search the Stack name and description as well as any tags used.\n\n\nHaving located a Stack, you can click on the item to get more detailed information. If you want to create a new Project immediately without seeing any further detailed information, click on the icon on the right hand side of the Stack item. If there are multiple versions of this Stack, it will use the latest.\n\n\nOnce you select a Stack, you will be taken to the Create Project dialog and your chosen Stack will be pre-selected. The latest version of the stack will always be used. If you want to choose a specific version of the stack, then read the following section.\n\n\nStack Versions\n\uf0c1\n\n\nBy default, Codio will use the latest version of the selected Stack. Codio Stacks also supports versioning.\n\n\nThere are two ways to use a version.\n\n\n\n\nFirstly, click on the body of a Stack item, which takes you to the information screen for the selected stack. On the top right of the information panel, you can drop down the Use Stack button and select a Stack version.\n\n\nYou can also select the \nVersions\n link above the main listing and see information about each version.\n\n\n\n\n\n\nStack listings\n\uf0c1\n\n\nCodio Stacks lets you create and manage the combination of a Codio Box and installed system level components (languages, databases, web servers etc.) so that you can instantly create new Projects and Boxes from Stack libraries.\n\n\n\n\nStacks are divided up into the following searchable areas within the Stacks listing\n\n\n\n\nMy Stacks\n are Stacks that were created by you.\n\n\nCertified Stacks\n are Stacks that are approved by Codio and cover a wide range of common stack configurations.\n\n\nPopular Stacks\n are the most commonly downloaded, publicly available stacks created by other Codio users; you should note that Codio does not warrant that these Stacks are tested or safe.\n\n\nAll Stacks\n gives you a searchable repository of all Stacks, whether created by you, others as well as Codio Certified Stacks.\n\n\n\n\nIf you cannot find a Stack that meets your needs, then you can configure your own Stack and add it to your Stack library \nas described here\n.\n\n\nExcluding files \n folders\n\uf0c1\n\n\nWhen you create a Stack, it will base the Stack on the contents of the \n/home/codio\n folder but omit your code workspace.\n\n\nIf you want to exclude other files or folders then you should follow these steps\n\n\n\n\nCreate a file \n~/.codio/stack_exclusions\n in the Project you will be basing the Stack on.\n\n\nadd the paths to any file or folder you wish to be excluded from the Stack\n\n\nadd the full path to the file (when in the folder, run \nreadlink -f \nfilename\n to get the full path)\n\n\ncurrently, globbing and wildcards are not supported\n\n\none path per line", 
            "title": "Stacks"
        }, 
        {
            "location": "/project/stacks/#what-is-a-stack", 
            "text": "It is very important to understand how Stacks work in Codio, especially when working with classes and courses. Incorrect usage can result in a project working when being edited but failing when assigned to a class.  A stack refers to the software configuration of a project server (Box). This incorporates everything on the server outside the code workspace ( /home/codio/workspace ) that you see in the IDE's file tree.  You can  snapshot a box's stack  at any point and add it to the  Stacks  template library as we explain later.", 
            "title": "What is a stack?"
        }, 
        {
            "location": "/project/stacks/#how-a-codio-project-works", 
            "text": "When you create a new Codio project, course unit or book, you always specify a stack. The specified stack will contain the operating system (always) and other components such as languages, databases and tools.", 
            "title": "How a Codio project works."
        }, 
        {
            "location": "/project/stacks/#stack-modifications", 
            "text": "You will often want to make changes to the software on your server. Any such changes you, or an application, makes outside the workspace folder represents a stack change. Whether such changes are made using  sudo apt-get install , manually editing a config file, changes to a database due to application usage etc., these changes all represent stack modifications.  Any modifications you make will work fine on the project you are working on as the owner, but as soon as you assign that project or unit to a class of students, the modifications will not be transferred.  In order to address this, you need to ensure that any project with a modified stack first has a clean stack created that includes your modifications and that the project points to that clean stack.  The process for  creating a stack  and  switching the project to point to the new stack  is straightforward.", 
            "title": "Stack modifications"
        }, 
        {
            "location": "/project/stacks/#use-case", 
            "text": "Let\u2019s consider a MySQL database use case. If the database data location is in the usual place within the stack ( /var/lib/mysql/ ) then when the project is assigned to the class, each student gets their own database, independent of others students, as you would expect.  However, if the stack is changed for any reason (you, as project owner, change the stack or stack version or your change the stack for an already assigned unit) then all database data would be reset to the state of the new stack as the database data folder is not a part of the workspace.  If you want to keep the database independent of the stack, then you would need to locate the database file in the workspace folder itself (by editing  /etc/mysql/mysql.conf.d/mysqld.cnf . This way, you could update the database software via a stack change but the database data remains intact when you switch stacks.  In summary, you should remember the following \u2026   Project = Selected Stack + Stack Changes + Workspace Folder  When projects or units are assigned to a class then at the point of the assignment: Unit = Select Stack + Workspace (no stack modifications)  Stack modifications in the source project or unit are  not transferred  when assigned to a class   Once the project or unit has been assigned to students, if they happen to make changes to their stacks, then each one is individually handled so there are no issues unless you or they select a new stack from  Project- Stacks- Stack settings .", 
            "title": "Use Case"
        }, 
        {
            "location": "/project/stacks/#stacks-and-stack-versions", 
            "text": "When you create a brand new stack or a new stack version, in both cases you are creating a new stack internally. The only difference between a stack and a stack version is that the stack versions are nicely organized under an already named stack. This makes them easy to find and prevents your stack list getting unnecessarily long.  So, when referring to a stack in the documentation, we mean either a single stack or a stack version. Assigning a different stack version will also reset all project contents outside the workspace folder to those of the new stack version.", 
            "title": "Stacks and Stack Versions"
        }, 
        {
            "location": "/project/stacks/#what-to-do-prior-to-assigning-to-a-class", 
            "text": "If you have modified the stack in any way, then there are a few use-cases that commonly occur when working with modified stacks prior to assigning to a class.   Projects : generally speaking, if you have made any modifications then you should  create a new stack ,  switch your project to the new stack  once it is created and finally  assign it to the class . This ensures maximum efficiency and speed. You do this from the class screen by pressing the large blue  +  button, then choosing  Add project as unit . When you are asked if you want to use the projects stack or create a new stack, you can use the project\u2019s stack as this is now clean. If you have not yet created a new stack to incorporate the modifications then you can create a new one when you add the project to a class, or select an existing one, by selecting  Create new stack . It is good practice to go to your project and set it to point to this stack as soon as possible. It is however, much better practice to update the stack before you assign to the class.  Course units  : you should always first  create a custom stack  and then  switch the unit\u2019s stack , and any other units that use the same configuration, to the newly created stack. You can then  assign a course module  (which assigns all its units) to the class.  Books  : if you are working with a book then the Book points to a stack. If you make any modifications, you have to create a new stack version (or new stack if appropriate) and then  switch your stack settings  to point to the new stack version. Once this has been done, you should publish a new version of your book. The final step is to update the course to update all units that point to a book.", 
            "title": "What to do prior to assigning to a class"
        }, 
        {
            "location": "/project/stacks/#switching-stacks", 
            "text": "Remember, when you  switch a project\u2019s stack  from  Project- Settings- Stack settings , all stack modifications that you may have made relative to the original stack will be replaced by the new stack. Usually this is fine as you would have first created the new stack from the project before switching.", 
            "title": "Switching Stacks"
        }, 
        {
            "location": "/project/stacks/#books", 
            "text": "Codio Books are somewhat different. There is an explanation above on handling stack modifications for Books. You can  refer to the main Books section .", 
            "title": "Books"
        }, 
        {
            "location": "/project/stacks/#modifying-a-stack", 
            "text": "A Codio project, course unit or book always has a stack associated with it. When you create a new project you specify the stack. You can also  switch a project's stack  at any time.  You can modify the stack at any time. You do not do this directly. Instead, you open up a project, course unit or book and make the stack changes from the  command line . The concepts behind this are explained in detail on the  What is a stack?  page.  To modify a stack you should be aware of the following rules.", 
            "title": "Modifying a stack"
        }, 
        {
            "location": "/project/stacks/#you-are-the-owner-or-have-write-access", 
            "text": "If you are the stack owner or have write access to the stack then you are able to create new versions of an existing stack. See  visibility settings  for information on ownership.", 
            "title": "You are the owner or have write access"
        }, 
        {
            "location": "/project/stacks/#you-are-not-the-owner-and-do-not-have-write-access", 
            "text": "If you do not have write access to the stack, which is the case for the Codio certified stacks, then you will first need to create a new stack. After this you can create your own versions from that stack as you will be the owner.  If the stack's is  Private  and the owner is set to an organization of which you are a member, then you will have write access and will be able to create new versions of that stack. See  visibility settings  for information on ownership.", 
            "title": "You are not the owner and do not have write access"
        }, 
        {
            "location": "/project/stacks/#creating-a-stack", 
            "text": "Please make sure you have read  What is a stack?  as this contains important concepts and information.  This page explains how to create a new stack or a new stack version from a project. Stack management for  course units  and  books  is handled by the publish action and is explained in their respective sections.", 
            "title": "Creating a stack"
        }, 
        {
            "location": "/project/stacks/#create-new-stack-from-the-ide", 
            "text": "With the project open in the IDE, select the menu option  Project- Stack- Create New . This will allow you to create a new stack or a new version of an existing stack you have the rights to update. By default it will be private to you. If you wish to make it available to others, please refer to the  Visibility  information below.", 
            "title": "Create new stack from the IDE"
        }, 
        {
            "location": "/project/stacks/#create-new-stack-from-the-dashboard", 
            "text": "From the dashboard, click on the  Stacks  item on the left hand side. On the stacks listing page, press the large blue  +  button to create a new stack. You then point to your project.   When you have completed the required fields and pressed the  Create  button, we will generate a Stack image for you. This can take a few minutes, depending on the size of the Stack image. You  do not need to remain on this screen while the Stack is created, so feel free to continue to other parts of Codio. The source project will not be accessible until the stack has been created.   Stack Blueprint : you should specify is the Codio project that you want to use for your Stack blueprint. Enter any part of your Project name and you will see them listed in a dropdown.  Name and Description : next, add a short name for your Stack and a longer description. You can also add a more detailed overview of your Stack by selecting the \"add a long description\" link. You can write this long description in Markdown.  Image : you can also add an image to make your Stack more instantly recognizable in the listing. This should be a square image, which will be reduced in size and will appear in a circle as shown below.  Tags : you can also add tags to your Stack. The tags should be component names ideally. There is an autocomplete function that will help you to use already defined tags to avoid tag duplication and ensure maximum efficiency when searching.", 
            "title": "Create new stack from the dashboard"
        }, 
        {
            "location": "/project/stacks/#stack-guidelines", 
            "text": "When creating a Stack, here are some ideas on strategy and how to make them as useful as possible.", 
            "title": "Stack Guidelines"
        }, 
        {
            "location": "/project/stacks/#starting-stack", 
            "text": "When you create a Stack, you should first create a new Project from the closest Stack that meets your requirements. You can also use the Base Stack and then  install your own components .", 
            "title": "Starting Stack"
        }, 
        {
            "location": "/project/stacks/#long-description", 
            "text": "You should include a full description of your Stack that appears when someone clicks on it within the Stacks listing. This information will also be available to users in Projects by going to  Project Stack Info  in their Project, which should open automatically. Check out some of Codio Certified Pack long descriptions.  Below is a template you could use.  # Title\nPut the name of your Stack here.\n\n## Using the Stack\nDescribe how the user should get started.\n\n## Starter Pack\nIf there are related Starter Packs you have created from this Stack that include code files, detail them here.\n\n## Components Installed\nIt can be helpful to others or even to you later on to describe the installed Components and versions.\n\n## Configuration Files\nDetail where any component configuration files can be found. As you install components from `Tools Install Software` a log file of all this information will be opened.\n\n## General Information\nInclude any general information on the use and operation of any installed components.\n\n## Codio Documentation\nWe recommend you include useful links to the Codio Documentation.\n\n##Stack Specific Links\nProvide useful links on the Stack components.", 
            "title": "Long Description"
        }, 
        {
            "location": "/project/stacks/#example-from-codio-certified-lamp-stack", 
            "text": "# LAMP\n\n## Using this Stack\nThis Codio Stack gives you a complete **LAMP** stack ready to use and with all services up and running.\n\n## Related Stacks   Starter Packs\nThere are various other Stacks and Starter Packs that may be of interest. Please search the listing for\n\n- Stack : **LEMP**\n- Stack : **LAPP**\n- Stack : **LAMP** + Composer\n- Starter Pack : **Laravel** (LAMP + Composer + Laravel)\n\n## Components Installed\nThis Stack contains the following major component versions\n\n- **PHP** 5.5.9\n- **Apache** 2.4.7\n- **MySQL** 14.14 Distrib 5.5.46\n\n## Configuration Files\nYou can find configuration files in the following locations\n\n- **PHP config file** : `/etc/php5/apache2/php.ini`\n- **Apache config** : `/etc/apache2/apache2.conf`\n- **MySQL default config file** :  `/etc/mysql/my.cnf`\n\n## General Information\n\n# Apache Server\nApache should be started by default. You can manually start, stop and restart it using the following terminal commands:\n\n$ sudo service apache2 start\n$ sudo service  apache2 stop\n$ sudo service  apache2 restart\n\n\n# MySQL\n\n## Start, Stop, Restart the MySQL server\nMySQL should be started by default. You can manually start, stop and restart the MySQL server using the following terminal commands:\n\n$ sudo service mysql start\n$ sudo service mysql stop\n$ sudo service mysql restart\n\n\n## Connecting to the MySQL monitor\nAssuming the MySQL server is started, you can connect to it using `mysql` from the terminal. Exit using `ctrl+c`.\n\n## Root Password\nIf you want to set the root password, use the following command from the terminal\n\nmysqladmin -u root password NEWPASSWORD`\n\n\n## Codio Documentation\nPlease be aware of the following useful links\n\n- [How to Access your Box](/ide/boxes/)\n- [If your firewall only allows access to port 80](/ide/boxes/ext-access/)\n- [Creating Codio menu items to avoid repetitive terminal commands](/ide/boxes/runmenu/)\n- [Using Git in Codio](/ide/editing/git/)\n- [Customizing the IDE settings](/ide/customization/)\n- [Restarting your Box](/ide/boxes/restart-reset/)\n- [Creating multiple code editing panels in the IDE](/ide/panels/)\n\n## Stack Specific Links\n\n- [PHP](http://php.net)\n- [Apache](http://httpd.apache.org)\n- [MySQL](http://dev.mysql.com)\n\n## Updating Components\nIf this Stack is not using any of the latest components, please email support@codio.com and we will update it.", 
            "title": "Example (from Codio Certified LAMP Stack)"
        }, 
        {
            "location": "/project/stacks/#visibility-and-ownership", 
            "text": "See  visibility settings  for information on who can access or edit your stack.  By default, Stacks are kept private to your account until you make them public, at which point they will appear in the  Popular  and  All  Stacks listings for all Codio Users.  If you set the owner of the Stack to your Organization, they will appear in the  Organizations  listing for members of your Organization  If you are a member of an Organization, the Organization owner can enable the ability for you to create public Stacks. See  Public/Private Settings .  If you want to keep your Stack private to your Organization, select the Private option and set the Owner option to your Organization.", 
            "title": "Visibility and Ownership"
        }, 
        {
            "location": "/project/stacks/#owner", 
            "text": "By default, you will be the owner of this Stack and only you can edit it and  create new versions  of the Stack.  If you want to allow others to see and administer your Stack, you can assign it to another organization.", 
            "title": "Owner"
        }, 
        {
            "location": "/project/stacks/#switching-a-projects-stack", 
            "text": "There are various reasons why you might want to switch your project's stack to a new one.   Created new stack  : this is the most important and common use case. If you have modified your stack and then created a new stack (or a new version) from it then it makes sense to point your project to it once it has been created.  Mistake  : you specified the wrong stack when you created the project.  New stack version  : a new version of a stack has been created and you want to point to the latest one.", 
            "title": "Switching a project's stack"
        }, 
        {
            "location": "/project/stacks/#important", 
            "text": "You should remember that when you switch a stack, everything outside the workspace folder you see in the tree ( /home/codio/workspace ) will be replaced by the new stack. This is discussed at length in the  What is a stack?  section.", 
            "title": "Important"
        }, 
        {
            "location": "/project/stacks/#from-the-projects-listing", 
            "text": "Select the gear icon for the project from the main projects listing. You will then be able to change the stack or the stack version.", 
            "title": "From the projects listing"
        }, 
        {
            "location": "/project/stacks/#updating-a-stack-version", 
            "text": "Having created a new stack, you may later want to update the Stack properties or take another stack snapshot from a Codio project.  You can update your stack   from the  Stacks  area of the Codio dashboard  from the IDE", 
            "title": "Updating a stack (version)"
        }, 
        {
            "location": "/project/stacks/#updating-from-the-dashboard", 
            "text": "To update the Stack, first select it from the stack list. You can then update the stack name or description fields by pressing the  Edit  button.  To create a new version of a stack, press the  New Version  button. Then choose the project from which the stack should be generated from the  Source  field. Add a comment describing what has changed since the last version. At that point, a new version will be generated. This can take a few minutes.", 
            "title": "Updating from the dashboard"
        }, 
        {
            "location": "/project/stacks/#updating-from-the-ide", 
            "text": "It is often simpler to update a stack from within the IDE and the project that you are currently working on. After you have finished making changes to your box (installing new components etc.) you can create a new stack version from the  Projects- Stack- Create New  menu.   You should now press the  New Version  button and enter some text to describe the stack changes since the last version.  It will take a few minutes to build the new version. If your stack is pointing to the latest version then you need not do anything more. If it is pointing to a specific stack version, then you will need to change the stack to point to either the 'latest version' or to the version of the stack that was just built. You do this from the the  Project- Stack- Settings  menu item.", 
            "title": "Updating from the IDE"
        }, 
        {
            "location": "/project/stacks/#viewing-version-history", 
            "text": "You can view the version history of a stack by from the  Stacks  area of the Codio dashbaord. Select the stack from the listing and then click on the  Versions  link at the top of the page.", 
            "title": "Viewing version history"
        }, 
        {
            "location": "/project/stacks/#using-a-stack", 
            "text": "You can select a stack   when a new project is created  or by  switching the stack  if the project is already created  or directly from the stacks listing, as explained below.   To create a new project from the Stack listing, you should first locate your Stack. You can select from My Stacks, Certified or All.   To search for a Stack, enter appropriate search text in the search field. This will typically be the name of the main Stack component(s) you are searching for. This will search the Stack name and description as well as any tags used.  Having located a Stack, you can click on the item to get more detailed information. If you want to create a new Project immediately without seeing any further detailed information, click on the icon on the right hand side of the Stack item. If there are multiple versions of this Stack, it will use the latest.  Once you select a Stack, you will be taken to the Create Project dialog and your chosen Stack will be pre-selected. The latest version of the stack will always be used. If you want to choose a specific version of the stack, then read the following section.", 
            "title": "Using a stack"
        }, 
        {
            "location": "/project/stacks/#stack-versions", 
            "text": "By default, Codio will use the latest version of the selected Stack. Codio Stacks also supports versioning.  There are two ways to use a version.   Firstly, click on the body of a Stack item, which takes you to the information screen for the selected stack. On the top right of the information panel, you can drop down the Use Stack button and select a Stack version.  You can also select the  Versions  link above the main listing and see information about each version.", 
            "title": "Stack Versions"
        }, 
        {
            "location": "/project/stacks/#stack-listings", 
            "text": "Codio Stacks lets you create and manage the combination of a Codio Box and installed system level components (languages, databases, web servers etc.) so that you can instantly create new Projects and Boxes from Stack libraries.   Stacks are divided up into the following searchable areas within the Stacks listing   My Stacks  are Stacks that were created by you.  Certified Stacks  are Stacks that are approved by Codio and cover a wide range of common stack configurations.  Popular Stacks  are the most commonly downloaded, publicly available stacks created by other Codio users; you should note that Codio does not warrant that these Stacks are tested or safe.  All Stacks  gives you a searchable repository of all Stacks, whether created by you, others as well as Codio Certified Stacks.   If you cannot find a Stack that meets your needs, then you can configure your own Stack and add it to your Stack library  as described here .", 
            "title": "Stack listings"
        }, 
        {
            "location": "/project/stacks/#excluding-files-folders", 
            "text": "When you create a Stack, it will base the Stack on the contents of the  /home/codio  folder but omit your code workspace.  If you want to exclude other files or folders then you should follow these steps   Create a file  ~/.codio/stack_exclusions  in the Project you will be basing the Stack on.  add the paths to any file or folder you wish to be excluded from the Stack  add the full path to the file (when in the folder, run  readlink -f  filename  to get the full path)  currently, globbing and wildcards are not supported  one path per line", 
            "title": "Excluding files &amp; folders"
        }, 
        {
            "location": "/project/ide/boxes/", 
            "text": "Each Codio Project gets its own dedicated Ubuntu Server (Box). This chapter contains important information on accessing your box, how to administer it and how to install software dependencies.\n\n\nDetails of your project Box can be found by opening the \nProject \n Box Info\n menu item, where information of your project URL(s) can be viewed.\n\n\n\n\nOverview\n\uf0c1\n\n\nWaking a Box\n\uf0c1\n\n\nWhen you create a Codio Project, it is automatically assigned an Ubuntu server. You can think of this server as being asleep until you open up your Project in the IDE. As soon as the Project loads in the IDE, the Box is up and running.\n\n\nWhen is the Server put back to sleep?\n\uf0c1\n\n\nYour server is put to sleep within a few minutes of you exiting your Project or after 60mins of inactivity.\n\n\nCan I have my Box 'Always on'?\n\uf0c1\n\n\nPaid subscribers can use the \nAlways On Boxes\n feature. This allows you to mark Projects that you don't want to be put to sleep when you exit your Project.\n\n\nCan I SSH into my Box?\n\uf0c1\n\n\nYes, see \nSSH into your box\n documentation.\n\n\nCan I reboot my Box?\n\uf0c1\n\n\nYes. Please refer to the \nRestart and Reset\n documentation.\n\n\nCan I let other people administer my Box?\n\uf0c1\n\n\nPaid subscribers can use the Admin property of the \nPermissions\n feature to allow other Codio users to access their Project and have full access to your Codio Box as well as the code.\n\n\nDo I have sudo access?\n\uf0c1\n\n\nYes, our Boxes provide sudo access.\n\n\nHow do I install software dependencies?\n\uf0c1\n\n\nYou have sudo access, so should use the full power of the \napt\n package management system, and the packages it provides via the Ubuntu community.\n\n\nHow do I access my Box from code?\n\uf0c1\n\n\nWe have \nfull documentation\n on how to access your Box from code.\n\n\nFirewall issues\n\uf0c1\n\n\nCodio Boxes do not run on port 80. Some companies block outbound access to ports other than port 80. Please read \nthis section\n on how to work around this.\n\n\nImportant 'localhost' configuration information\n\uf0c1\n\n\nIn many config files on your Box you would include a reference to \n127.0.0.1\n to access localhost. Please be sure to use \n0.0.0.0\n instead.\n\n\nTerminal window\n\uf0c1\n\n\nYou can access the Terminal window\n\n\n\n\nfrom the \nTools-\nTerminal\n menu item\n\n\nor by pressing the terminal icon in the bar at the top of the file tree.\n\n\n\n\n\n\nThis will open up a terminal window in a new IDE panel. You can have multiple terminals open simultaneously.\n\n\nNote that you can create tabs and panels anywhere you like using Codio's \nPanels and Tabs\n features.\n\n\n\n\nTerminal Settings\n\uf0c1\n\n\nYou can modify various Terminal settings from the \nCodio-\nPreferences\n menu.\n\n\nThe available settings (and their defaults) are listed below. Preferences can be modified at the User level as \ndescribed here\n. You can also force settings at the Project level but these will then override for all users looking at this project, so should be used sparingly.\n\n\n[terminal]\n\n;Font size.\n; Type: int\nfont_size = 12\n\n;Terminal theme.\n; Type: string\ntheme = dark\n\n;Number of lines available in the scroll history.\n; Type: int\nscrollback = 3000\n\n;Quick Connect\n; Type: hotkey\nshow-connect-dialog =\n\n;Connections Manager\n; Type: hotkey\nshow-connections-manager =\n\n;Terminal. SSH connection to the box\n; Type: hotkey\nbackend-connection = Shift+Alt+T\n\n\n\n\nAccessing boxes and ports\n\uf0c1\n\n\nWhen Codio creates a new project, it will generate a unique subdomain name\n\n\nword1-word2.codio.io\n\n\n\n\nwhere \nword1\n and \nword2\n are randomly generated words resulting in a unique domain name.\n\n\nRecommended approach to port addressing\n\uf0c1\n\n\nIt is strongly recommended that you reference a Codio box running on a specific port using\n\n\nword1-word2-3000.codio.io\n\n\n\n\nIf your PC is behind a firewall, access to external ports are often restricted. Using the recommended approach, the request will be made over port 80 and so will not be blocked by the firewall.\n\n\nThis approach allows both HTTP and HTTPS access over the full range of ports, \n1024\n to \n9999\n.\n\n\nStandard port addressing\n\uf0c1\n\n\nYou can also reference a Codio box using \nword1-word2-\nport\n.codio.io\n. This approach will work but be aware:\n\n\n\n\nPort ranges are restricted to \n1024\n to \n9499\n for HTTP access\n\n\nPort ranges are restricted to \n9500\n to \n9999\n for HTTPS access\n\n\nIf the PC you are working on is behind a firewall and it blocks access over non-standard ports, it will fail if it references a box using \nword1-word2-3000.codio.io\n\n\nYou may waste your time and potentially your sysadmin's time trying to diagnose why your browser will not talk to the Codio box.\n\n\n\n\nOriginal Request Header\n\uf0c1\n\n\nShould you need it, the \nX_FORWARDED_PROTO\n header contains original request schema.\n\n\nPreview Menu\n\uf0c1\n\n\nCodio offers a fully customizable Preview menu so you can preview both static files (.html) and server side files (.php files, Ruby and Node apps etc.) with a single click.\n\n\n\n\nPreview documentation\n\n\n\n\nThis feature lets you set up any number of 'aliases' both for static files and Box cli commands.\n\n\nPreinstalled software packages\n\uf0c1\n\n\nWhen you create an empty Box, you get a standard Ubuntu installation. Currently, we also add the following software automatically\n\n\n\n\nGit\n\n\n\n\nIf you want to have more software installed by default then you should use \nStacks\n or select one of the standard stacks from the \nNew Project\n screen.\n\n\nPlease refer to the \nInstalling software packages\n section for details on how to install many other languages, database, web servers and other system components.\n\n\nFile \n software locations\n\uf0c1\n\n\nAll Codio code workspace and software dependency files are located in the \n/home/codio\n folder, also reachable as \n~\n.\n\n\nEverything below this level can be accessed and is effectively read-only. You should not change anything here as it will not persist.\n\n\nSoftware that you install from the command line or using Install Software will be installed in the usual location for an Ubuntu server.\n\n\nCode workspace files\n\uf0c1\n\n\nThe code workspace you see in the project file tree is located at \n/home/codio/workspace\n or \n~/workspace\n.\n\n\nInstalling software packages\n\uf0c1\n\n\nThe \nTools-\nInstall Software\n menu option gives you access to a dialog driven means of running scripts that can install, configure or reconfigure software components. This saves you the trouble of doing this manually from the command line.\n\n\n\n\nOn this page, you can locate the software you want to install and then click the install icon to start the installation.\n\n\nInstalling from the command line\n\uf0c1\n\n\nOur boxes provide full \nsudo\n (root) access, so you can also use the Ubuntu \napt\n package manager, which provides thousands of software packages that are maintained by the Ubuntu community.\n\n\nIf you want to provide fully pre-configured boxes then you should use \nStacks\n rather than the Install Software feature described on this page.\n\n\nAdding or requesting new packages\n\uf0c1\n\n\nAs of May 2016 the list of available packages is somewhat limited. However, we will be adding to these continuously and we also encourage you to request new ones.\n\n\nIf you require a new script to be added to the Install Software list then you have two options.\n\n\n\n\nVisit the \nIssues\n page on our GitHub repository and create a new issue detailing your requirements.\n\n\nYou can fork our \nGitHub repository\n, add the script yourself and then submit a pull request.\n\n\n\n\nInstructions on how to add your own package scripts can be found \nhere\n.\n\n\nAutostarting\n\uf0c1\n\n\nServices that require to be started will auto start on installation.\n\n\nYou can manually start, stop and restart services using the following terminal commands:\n\n\n$ sudo service \npackage-name\n start\n$ sudo service \npackage-name\n stop\n$ sudo service \npackage-name\n restart\n\n\n\n\nCoding installable packages\n\uf0c1\n\n\nOverview\n\uf0c1\n\n\nIf you cannot find the software you want to install in the list then you can add your own package to the Install Software list by forking our GitHub repository, making the necessary modifications and finally submitting a pull request.\n\n\nThe repository can be found at \nhttps://github.com/codio/install_software\n\n\nWhat is a script?\n\uf0c1\n\n\nA script is typically, but not necessarily, a bash script that runs a series of commands as you would on the command line to install or configure software on your Codio box. However, it can be any executable code you choose.\n\n\nThe scripts written by Codio typically use Ansible, a very friendly deployment management system that greatly reduces complexity.\n\n\npackage_list.json\n\uf0c1\n\n\nThis is the manifest that lists the entire contents of the publicly available scripts. Each script has an entry in this file and you should add a new item.\n\n\nHere's a reminder of the MySQL entry.\n\n\nmysql\n: {\n  \nname\n: \nMySQL\n,\n  \ndescription\n: \nMySQL is an open-source relational database management system (RDBMS)\n,\n  \nscript\n: \nmysql/install.sh\n,\n  \nversion\n: \n5.5.49\n,\n  \ncategory\n: \ndata_stores\n\n}\n\n\n\n\nWhenever a user loads the Install Software dialog, this Install Software manifest is retrieved from our GitHub repo.\n\n\nscript\n\uf0c1\n\n\nThe script is the path, relative to the root of the repo, where the installation script can be found.\n\n\ncategory\n\uf0c1\n\n\nYou can specify the category that the component belongs to by updating the \ncategory\n field. You can choose from one of the following.\n\n\n'data_stores'\n'deployment'\n'development_tools'\n'libraries'\n'shells'\n'programming_languages'\n'utilities'\n'web_development'\n\n\n\n\nExample : MySQL\n\uf0c1\n\n\nThe following example shows how to install MySQL from the Install Software menu in a few seconds. Try running the MySQL installation on a new box. The MySQL entry in the \npackage_list.json\n file looks like this\n\n\nmysql\n: {\n  \nname\n: \nMySQL\n,\n  \ndescription\n: \nMySQL is an open-source relational database management system (RDBMS)\n,\n  \nscript\n: \nmysql/install.sh\n,\n  \nversion\n: \n5.5.49\n,\n  \ncategory\n: \ndata_stores\n\n}\n\n\n\n\nYou can see the reference to the \nmysql/install.sh\n script.\n\n\nBash script\n\uf0c1\n\n\nThis script calls our standard Ansible loader script, which in turn loads the relevant playbook.\n\n\n#!/bin/bash\n\nbash -c \n$(curl -fsSL https://raw.github.com/codio/install_software/master/tools/ansible.sh)\n mysql\n\necho \nMysql password root user password is 'codio'\n\n\n\n\n\nAnsible playbook script\n\uf0c1\n\n\nAs Ansible makes installations and configurations so easy, we use this to make our lives easier. We could have accomplished the same thing within the main bash script using standard Ubuntu commands but it would be less readable and harder to maintain than using Ansible.\n\n\nIf you are interested in finding out more about Ansible playbooks, \nclick here\n.\n\n\n---\n- name: Install MySQL\n  hosts: 127.0.0.1\n  sudo: True\n  vars:\n    MySQL_root_pass: codio\n  tasks:\n    - name: Set MySQL root password before installing\n      debconf: name='mysql-server' question='mysql-server/root_password' value='{{MySQL_root_pass | quote}}' vtype='password'\n    - name: Set MySQL root again password before installing\n      debconf: name='mysql-server' question='mysql-server/root_password_again' value='{{MySQL_root_pass | quote}}' vtype='password'\n    - name: Install MySQL\n      apt: name={{ item }} state=present\n      with_items:\n        - mysql-server\n        - mysql-client\n        - python-mysqldb\n    - copy: src=my.cnf dest=/home/codio/.my.cnf\n\n\n\n\nLanguage server protocol\n\uf0c1\n\n\nThe Language Server protocol is used to integrate features like auto complete, go to definition, find all references.\n\n\nJava, OCAML and Python\n are currently available.\n\n\nPython Example:\n\n\n\nImplementing LSP support\n\uf0c1\n\n\nEnable LSP support in your \nUser\n (or \nProject\n) Preferences, entering\n\n\n[codio-lsp]\nenable_lsp_support = true\n\n\n\n\nIf you are \nauthoring\n content for use in a course/class, we recommend enabling as a \nproject preference\n as these will be applied over any preferences users may set\n\n\nInstalling language server protocols\n\uf0c1\n\n\nTo install language server protocols, go to the menu \nTools-\nInstall Software\n and locate the relevant component.  Press the install button in the relevant row. The installation may take a few minutes and you should then \nRestart\n your Box before proceeding.\n\n\nAutocomplete\n\uf0c1\n\n\nAutocomplete is not automatically triggered as in HTML/CSS/JS files. To invoke autocomplete for language server protocol implemented files, use :\n\n\nMac: Shift+Space\nOthers: Ctrl+Space\n\n\n\n\nIf you wish to change the default preference to something else you can. See \nUser Preferences\n for more on this\n\n\nGUI based output\n\uf0c1\n\n\nIf you are writing or using programs that have a GUI based output then please read this section. Whether you are using UI libraries like tkinter, qt or simply ubuntu applications that have a non web based UI, this section explains how to setup a virtual desktop.\n\n\nSample Project\n\uf0c1\n\n\nIf you created the account for your Codio Trial account then you will find \nDemo GUI Output\n in your My Projects list. You will find instructions in the README.md file when you open the project.\n\n\nIf it is not there then \nclick here to install it in your projects list\n. Press the \nUse Pack\n button to install.\n\n\nUses and Limitations\n\uf0c1\n\n\nX Server is a virtual desktop that is very effective for Codio's cloud based infrastructure. Any application that relies on a graphical user interface has its graphical output redirected to it and Codio's viewer is then able to display the virtual desktop in a browser.\n\n\nAs you will see when trying out the sample applications in the demo project above, some of which have very complex UIs (notably SQLite and StartUML), you can get a very good experience indeed. The limitations start to be felt when using fast motion graphics where the virtual screen content is changing so fast that it cannot be rendered in real time over the internet. If you have better bandwidth you will experience better performance and vice-versa.\n\n\nInstalling your own projects\n\uf0c1\n\n\nInstalling X Server\n\uf0c1\n\n\nTo install X Server, go to the menu \nTools-\nInstall Software\n and locate X Server. Press the install button in the X Server row. The installation may take a few minutes and you should then \nRestart\n your Box before proceeding.\n\n\nRunning your code\n\uf0c1\n\n\nBefore you can view any output, your program needs to run, so you should first start your code. When you start the viewer (see below), the UI output will be shown automatically.\n\n\n\n\nYou also can start the viewer first but it will be empty until a program runs, whereupon it will refresh.\n\n\nThe viewer\n\uf0c1\n\n\nThe viewer is a special window that appears either inside Codio or in a separate browser tab. To open it, you should add \n\"Viewer\": \"https://{{domain3000}}/\"\n to the .codio file.\n\n\n{\n// Configure your Run and Preview buttons here.\n\n// Run button configuration\n  \ncommands\n: {\n        \nRun Python (tkinter)\n: \npython3 tkinterpy/demo.py\n,\n        \nRun Java (Lunar Phases)\n: \ncd swing \n java LunarPhases\n,\n        \nSQLite Browser App\n: \nsqlitebrowser\n,\n        \nStarUML\n: \nstaruml\n\n  },\n\n// Preview button configuration\n  \npreview\n: {\n        \nViewer\n: \nhttps://{{domain3000}}/\n\n  }\n}\n\n\n\n\nYou can also access the from any browser using \nhttps://pagoda-cigar-3000.codio.io/\n where you replace \npagoda-cigar\n with your boxes domain name, which you can find in the menu at \nProject-\nBox Info\n (scroll to the section \nWeb: Static content\n).\n\n\nCustomization\n\uf0c1\n\n\nYou can customise the X Server installation by modifying the config files in the normal way using vim or nano. For example you can\n\n\n\n\nsudo vim /etc/init/openbox.conf\n opens the openbox desktop config so you could change the default virtual desktop size\n\n\nsudo vim /etc/init/novnc-3000.conf\n would enable you to modify the port that the viewer runs on in case it conflicts with other services you may have configured on the default port 3000\n\n\n\n\nAlways-on boxes\n\uf0c1\n\n\nAlways-On Boxes is now available for all paid subscribers. You can enable Box(es) to be Always-On. This means that it will remain active whether you are in the IDE or even logged out. If your project is archived due to inactivity (usually 30 days since last opened), this process removes it from the active fileserver and will also mean that it can no longer be 'Always-On'. The number of Always-On Boxes you can have depends on the subscription plan\n\n\nMarking a Project as Always On\n\uf0c1\n\n\nYou can set a Box to Always-On from the \nProject-\nSettings\n menu if you're in the IDE. If you're in the Dashboard, select Projects to get the listing, then press the gear icon on the right side of the Project listing. You will be shown the settings screen where you can enable the Always On switch.\n\n\nKeeping terminal processes running\n\uf0c1\n\n\nWhen you exit your project in the IDE and return to the Dashboard, any processes that were started within a terminal window will terminate.\n\n\nYou can prevent this in one of two ways.\n\n\nThe simple way\n\uf0c1\n\n\nOne simple way to avoid this issue is to append \n to the terminal command that starts your process. You will see output as usual but may need to press the enter key to get a fresh command prompt.\n\n\nThen, you will need to enter the following command before you close the terminal window or exit your project and return to the dashboard.\n\n\ndisown -a\n\n\n\n\ntmux\n\uf0c1\n\n\nAs an alternative, you can install tmux.\n\n\nSSH and code access - Codio box SSH keys\n\uf0c1\n\n\nCodio generates a key-pair that can be used for services like Github, so you can upload your public key to those systems (read \nthis section\n for details on how to upload Github and Bitbucket public keys with a single button press).\n\n\nYou can find your Codio public key as \ndescribed here\n.\n\n\nWhen you create a new Codio project, your user keys are automatically copied into your project and can be found in the \n~/.ssh\n folder. You will need to open up a Terminal window to access this folder and the keys stored in the \nid_rsa\n file.\n\n\nSSH and code access -SSH into your box\n\uf0c1\n\n\nUnless your project is utilising \nAlways On Boxes\n you will need to open your Codio Project in order for the Box to be started and ready to receive incoming SSH connections.\n\n\nGenerating Key Pairs\n\uf0c1\n\n\nThere are several sites that explain generating SSH keys.\n\n\n\n\nWindows: \nhttp://kb.siteground.com/how_to_generate_an_ssh_key_on_windows_using_putty/\n. Please note that for Windows, you should generate SSH2 RSA key type\n\n\nMac : \nhttps://help.github.com/articles/generating-ssh-keys#platform-mac\n\n\nLinux: \nhttps://help.github.com/articles/generating-ssh-keys#platform-linux\n\n\n\n\nFind your local machine's SSH public Key\n\uf0c1\n\n\nThis is pretty easy to do. On a Mac or Linux box you can get your public key in one of two ways\n\n\n\n\neither\n copy your local machine's public key to the clipboard from your local machine's terminal using \npbcopy \n ~/.ssh/id_rsa.pub\n\n\nor\n on your local machine, open the file \n~/.ssh/id_rsa.pub\n and copy it to the clipboard. Be careful with some editors that include control characters that you don't want to be copied across.\n\n\n\n\nOn a Windows machine you'll probably be using putty, so grab your key from there.\n\n\nUploading your Public Key to your Codio Box\n\uf0c1\n\n\nYou need to upload the public key you just found in the above steps. Once you have it copied to the clipboard, open a terminal tab in your Codio project and enter this key into the \n.ssh/authorized_keys\n file. The easiest way to do this is to enter \nnano .ssh/authorized_keys\n which will open this file in the nano editor and you can paste it in.\n\n\nYou can view/check to see all/any Public key(s) you have uploaded into your project by opening the terminal and running \ncat ~/.ssh/authorized_keys\n.\n\n\nEnabling and Connecting to your Box from your local machine's Terminal\n\uf0c1\n\n\n\n\nGo to \nProject\nSettings\n and to the \nForwarding Settings\n tab and click the 'Enable SSH Forwarding' button\n\n\nThe connection string you need to use is shown there\n\n\n\n\nYou will see connection details like this\n\nSSH Forwarding: ssh codio@forwarding.codio.com:29119\n\n\nYou can now connect to your Box from any Terminal window using (in the above example)\n\nssh codio@forwarding.codio.com -p 29119\n\n\nIf you get a message \nPermission denied (publickey)\n then you have not uploaded your SSH Public Key correctly.\n\n\nYou cannot connect to a Codio Box without using a Public Key.\n\n\nIDE access permissions\n\uf0c1\n\n\nBy default, other users with read and write permissions are not able to access your Box from the command line.\n\n\nYou can grant access to other Codio users by assigning the Admin permission level. This feature requires a paid subscription.\n\n\nFor full details, please refer to the \nPermissions section\n of the documentation.\n\n\nAuto starting services\n\uf0c1\n\n\nYour Box will be put to sleep under the conditions \nexplained here\n. When you open your project, the Box will start and services will start automatically.\n\n\nUpstart\n\uf0c1\n\n\nCodio currently uses upstart. If you want to configure services to start when your box starts up, you should configure a \n.conf\n file. If you are not familiar with upstart, please Google it for configuration details.\n\n\nImportant\n - you need to specify the user account under which the service is run using \nsetuid codio\n.\n\n\nBelow is an example \n.conf\n file that should be located in the \n/etc/init\n folder.\n\n\n# testservice - test service job file\ndescription \nSome description\n\nauthor \nfreddy \nyou@yours.com\n\n\n# Stanzas\n#\n# Stanzas control when and how a process is started and stopped See a list of stanzas here:\n# http://upstart.ubuntu.com/wiki/Stanzas When to start the service\nstart on runlevel [2345]\nstop on runlevel [016]\n\n# Automatically restart process if crashed\nrespawn\n\n# Specify the user account which the service should run under testservice - test service job file\nsetuid codio\n\n# Specify working directory if needed\nchdir /home/codio/workspace\n\n# Specify the process/command to start, e.g.\nexec your-service-name\n\n\n\n\nRestart and reset\n\uf0c1\n\n\nCodio offers the ability to restart and to reset your project's Box. You can find both options in the \nProject\n menu.\n\n\nRestart\n\uf0c1\n\n\nThis operation reboots the Box, which usually takes a few seconds.\n\n\nReset\n\uf0c1\n\n\nThis operation is fairly destructive and should be used with caution. It resets the Box to its fresh state but leaves your code files untouched.\n\n\n\n\nany new folders or files that have been created will be deleted\n\n\nall parts of the Box outside of the \n~/workspace\n folder will be reset\n\n\nall code files in the \n~/workspace\n folder are untouched\n\n\na Box restart\n\n\n\n\nAfter a Reset, you will need to reinstall components (npm modules, ruby gems etc.) and other modifications you may have made.\n\n\nCustomizable run menu\n\uf0c1\n\n\nA handy feature is the ability to add commonly used commands to the Codio IDE, akin to using the \nalias\n command from the command line.\n\n\nWhen the menu item is selected, a new terminal window will open to run the command in. You can also force the command to run in an existing terminal window as we illustrate below.\n\n\n.codio file\n\uf0c1\n\n\nThe configuration for the \nRun\n (and \nPreview\n) button can be set by editing the \n.codio\n file in the root of your project.\n\n\nThe following code below shows the \n.codio\n file configured to give this Run menu\n\n\n\n\nwhich is driven by the following \n.codio\n file\n\n\n{\n  // Configure your Run and Preview buttons here.\n\n  // Run button configuration\n  \ncommands\n: {\n    \nInstall Learnyounode\n : \nnpm install -g learnyounode\n,\n    \nRun Lesson\n : \n./ns-executes.sh run {{filename_no_ext}} {{path}}\n,\n    \nVerify Lesson\n : \n./ns-executes.sh verify {{filename_no_ext}} {{path}}\n,\n    \nCompleted Lessons\n : \nlearnyounode\n,\n    \nRun with Node\n : \nnode {{filepath}} 3 4 5\n\n  }\n}\n\n\n\n\nWhen you select a \nRun\n command, it will open a new console window where you will see the output. Pressing the \nRun\n button will execute the last selected command.\n\n\nUsing the same terminal window\n\uf0c1\n\n\nIf you want to avoid new terminal windows appearing when you run the command, you can use an id field.\n\n\n{\n  \ncommands\n: {\n        \nNode version\n: {\n            \nid\n: \nterminal_1\n,\n            \ncmd\n: \nnode --version\n\n        },\n        \nls\n: {\n            \nid\n: \nterminal_1\n,\n            \ncmd\n: \nls\n\n        }\n  },\n\n// Preview button configuration\n  \npreview\n: {\n        \nProject Index (static)\n: \nhttp://{{domain}}/{{index}}\n,\n        \nCurrent File (static)\n: \nhttp://{{domain}}/{{filepath}}\n,\n        \nBox URL\n: \nhttp://{{domain3000}}/\n,\n        \nBox URL SSL\n: \nhttps://{{domain3000}}/\n\n  }\n}\n\n\n\n\n\n\nCommands with the same \"id\" will share the same terminal window.\n\n\nThe terminal id should be \"backend-guide\" to execute a command in the terminal window opened by guides.\n\n\n\n\n\n\n.codio Tokens\n\uf0c1\n\n\nYou can see from the above \n.codio\n sample that it is possible to insert tokens into the shell commands. The following tokens are currently available and operate in the main on the currently selected file tab in the IDE\n\n\n\n\n{{filepath}}\n inserts the path and full file name \n/path/to/file.ext\n\n\n{{path}}\n inserts only the path to the selected file \n/path/to/\n\n\n{{filename}}\n inserts the filename with its extension \nfile.ext\n\n\n{{filename_no_ext}}\n inserts the filename without the extension \nfile\n\n\n{{domain3000}}\n inserts the public url to your box; \nword1-word2-3000.codio.io\n to access over port 80, which is useful if your corporate firewall blocks ports other than 80 and 443\n\n\n{{domain}}\n inserts the alternate public url to your box; \nword1-word2.codio.io\n, be aware that you will usually need to specify a port to reach a service running on your Box. e.g. \nword1-word2-\nport\n.codio.io", 
            "title": "Accessing a Box"
        }, 
        {
            "location": "/project/ide/boxes/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/project/ide/boxes/#waking-a-box", 
            "text": "When you create a Codio Project, it is automatically assigned an Ubuntu server. You can think of this server as being asleep until you open up your Project in the IDE. As soon as the Project loads in the IDE, the Box is up and running.", 
            "title": "Waking a Box"
        }, 
        {
            "location": "/project/ide/boxes/#when-is-the-server-put-back-to-sleep", 
            "text": "Your server is put to sleep within a few minutes of you exiting your Project or after 60mins of inactivity.", 
            "title": "When is the Server put back to sleep?"
        }, 
        {
            "location": "/project/ide/boxes/#can-i-have-my-box-always-on", 
            "text": "Paid subscribers can use the  Always On Boxes  feature. This allows you to mark Projects that you don't want to be put to sleep when you exit your Project.", 
            "title": "Can I have my Box 'Always on'?"
        }, 
        {
            "location": "/project/ide/boxes/#can-i-ssh-into-my-box", 
            "text": "Yes, see  SSH into your box  documentation.", 
            "title": "Can I SSH into my Box?"
        }, 
        {
            "location": "/project/ide/boxes/#can-i-reboot-my-box", 
            "text": "Yes. Please refer to the  Restart and Reset  documentation.", 
            "title": "Can I reboot my Box?"
        }, 
        {
            "location": "/project/ide/boxes/#can-i-let-other-people-administer-my-box", 
            "text": "Paid subscribers can use the Admin property of the  Permissions  feature to allow other Codio users to access their Project and have full access to your Codio Box as well as the code.", 
            "title": "Can I let other people administer my Box?"
        }, 
        {
            "location": "/project/ide/boxes/#do-i-have-sudo-access", 
            "text": "Yes, our Boxes provide sudo access.", 
            "title": "Do I have sudo access?"
        }, 
        {
            "location": "/project/ide/boxes/#how-do-i-install-software-dependencies", 
            "text": "You have sudo access, so should use the full power of the  apt  package management system, and the packages it provides via the Ubuntu community.", 
            "title": "How do I install software dependencies?"
        }, 
        {
            "location": "/project/ide/boxes/#how-do-i-access-my-box-from-code", 
            "text": "We have  full documentation  on how to access your Box from code.", 
            "title": "How do I access my Box from code?"
        }, 
        {
            "location": "/project/ide/boxes/#firewall-issues", 
            "text": "Codio Boxes do not run on port 80. Some companies block outbound access to ports other than port 80. Please read  this section  on how to work around this.", 
            "title": "Firewall issues"
        }, 
        {
            "location": "/project/ide/boxes/#important-localhost-configuration-information", 
            "text": "In many config files on your Box you would include a reference to  127.0.0.1  to access localhost. Please be sure to use  0.0.0.0  instead.", 
            "title": "Important 'localhost' configuration information"
        }, 
        {
            "location": "/project/ide/boxes/#terminal-window", 
            "text": "You can access the Terminal window   from the  Tools- Terminal  menu item  or by pressing the terminal icon in the bar at the top of the file tree.    This will open up a terminal window in a new IDE panel. You can have multiple terminals open simultaneously.  Note that you can create tabs and panels anywhere you like using Codio's  Panels and Tabs  features.", 
            "title": "Terminal window"
        }, 
        {
            "location": "/project/ide/boxes/#terminal-settings", 
            "text": "You can modify various Terminal settings from the  Codio- Preferences  menu.  The available settings (and their defaults) are listed below. Preferences can be modified at the User level as  described here . You can also force settings at the Project level but these will then override for all users looking at this project, so should be used sparingly.  [terminal]\n\n;Font size.\n; Type: int\nfont_size = 12\n\n;Terminal theme.\n; Type: string\ntheme = dark\n\n;Number of lines available in the scroll history.\n; Type: int\nscrollback = 3000\n\n;Quick Connect\n; Type: hotkey\nshow-connect-dialog =\n\n;Connections Manager\n; Type: hotkey\nshow-connections-manager =\n\n;Terminal. SSH connection to the box\n; Type: hotkey\nbackend-connection = Shift+Alt+T", 
            "title": "Terminal Settings"
        }, 
        {
            "location": "/project/ide/boxes/#accessing-boxes-and-ports", 
            "text": "When Codio creates a new project, it will generate a unique subdomain name  word1-word2.codio.io  where  word1  and  word2  are randomly generated words resulting in a unique domain name.", 
            "title": "Accessing boxes and ports"
        }, 
        {
            "location": "/project/ide/boxes/#recommended-approach-to-port-addressing", 
            "text": "It is strongly recommended that you reference a Codio box running on a specific port using  word1-word2-3000.codio.io  If your PC is behind a firewall, access to external ports are often restricted. Using the recommended approach, the request will be made over port 80 and so will not be blocked by the firewall.  This approach allows both HTTP and HTTPS access over the full range of ports,  1024  to  9999 .", 
            "title": "Recommended approach to port addressing"
        }, 
        {
            "location": "/project/ide/boxes/#standard-port-addressing", 
            "text": "You can also reference a Codio box using  word1-word2- port .codio.io . This approach will work but be aware:   Port ranges are restricted to  1024  to  9499  for HTTP access  Port ranges are restricted to  9500  to  9999  for HTTPS access  If the PC you are working on is behind a firewall and it blocks access over non-standard ports, it will fail if it references a box using  word1-word2-3000.codio.io  You may waste your time and potentially your sysadmin's time trying to diagnose why your browser will not talk to the Codio box.", 
            "title": "Standard port addressing"
        }, 
        {
            "location": "/project/ide/boxes/#original-request-header", 
            "text": "Should you need it, the  X_FORWARDED_PROTO  header contains original request schema.", 
            "title": "Original Request Header"
        }, 
        {
            "location": "/project/ide/boxes/#preview-menu", 
            "text": "Codio offers a fully customizable Preview menu so you can preview both static files (.html) and server side files (.php files, Ruby and Node apps etc.) with a single click.   Preview documentation   This feature lets you set up any number of 'aliases' both for static files and Box cli commands.", 
            "title": "Preview Menu"
        }, 
        {
            "location": "/project/ide/boxes/#preinstalled-software-packages", 
            "text": "When you create an empty Box, you get a standard Ubuntu installation. Currently, we also add the following software automatically   Git   If you want to have more software installed by default then you should use  Stacks  or select one of the standard stacks from the  New Project  screen.  Please refer to the  Installing software packages  section for details on how to install many other languages, database, web servers and other system components.", 
            "title": "Preinstalled software packages"
        }, 
        {
            "location": "/project/ide/boxes/#file-software-locations", 
            "text": "All Codio code workspace and software dependency files are located in the  /home/codio  folder, also reachable as  ~ .  Everything below this level can be accessed and is effectively read-only. You should not change anything here as it will not persist.  Software that you install from the command line or using Install Software will be installed in the usual location for an Ubuntu server.", 
            "title": "File &amp; software locations"
        }, 
        {
            "location": "/project/ide/boxes/#code-workspace-files", 
            "text": "The code workspace you see in the project file tree is located at  /home/codio/workspace  or  ~/workspace .", 
            "title": "Code workspace files"
        }, 
        {
            "location": "/project/ide/boxes/#installing-software-packages", 
            "text": "The  Tools- Install Software  menu option gives you access to a dialog driven means of running scripts that can install, configure or reconfigure software components. This saves you the trouble of doing this manually from the command line.   On this page, you can locate the software you want to install and then click the install icon to start the installation.", 
            "title": "Installing software packages"
        }, 
        {
            "location": "/project/ide/boxes/#installing-from-the-command-line", 
            "text": "Our boxes provide full  sudo  (root) access, so you can also use the Ubuntu  apt  package manager, which provides thousands of software packages that are maintained by the Ubuntu community.  If you want to provide fully pre-configured boxes then you should use  Stacks  rather than the Install Software feature described on this page.", 
            "title": "Installing from the command line"
        }, 
        {
            "location": "/project/ide/boxes/#adding-or-requesting-new-packages", 
            "text": "As of May 2016 the list of available packages is somewhat limited. However, we will be adding to these continuously and we also encourage you to request new ones.  If you require a new script to be added to the Install Software list then you have two options.   Visit the  Issues  page on our GitHub repository and create a new issue detailing your requirements.  You can fork our  GitHub repository , add the script yourself and then submit a pull request.   Instructions on how to add your own package scripts can be found  here .", 
            "title": "Adding or requesting new packages"
        }, 
        {
            "location": "/project/ide/boxes/#autostarting", 
            "text": "Services that require to be started will auto start on installation.  You can manually start, stop and restart services using the following terminal commands:  $ sudo service  package-name  start\n$ sudo service  package-name  stop\n$ sudo service  package-name  restart", 
            "title": "Autostarting"
        }, 
        {
            "location": "/project/ide/boxes/#coding-installable-packages", 
            "text": "", 
            "title": "Coding installable packages"
        }, 
        {
            "location": "/project/ide/boxes/#overview_1", 
            "text": "If you cannot find the software you want to install in the list then you can add your own package to the Install Software list by forking our GitHub repository, making the necessary modifications and finally submitting a pull request.  The repository can be found at  https://github.com/codio/install_software", 
            "title": "Overview"
        }, 
        {
            "location": "/project/ide/boxes/#what-is-a-script", 
            "text": "A script is typically, but not necessarily, a bash script that runs a series of commands as you would on the command line to install or configure software on your Codio box. However, it can be any executable code you choose.  The scripts written by Codio typically use Ansible, a very friendly deployment management system that greatly reduces complexity.", 
            "title": "What is a script?"
        }, 
        {
            "location": "/project/ide/boxes/#package_listjson", 
            "text": "This is the manifest that lists the entire contents of the publicly available scripts. Each script has an entry in this file and you should add a new item.  Here's a reminder of the MySQL entry.  mysql : {\n   name :  MySQL ,\n   description :  MySQL is an open-source relational database management system (RDBMS) ,\n   script :  mysql/install.sh ,\n   version :  5.5.49 ,\n   category :  data_stores \n}  Whenever a user loads the Install Software dialog, this Install Software manifest is retrieved from our GitHub repo.", 
            "title": "package_list.json"
        }, 
        {
            "location": "/project/ide/boxes/#script", 
            "text": "The script is the path, relative to the root of the repo, where the installation script can be found.", 
            "title": "script"
        }, 
        {
            "location": "/project/ide/boxes/#category", 
            "text": "You can specify the category that the component belongs to by updating the  category  field. You can choose from one of the following.  'data_stores'\n'deployment'\n'development_tools'\n'libraries'\n'shells'\n'programming_languages'\n'utilities'\n'web_development'", 
            "title": "category"
        }, 
        {
            "location": "/project/ide/boxes/#example-mysql", 
            "text": "The following example shows how to install MySQL from the Install Software menu in a few seconds. Try running the MySQL installation on a new box. The MySQL entry in the  package_list.json  file looks like this  mysql : {\n   name :  MySQL ,\n   description :  MySQL is an open-source relational database management system (RDBMS) ,\n   script :  mysql/install.sh ,\n   version :  5.5.49 ,\n   category :  data_stores \n}  You can see the reference to the  mysql/install.sh  script.", 
            "title": "Example : MySQL"
        }, 
        {
            "location": "/project/ide/boxes/#bash-script", 
            "text": "This script calls our standard Ansible loader script, which in turn loads the relevant playbook.  #!/bin/bash\n\nbash -c  $(curl -fsSL https://raw.github.com/codio/install_software/master/tools/ansible.sh)  mysql\n\necho  Mysql password root user password is 'codio'", 
            "title": "Bash script"
        }, 
        {
            "location": "/project/ide/boxes/#ansible-playbook-script", 
            "text": "As Ansible makes installations and configurations so easy, we use this to make our lives easier. We could have accomplished the same thing within the main bash script using standard Ubuntu commands but it would be less readable and harder to maintain than using Ansible.  If you are interested in finding out more about Ansible playbooks,  click here .  ---\n- name: Install MySQL\n  hosts: 127.0.0.1\n  sudo: True\n  vars:\n    MySQL_root_pass: codio\n  tasks:\n    - name: Set MySQL root password before installing\n      debconf: name='mysql-server' question='mysql-server/root_password' value='{{MySQL_root_pass | quote}}' vtype='password'\n    - name: Set MySQL root again password before installing\n      debconf: name='mysql-server' question='mysql-server/root_password_again' value='{{MySQL_root_pass | quote}}' vtype='password'\n    - name: Install MySQL\n      apt: name={{ item }} state=present\n      with_items:\n        - mysql-server\n        - mysql-client\n        - python-mysqldb\n    - copy: src=my.cnf dest=/home/codio/.my.cnf", 
            "title": "Ansible playbook script"
        }, 
        {
            "location": "/project/ide/boxes/#language-server-protocol", 
            "text": "The Language Server protocol is used to integrate features like auto complete, go to definition, find all references.  Java, OCAML and Python  are currently available.  Python Example:", 
            "title": "Language server protocol"
        }, 
        {
            "location": "/project/ide/boxes/#implementing-lsp-support", 
            "text": "Enable LSP support in your  User  (or  Project ) Preferences, entering  [codio-lsp]\nenable_lsp_support = true  If you are  authoring  content for use in a course/class, we recommend enabling as a  project preference  as these will be applied over any preferences users may set", 
            "title": "Implementing LSP support"
        }, 
        {
            "location": "/project/ide/boxes/#installing-language-server-protocols", 
            "text": "To install language server protocols, go to the menu  Tools- Install Software  and locate the relevant component.  Press the install button in the relevant row. The installation may take a few minutes and you should then  Restart  your Box before proceeding.", 
            "title": "Installing language server protocols"
        }, 
        {
            "location": "/project/ide/boxes/#autocomplete", 
            "text": "Autocomplete is not automatically triggered as in HTML/CSS/JS files. To invoke autocomplete for language server protocol implemented files, use :  Mac: Shift+Space\nOthers: Ctrl+Space  If you wish to change the default preference to something else you can. See  User Preferences  for more on this", 
            "title": "Autocomplete"
        }, 
        {
            "location": "/project/ide/boxes/#gui-based-output", 
            "text": "If you are writing or using programs that have a GUI based output then please read this section. Whether you are using UI libraries like tkinter, qt or simply ubuntu applications that have a non web based UI, this section explains how to setup a virtual desktop.", 
            "title": "GUI based output"
        }, 
        {
            "location": "/project/ide/boxes/#sample-project", 
            "text": "If you created the account for your Codio Trial account then you will find  Demo GUI Output  in your My Projects list. You will find instructions in the README.md file when you open the project.  If it is not there then  click here to install it in your projects list . Press the  Use Pack  button to install.", 
            "title": "Sample Project"
        }, 
        {
            "location": "/project/ide/boxes/#uses-and-limitations", 
            "text": "X Server is a virtual desktop that is very effective for Codio's cloud based infrastructure. Any application that relies on a graphical user interface has its graphical output redirected to it and Codio's viewer is then able to display the virtual desktop in a browser.  As you will see when trying out the sample applications in the demo project above, some of which have very complex UIs (notably SQLite and StartUML), you can get a very good experience indeed. The limitations start to be felt when using fast motion graphics where the virtual screen content is changing so fast that it cannot be rendered in real time over the internet. If you have better bandwidth you will experience better performance and vice-versa.", 
            "title": "Uses and Limitations"
        }, 
        {
            "location": "/project/ide/boxes/#installing-your-own-projects", 
            "text": "", 
            "title": "Installing your own projects"
        }, 
        {
            "location": "/project/ide/boxes/#installing-x-server", 
            "text": "To install X Server, go to the menu  Tools- Install Software  and locate X Server. Press the install button in the X Server row. The installation may take a few minutes and you should then  Restart  your Box before proceeding.", 
            "title": "Installing X Server"
        }, 
        {
            "location": "/project/ide/boxes/#running-your-code", 
            "text": "Before you can view any output, your program needs to run, so you should first start your code. When you start the viewer (see below), the UI output will be shown automatically.   You also can start the viewer first but it will be empty until a program runs, whereupon it will refresh.", 
            "title": "Running your code"
        }, 
        {
            "location": "/project/ide/boxes/#the-viewer", 
            "text": "The viewer is a special window that appears either inside Codio or in a separate browser tab. To open it, you should add  \"Viewer\": \"https://{{domain3000}}/\"  to the .codio file.  {\n// Configure your Run and Preview buttons here.\n\n// Run button configuration\n   commands : {\n         Run Python (tkinter) :  python3 tkinterpy/demo.py ,\n         Run Java (Lunar Phases) :  cd swing   java LunarPhases ,\n         SQLite Browser App :  sqlitebrowser ,\n         StarUML :  staruml \n  },\n\n// Preview button configuration\n   preview : {\n         Viewer :  https://{{domain3000}}/ \n  }\n}  You can also access the from any browser using  https://pagoda-cigar-3000.codio.io/  where you replace  pagoda-cigar  with your boxes domain name, which you can find in the menu at  Project- Box Info  (scroll to the section  Web: Static content ).", 
            "title": "The viewer"
        }, 
        {
            "location": "/project/ide/boxes/#customization", 
            "text": "You can customise the X Server installation by modifying the config files in the normal way using vim or nano. For example you can   sudo vim /etc/init/openbox.conf  opens the openbox desktop config so you could change the default virtual desktop size  sudo vim /etc/init/novnc-3000.conf  would enable you to modify the port that the viewer runs on in case it conflicts with other services you may have configured on the default port 3000", 
            "title": "Customization"
        }, 
        {
            "location": "/project/ide/boxes/#always-on-boxes", 
            "text": "Always-On Boxes is now available for all paid subscribers. You can enable Box(es) to be Always-On. This means that it will remain active whether you are in the IDE or even logged out. If your project is archived due to inactivity (usually 30 days since last opened), this process removes it from the active fileserver and will also mean that it can no longer be 'Always-On'. The number of Always-On Boxes you can have depends on the subscription plan", 
            "title": "Always-on boxes"
        }, 
        {
            "location": "/project/ide/boxes/#marking-a-project-as-always-on", 
            "text": "You can set a Box to Always-On from the  Project- Settings  menu if you're in the IDE. If you're in the Dashboard, select Projects to get the listing, then press the gear icon on the right side of the Project listing. You will be shown the settings screen where you can enable the Always On switch.", 
            "title": "Marking a Project as Always On"
        }, 
        {
            "location": "/project/ide/boxes/#keeping-terminal-processes-running", 
            "text": "When you exit your project in the IDE and return to the Dashboard, any processes that were started within a terminal window will terminate.  You can prevent this in one of two ways.", 
            "title": "Keeping terminal processes running"
        }, 
        {
            "location": "/project/ide/boxes/#the-simple-way", 
            "text": "One simple way to avoid this issue is to append   to the terminal command that starts your process. You will see output as usual but may need to press the enter key to get a fresh command prompt.  Then, you will need to enter the following command before you close the terminal window or exit your project and return to the dashboard.  disown -a", 
            "title": "The simple way"
        }, 
        {
            "location": "/project/ide/boxes/#tmux", 
            "text": "As an alternative, you can install tmux.", 
            "title": "tmux"
        }, 
        {
            "location": "/project/ide/boxes/#ssh-and-code-access-codio-box-ssh-keys", 
            "text": "Codio generates a key-pair that can be used for services like Github, so you can upload your public key to those systems (read  this section  for details on how to upload Github and Bitbucket public keys with a single button press).  You can find your Codio public key as  described here .  When you create a new Codio project, your user keys are automatically copied into your project and can be found in the  ~/.ssh  folder. You will need to open up a Terminal window to access this folder and the keys stored in the  id_rsa  file.", 
            "title": "SSH and code access - Codio box SSH keys"
        }, 
        {
            "location": "/project/ide/boxes/#ssh-and-code-access-ssh-into-your-box", 
            "text": "Unless your project is utilising  Always On Boxes  you will need to open your Codio Project in order for the Box to be started and ready to receive incoming SSH connections.", 
            "title": "SSH and code access -SSH into your box"
        }, 
        {
            "location": "/project/ide/boxes/#generating-key-pairs", 
            "text": "There are several sites that explain generating SSH keys.   Windows:  http://kb.siteground.com/how_to_generate_an_ssh_key_on_windows_using_putty/ . Please note that for Windows, you should generate SSH2 RSA key type  Mac :  https://help.github.com/articles/generating-ssh-keys#platform-mac  Linux:  https://help.github.com/articles/generating-ssh-keys#platform-linux", 
            "title": "Generating Key Pairs"
        }, 
        {
            "location": "/project/ide/boxes/#find-your-local-machines-ssh-public-key", 
            "text": "This is pretty easy to do. On a Mac or Linux box you can get your public key in one of two ways   either  copy your local machine's public key to the clipboard from your local machine's terminal using  pbcopy   ~/.ssh/id_rsa.pub  or  on your local machine, open the file  ~/.ssh/id_rsa.pub  and copy it to the clipboard. Be careful with some editors that include control characters that you don't want to be copied across.   On a Windows machine you'll probably be using putty, so grab your key from there.", 
            "title": "Find your local machine's SSH public Key"
        }, 
        {
            "location": "/project/ide/boxes/#uploading-your-public-key-to-your-codio-box", 
            "text": "You need to upload the public key you just found in the above steps. Once you have it copied to the clipboard, open a terminal tab in your Codio project and enter this key into the  .ssh/authorized_keys  file. The easiest way to do this is to enter  nano .ssh/authorized_keys  which will open this file in the nano editor and you can paste it in.  You can view/check to see all/any Public key(s) you have uploaded into your project by opening the terminal and running  cat ~/.ssh/authorized_keys .", 
            "title": "Uploading your Public Key to your Codio Box"
        }, 
        {
            "location": "/project/ide/boxes/#enabling-and-connecting-to-your-box-from-your-local-machines-terminal", 
            "text": "Go to  Project Settings  and to the  Forwarding Settings  tab and click the 'Enable SSH Forwarding' button  The connection string you need to use is shown there   You will see connection details like this SSH Forwarding: ssh codio@forwarding.codio.com:29119  You can now connect to your Box from any Terminal window using (in the above example) ssh codio@forwarding.codio.com -p 29119  If you get a message  Permission denied (publickey)  then you have not uploaded your SSH Public Key correctly.  You cannot connect to a Codio Box without using a Public Key.", 
            "title": "Enabling and Connecting to your Box from your local machine's Terminal"
        }, 
        {
            "location": "/project/ide/boxes/#ide-access-permissions", 
            "text": "By default, other users with read and write permissions are not able to access your Box from the command line.  You can grant access to other Codio users by assigning the Admin permission level. This feature requires a paid subscription.  For full details, please refer to the  Permissions section  of the documentation.", 
            "title": "IDE access permissions"
        }, 
        {
            "location": "/project/ide/boxes/#auto-starting-services", 
            "text": "Your Box will be put to sleep under the conditions  explained here . When you open your project, the Box will start and services will start automatically.", 
            "title": "Auto starting services"
        }, 
        {
            "location": "/project/ide/boxes/#upstart", 
            "text": "Codio currently uses upstart. If you want to configure services to start when your box starts up, you should configure a  .conf  file. If you are not familiar with upstart, please Google it for configuration details.  Important  - you need to specify the user account under which the service is run using  setuid codio .  Below is an example  .conf  file that should be located in the  /etc/init  folder.  # testservice - test service job file\ndescription  Some description \nauthor  freddy  you@yours.com \n\n# Stanzas\n#\n# Stanzas control when and how a process is started and stopped See a list of stanzas here:\n# http://upstart.ubuntu.com/wiki/Stanzas When to start the service\nstart on runlevel [2345]\nstop on runlevel [016]\n\n# Automatically restart process if crashed\nrespawn\n\n# Specify the user account which the service should run under testservice - test service job file\nsetuid codio\n\n# Specify working directory if needed\nchdir /home/codio/workspace\n\n# Specify the process/command to start, e.g.\nexec your-service-name", 
            "title": "Upstart"
        }, 
        {
            "location": "/project/ide/boxes/#restart-and-reset", 
            "text": "Codio offers the ability to restart and to reset your project's Box. You can find both options in the  Project  menu.", 
            "title": "Restart and reset"
        }, 
        {
            "location": "/project/ide/boxes/#restart", 
            "text": "This operation reboots the Box, which usually takes a few seconds.", 
            "title": "Restart"
        }, 
        {
            "location": "/project/ide/boxes/#reset", 
            "text": "This operation is fairly destructive and should be used with caution. It resets the Box to its fresh state but leaves your code files untouched.   any new folders or files that have been created will be deleted  all parts of the Box outside of the  ~/workspace  folder will be reset  all code files in the  ~/workspace  folder are untouched  a Box restart   After a Reset, you will need to reinstall components (npm modules, ruby gems etc.) and other modifications you may have made.", 
            "title": "Reset"
        }, 
        {
            "location": "/project/ide/boxes/#customizable-run-menu", 
            "text": "A handy feature is the ability to add commonly used commands to the Codio IDE, akin to using the  alias  command from the command line.  When the menu item is selected, a new terminal window will open to run the command in. You can also force the command to run in an existing terminal window as we illustrate below.", 
            "title": "Customizable run menu"
        }, 
        {
            "location": "/project/ide/boxes/#codio-file", 
            "text": "The configuration for the  Run  (and  Preview ) button can be set by editing the  .codio  file in the root of your project.  The following code below shows the  .codio  file configured to give this Run menu   which is driven by the following  .codio  file  {\n  // Configure your Run and Preview buttons here.\n\n  // Run button configuration\n   commands : {\n     Install Learnyounode  :  npm install -g learnyounode ,\n     Run Lesson  :  ./ns-executes.sh run {{filename_no_ext}} {{path}} ,\n     Verify Lesson  :  ./ns-executes.sh verify {{filename_no_ext}} {{path}} ,\n     Completed Lessons  :  learnyounode ,\n     Run with Node  :  node {{filepath}} 3 4 5 \n  }\n}  When you select a  Run  command, it will open a new console window where you will see the output. Pressing the  Run  button will execute the last selected command.", 
            "title": ".codio file"
        }, 
        {
            "location": "/project/ide/boxes/#using-the-same-terminal-window", 
            "text": "If you want to avoid new terminal windows appearing when you run the command, you can use an id field.  {\n   commands : {\n         Node version : {\n             id :  terminal_1 ,\n             cmd :  node --version \n        },\n         ls : {\n             id :  terminal_1 ,\n             cmd :  ls \n        }\n  },\n\n// Preview button configuration\n   preview : {\n         Project Index (static) :  http://{{domain}}/{{index}} ,\n         Current File (static) :  http://{{domain}}/{{filepath}} ,\n         Box URL :  http://{{domain3000}}/ ,\n         Box URL SSL :  https://{{domain3000}}/ \n  }\n}   Commands with the same \"id\" will share the same terminal window.  The terminal id should be \"backend-guide\" to execute a command in the terminal window opened by guides.", 
            "title": "Using the same terminal window"
        }, 
        {
            "location": "/project/ide/boxes/#codio-tokens", 
            "text": "You can see from the above  .codio  sample that it is possible to insert tokens into the shell commands. The following tokens are currently available and operate in the main on the currently selected file tab in the IDE   {{filepath}}  inserts the path and full file name  /path/to/file.ext  {{path}}  inserts only the path to the selected file  /path/to/  {{filename}}  inserts the filename with its extension  file.ext  {{filename_no_ext}}  inserts the filename without the extension  file  {{domain3000}}  inserts the public url to your box;  word1-word2-3000.codio.io  to access over port 80, which is useful if your corporate firewall blocks ports other than 80 and 443  {{domain}}  inserts the alternate public url to your box;  word1-word2.codio.io , be aware that you will usually need to specify a port to reach a service running on your Box. e.g.  word1-word2- port .codio.io", 
            "title": ".codio Tokens"
        }, 
        {
            "location": "/project/ide/editing/", 
            "text": "Productivity, Emmet, Zen Coding\n\uf0c1\n\n\nWe have implemented lots of productivity features into the Codio IDE thanks to \nEmmet\n, formerly Zen Coding. These features let you saves considerable time when working with HTML, CSS and Javascript files.\n\n\nStandard Code Editor Keyboard Shortcuts\n\uf0c1\n\n\nGeneral keyboard shortcuts can be found \nin this section\n. All other productivity shortcuts are found here in this chapter.\n\n\nEmmet Keyboard Shortcuts\n\uf0c1\n\n\nA set of powerful \nproductivity shortcuts\n for HTML5, CSS and Javascript.\n\n\nAbbreviations\n\uf0c1\n\n\nThanks to our Emmet support, you get a large number of \nHTML and CSS abbreviations\n that expand to code, a bit like this\n\n\ndiv\nul\nli*3\n\n\n\n\nwhich expands to\n\n\n  \ndiv\n\n      \nul\n\n          \nli\n/li\n\n          \nli\n/li\n\n          \nli\n/li\n\n      \n/ul\n\n  \n/div\n\n\n\n\n\nBe sure to check out the \ncomplete reference\n as there are an awful lot of abbreviations for you to take advantage of.\n\n\nEmmet docs\n\uf0c1\n\n\nWe would strongly recommend having a good dig around the \nEmmet documentation\n for a detailed introduction into the general Emmet syntax.\n\n\nAbbreviations\n\uf0c1\n\n\nThis is a way of generating HTML using a CSS selector inspired approach. Take a look at the following examples.\n\n\nYou simply enter the abbreviation in the Code Editor and then press the Tab key to expand the abbreviation.\n\n\nBasic HTML Example\n\uf0c1\n\n\ndiv\nul\nli*3\n\n\n\n\nresults in\n\n\ndiv\n\n    \nul\n\n        \nli\n/li\n\n        \nli\n/li\n\n        \nli\n/li\n\n    \n/ul\n\n\n/div\n\n\n\n\n\nJuicier HTML Example\n\uf0c1\n\n\n#page\ndiv.logo+ul#navigation\nli*5\na{Item $}\n\n\n\n\nresults in\n\n\ndiv id=\npage\n\n    \ndiv class=\nlogo\n/div\n\n    \nul id=\nnavigation\n\n        \nli\na href=\nItem 1\n/a\n/li\n\n        \nli\na href=\nItem 2\n/a\n/li\n\n        \nli\na href=\nItem 3\n/a\n/li\n\n        \nli\na href=\nItem 4\n/a\n/li\n\n        \nli\na href=\nItem 5\n/a\n/li\n\n    \n/ul\n\n\n/div\n\n\n\n\n\nInsertion Stops / Edit Points\n\uf0c1\n\n\nEmmet offers some abbreviations that have insertion points. For example,\n\n\na:link\n\n\n\n\nwill insert\n\n\na href=\nhttp://|\n/a\n\n\n\n\n\nWhere the \n|\n character represents the cursor after insertion. After you have entered the \nhref\n url you should press \nctrl+alt+right arrow\n (not the Tab key) to jump to the next edit point.\n\n\nMore HTML Examples\n\uf0c1\n\n\nBe sure to check out \nHTML Abbreviations\n.\n\n\nAnd also take a look at the \ncheat sheet\n as there are an awful lot of abbreviations for you to take advantage of.\n\n\nCSS Examples\n\uf0c1\n\n\nw100p\n results in \nwidth: 100%\n\n\nm10p30e5x\n results in \nmargin: 10% 30em 5ex\n\n\nand\n\n\np100+m10e\n\n\n\n\nresults in\n\n\npadding: 100px;\nmargin: 10em;\n\n\n\n\nand how about this for gradients\n\n\nlg(left, #fc0, 30%, red)\n\n\n\n\nresults in\n\n\nbackground-image: -webkit-gradient(linear, 0 0, 100% 0, from(#fc0), color-stop(0.5, 30%), to(red));\nbackground-image: -webkit-linear-gradient(left, #fc0, 30%, red);\nbackground-image: -moz-linear-gradient(left, #fc0, 30%, red);\nbackground-image: -o-linear-gradient(left, #fc0, 30%, red);\nbackground-image: linear-gradient(left, #fc0, 30%, red);\n\n\n\n\nFuzzy Search\n\uf0c1\n\n\nIf you take a look at \ncheat sheet\n, you\u2019ll find that there are too many CSS snippets to remember. Also, some of them might be a bit lengthy for sake of logical separation.\n\n\nTo make CSS writing a bit easier, Emmet implements fuzzy search logic for CSS snippets: every time you enter an unknown abbreviation, Emmet will try to find the closest snippet definition.\n\n\nFor example, instead of writing \nov:h\n (overflow: hidden;) abbreviation, you can write \nov-h\n, \novh\n or even \noh\n. You can play around with the fuzzy search in text editor below. Try to find as many variations as possible (use Tab key to expand abbreviations) for \nbxz:cb\n, \novx:h\n and \npos:a\n snippets.\n\n\nMore CSS Examples\n\uf0c1\n\n\nFor more details on CSS abbreviations, please go to the \nEmmet documentation\n and be sure to look at the sub-chapters.\n\n\nBut also be sure to check out the \ncheat sheet\n.\n\n\nSpecial keyboard actions\n\uf0c1\n\n\nEmmet also offers a very nice range of keyboard shortcuts to speed productivity even further. Keyboard actions can be modified in \nPreferences\n\n\nMatch Tag Pair\n\uf0c1\n\n\nMac:Cmd+D (inward) and Shift+Cmd+D (outward)\n\n\nWinLin:Ctrl+D (inward) and Shift+Ctrl+D (outward)\n\n\nA well-known tag balancing: searches for tag or tag's content bounds from current cursor position and selects it. It will expand (outward balancing) or shrink (inward balancing) selection when called multiple times. Not every editor supports both inward and outward balancing due of some implementation issues, most editors have outward balancing only.\n\n\nClick here to see it in the Emmet site.\n\n\nGo To Matching Pair\n\uf0c1\n\n\nMac: Shift+Cmd+T\n\n\nWin: Shift+Ctrl+T\n\n\nIn HTML, allows you to quickly traverse between opening and closing tag.\n\n\nClick here to see it in the Emmet site.\n\n\nWrap with Abbreviation\n\uf0c1\n\n\nMac/Win: Shift+Cmd+A\n\n\nA very powerful feature, it takes an abbreviation, expands it and places currently selected content in the last element of generated snippet. If there\u2019s no selection, action will silently call \u201cMatch Tag Pair\u201d to wrap context element.\n\n\nClick here to see it in the Emmet site.\n\n\nGo to Edit Point\n\uf0c1\n\n\nWin: Ctrl+Alt+Right Arrow or Left Arrow\n\n\nThis action works for HTML code blocks and allows you to quickly traverse between important code points:\n\n\n\n\nbetween tags\n\n\nempty attributes\n\n\nnewlines with indentation\n\n\n\n\nClick here to see it in the Emmet site.\n\n\nSelect Item\n\uf0c1\n\n\nMac/Win: Shift+Cmd+\n\n\nAction is similar to \u201cGo to Edit Point\u201d, but selects important code parts.\n\n\nIn HTML, these are tag name, full attribute and attribute value. For class attribute it also selects distinct classes.\n\n\nIn CSS, it matches selector, full property and property value. For complex values and functions like 1px solid red or url(image.jpg) also selects part of it.\n\n\nClick here to see it in the Emmet site.\n\n\nToggle Comment\n\uf0c1\n\n\nMac: Cmd+/\n\n\nWin: Ctrl+/\n\n\nThis action, as name says, toggles comments on and off for the selected line. Works nicely in CSS and HTML files.\n\n\nClick here to see it in the Emmet site.\n\n\nRemove Tag\n\uf0c1\n\n\nMac: Cmd+K\n\n\nWin: Ctrl+K\n\n\nQuickly removes tag, found by \u201cMatch Tag Pair\u201d from current cursor position, and adjusts indentation.\n\n\nClick here to see it in the Emmet site.\n\n\nMerge Lines\n\uf0c1\n\n\nMac: Shift+Cmd+M\n\n\nWin: Shift+Ctrl+M\n\n\nMerges selected lines into a single line. But when there\u2019s no selection, will match context HTML tag.\n\n\nClick here to see it in the Emmet site.\n\n\nInline Calculator\n\uf0c1\n\n\nMac: Shift+Cmd+Y\n\n\nWin: Shift+Ctrl+Y\n\n\nEvaluates simple math expressions like 2*4 or 10/2 and outputs its result. You can use \n\\\n operator which is equivalent to round(a/b).\n\n\nVery useful in CSS where numeric values should be modified frequently.\n\n\nClick here to see it in the Emmet site.\n\n\nIncrement/Decrement Number\n\uf0c1\n\n\nMac/Win : Alt+Up/Down (inc/dec by 0.1)\n\n\nMac/Win : Ctrl+Up/Down (inc/dec by 1)\n\n\nMac/Win : Ctrl+Alt+Up/Down (inc/dec by 10)\n\n\nThis action, as name says, increments or decrements the number under the cursor with different steps: 0.1, 1 or 10.\n\n\nClick here to see it in the Emmet site.\n\n\nComplete reference\n\uf0c1\n\n\nEmmet has a huge number of shortcuts available. Check out the \nEmmet Cheat Sheet\n\n\n\n\nGit, Mercurial \n SVN\n\uf0c1\n\n\nGit, Mercurial and SVN are all preinstalled, so you can \nopen up a Terminal window\n to access them from the command line.\n\n\nYou can also configure your \n.codio\n file so common commands are accessible from the \nRun\n menu in the Codio IDE. \nRefer to the Boxes documentation\n on how to do this.\n\n\nA few Git helpers\n\uf0c1\n\n\nWe have added a few Git helpers to the \nTools-\nGit\n menu.\n\n\n\n\nUsing Git without remote repos\n\uf0c1\n\n\nYou can use Git commands within your Codio project without needing to ever set up a remote repo. This gives you not only collaborative capabilities, but also comprehensive version control.\n\n\nHowever, one of the benefits of a distributed Source Control Management system is that having your code in more than one place means that there is no single point of failure. For this reason, we recommend that you use a third party provider such as GitHub as an external location to back up your data.\n\n\nViewing GitHub repos\n\uf0c1\n\n\nGitHub let's you browse around a repo but it's not the same as using an IDE. Codio gives you a great way of viewing any GitHub (or Git) repo. For web apps, you can even run and \npreview\n within Codio.\n\n\nOffering link/button in the repo readme.md file\n\uf0c1\n\n\nThis is great for anyone wanting to offer a link into a GitHub README page and then, when clicked, it initiates the creation of a project, importing in from the repo for the user in their Codio account.\n\n\nThe advantage of this approach is that changes you make to your repo will be automatically shown in Codio as it creates a brand new Codio project whenever clicked on. If a project of that name already exists, users can change the name on the project creation page.\n\n\n\n\nYou just use the following link format in your GitHub README file (or anywhere else for that matter).\n\n\nhttps://codio.com/home/projects/new?importType=git\nactiveTab=3\nname=your_codio_project_name\nimportGitUrl=git@github.com:your_github_name/your_repo_name\nstackVersion=stack_version_id\n\n\n\n\n\nIn some cases, you may want to specify a specific branch. The common usage for this is if you have a demo or GitHub Pages site that you want to load into Codio. In this case you do the following\n\n\nhttps://codio.com/home/projects/new?importType=git\nactiveTab=3\nname=your_codio_project_name\nimportGitUrl=git@github.com:your_github_name/your_repo_name\nbranch=other_branch\nstackVersion=stack_version_id\n\n\n\n\n\nFinding the stack version ID\n\uf0c1\n\n\nGo to the \nStacks\n area and find the appropriate stack you wish to be used with your repo. Select \nUse Stack\n and from the address bar you will see the stack version ID to add to your link\n\n\nExample showing the \nEmpty Stack\n stack version ID\n\n\n\n\nYou are free to use any way of linking to Codio but we would recommend using the following images\n\n\n\n\n\n\nHow get manually import a Git repo into Codio\n\uf0c1\n\n\n\n\n\n\nIf you are on the GitHub site and looking at a repo, you will see the \nClone URL\n link (circled above).\n\n\nClick to copy the link to the clipboard; if you clone using SSH, you must have added the Codio SSH public key first as \ndescribed here\n\n\nLogin to Codio\n\n\nClick on \nNew Project\n and then the \nClick here\n for more options\n\n\nSelect \nImport\n and then from the \nSource\n drop-down, select \nGit\n\n\nPaste in the Git URL (see below) and add any additional details you require\n\n\nPress \nCreate\n and Codio will load the repo and then display it\n\n\n\n\n\n\nResources\n\uf0c1\n\n\nIf you are new to Git, then here are some resources to get you started.\n\n\n\n\nGit is simpler than you think\n (this is worth reading as it explains HOW Git works rather than teaching you usage)\n\n\nGit reference\n\n\nIntroduction to Git by Scott Chacon\n\n\n\n\nHere is a list of more Git Tutorials in case you want some choice\n\n\n\n\n10 Git Tutorials for beginners\n\n\n\n\nSSH keys\n\uf0c1\n\n\nTo transfer your public key to Github or other remotes, please refer to this \nsection\n. There is a section on this page that describes setting up keys with Github.\n\n\nYou may also want to refer to \nSSH Keys in the Boxes section\n.\n\n\nVery basic Git tutorial\n\uf0c1\n\n\nThis is not supposed to be a proper Git tutorial in any sense. Its purpose is to show anyone who is new to Git or Codio how to use it to get all the basic things done.\n\n\nFor a proper, in-depth overview of Git, refer to the \nresources\n page.\n\n\nPlease make sure you read this excellent overview if you are new to Git : \nhttp://git-scm.com/book/en/Getting-Started-Git-Basics\n\n\nGitHub Keys\n\uf0c1\n\n\nIf you're using GitHub, it is recommended that you use the SSH remote url rather than HTTPS. In order to do this, however, you should first make sure that your Codio public key is loaded into your GitHub account or repo settings. This whole process is \ndescribed here\n.\n\n\nExperimentation\n\uf0c1\n\n\nThe best way to learn Git is to create a really simple project with a few text files in it and then experiment like crazy. You can play around with all the Git commands and sync with GitHub repos to your heart's content without worrying about doing any coding.\n\n\nOnce you have done this for a while, you will feel a lot more comfortable about using Git for your precious code.\n\n\nYour project's starting point\n\uf0c1\n\n\nYou created a project by importing from a Git repo\n\uf0c1\n\n\nIf you have code that already exists in a remote repo, say GitHub, then you should create a new project by importing from that repo. That will automatically load the project and set up the correct association with the remote Git repo.\n\n\nCreating a project is \nfully described here\n.\n\n\nI do not yet have a remote repo\n\uf0c1\n\n\nIf you have code within Codio and you want to create a brand new GitHub (or other remote) repo, then follow these steps.\n\n\n\n\nCreate a new project in Codio or open up an existing one.\n\n\nOpen the terminal (Tools \n Terminal) and initialize git by typing \"git init\" and pressing enter\n\n\nCreate a new, empty repo on GitHub or other provider.\n\n\nCopy the repo url to the clipboard. If you're using GitHub, use the SSH url rather than https and you should make sure that your Codio public key is loaded into your GitHub account or repo settings as \ndescribed here\n\n\n\n\n\n\n\n\nWithin the IDE, go to \nTools \n Git \n Remotes\n\n\nIt is recommended you use \norigin\n as the name to confirm the normal standards. You do not need to specify a username or password if you are using SSH.\n\n\nPaste the remote url into the URL field.\n\n\n\n\n\nCheck the status with 'git status'\n\uf0c1\n\n\nWhenever you want to see what the Git status of your project is enter \ngit status\n. Initially, you will see that there is nothing to report\n\n\n$ git status\n# On branch master nothing to commit, working directory clean\n\n\n\n\nTracking files\n\uf0c1\n\n\nCodio uses Git by default and if you import a project from a Git repo, all the existing files will already be 'tracked' (explained in the next section). Any new files you add will need to be tracked using a Git command.\n\n\nTracking means that Git knows about them. If you add a new file, Git will not know about it and needs to be explicitly told.\n\n\n\n\nAdd a new file (\ntest.txt\n) and add a few random characters to it.\n\n\nOpen any other existing file (I chose humans.txt) and make a small, harmless change to it.\n\n\nRun \ngit status\n again and you should see\n\n\n\n\n# On branch master `\n# Changes not staged for commit:`\n# (use \ngit add ...\n to update what will be committed)\n# (use \ngit checkout -- ...\n to discard changes in working directory)\n#\n#   modified: humans.txt\n#\n# Untracked files:\n# (use \ngit add ...\n to include in what will be committed)\n#\n#   test.txt no changes added to commit (use \ngit add\n and/or \ngit commit -a\n)\n\n\n\n\nThis shows you the modified and the new (untracked) files.\n\n\nTo tell GitHub to track the file, you can do one of the following\n\n\n\n\ngit add .\n which tells Git to track all files in the project that are not yet tracked. This is the quickest and simplest way to track any new files.\n\n\ngit add FILENAME\n explicitly tracks a single file\n\n\n\n\nStaged Files\n\uf0c1\n\n\nA staged file is one that is tracked and is ready to commit into the repository. Once you run \ngit add\n you are tracking and staging that file. But if you modify a tracked file, the modifications are not staged. To correctly stage them, you need to rerun \ngit add\n.\n\n\nCommitting your changes\n\uf0c1\n\n\nCommitting means that you want to add your staged, files into the repository. There are two ways to do this...\n\n\n\n\ngit commit -m 'commit message'\n will take all staged files and commit them to the repo.\n\n\ngit commit -a -m 'commit message'\n will do the same but the \n-a\n switch tells Git to automatically stage any tracked files before committing them. This means that you don't have to use \ngit add\n at all (unless you want to add new, untracked files).\n\n\n\n\nThe commit message is important as it allows you to see what general changes were involved in the commit. This can be useful when you want to look back a few days later and no longer remember what was in the commit.\n\n\nSo I entered \ngit commit -a -m \"added test.txt and modified some stuff\"\n and get\n\n\n[master d3e6bb1] added test.txt and modified some stuff\n2 files changed, 2 insertions(+)\ncreate mode 100644 test.txt`\n\n\n\n\nand if I run a \ngit status\n afterwards, I will see that everything is clean and up-to-date.\n\n\n# On branch master nothing to commit, working directory clean\n\n\n\n\nReverting\n\uf0c1\n\n\nOne of the nice things you can do is to revert your code back to an earlier commit. \ngit revert\n is the command for rolling back like this. There are a number of ways to use this, simple uses are\n\n\n\n\ngit revert 'commit id'\n reverts back to the SHA (uid) you can see when you type \ngit log\n\n\ngit revert HEAD\n will revert back to the last commit, throwing away any uncommitted changes\n\n\ngit revert HEAD~n\n for example HEAD~3 will revert to the 4rd last commit.\n\n\ngit revert HEAD^^^\n (count of ^ is like ~n) will also revert back to the 4th last commit\n\n\n\n\nThere are more advanced usages which you should read up on such as the \n-n\n. Try \nlooking here\n.\n\n\nPushing to a remote repository\n\uf0c1\n\n\nIf you want to send your committed changes to a remote repository, you will use the \ngit push\n command. First, however, you need to make sure that you have a \nremote\n set up.\n\n\nIf you created your repository by importing from a Git repo, then the remote will have automatically been created.\n\n\nIf you want to create a new remote repository, then you will have already done this as described at the top of this page.\n\n\nSo all you need to do is enter \ngit push origin master\n . Let's dissect this command\n\n\n\n\norigin\n is the name of the remote repo. In most cases, this will be called origin, but is not necessarily so.\n\n\nmaster\n is the name of the branch. When you create a new Codio project, a \nmaster\n branch is automatically created and appears in brackets at the top of the file tree next to the project name. Branches are beyond the scope of this topic but they are definitely worth investigating as they are a very powerful feature of Git.\n\n\n\n\nIf you now go to GitHub and look at the repository, you will see that your changes are pushed. You can also see the commits you made.\n\n\nPulling from a remote repository\n\uf0c1\n\n\nNow let's say that someone else is working remotely on the same code (let's assume they are not using Codio). They will push their code to the GitHub repo, too.\n\n\nBy running \ngit pull origin master\n, we pull in changes from the remote repo and Git will automatically merge them.\n\n\nResolving Conflicts\n\uf0c1\n\n\nWhen you pull in from the remote, you may get a conflict warning. This will happen if someone else has modified code in a way that Git cannot automatically resolve, usually because you have been editing the same bit of code.\n\n\nWhen this happens, you will need to resolve the conflict. If you open up the file, you will see something like this\n\n\n HEAD:index.html\n\ndiv id=\nfooter\ncontact : email.support@github.com\n/div\n\n=======\n\ndiv id=\nfooter\n\nplease contact us at support@github.com\n\n/div\n\n\n iss53:index.html\n\n\n\n\nYou simply need to remove the code block that you want to dispose of. The top block is your code and the bottom comes from the code being merged. If you want to keep your code, you will want to end up with\n\n\ndiv id=\nfooter\ncontact : email.support@github.com\n/div\n\n\n\n\n\nif you want the merged code to remain, it will be\n\n\ndiv id=\nfooter\n\n    please contact us at support@github.com\n\n/div\n\n\n\n\n\nTo minimize conflicts, you should 1. Commit little and often and 2. Pull from the remote master often.\n\n\nBranches\n\uf0c1\n\n\nBranches are important and worth mastering at an early stage. When you create a branch, you are creating a new area to code within. You then \nmerge\n another branch, usually the \nmaster\n branch, into your new branch. From this point on, you can do whatever you want (add, commit, push etc) without impacting on the \nmaster\n branch on any other branch for that matter.\n\n\nFor a full overview on branching, please \nread this\n\n\nThe commands you will need to master are\n\n\n\n\ngit branch\n - creates a new branch\n\n\ngit checkout\n - switches to that branch (be careful about doing this without committing the branch you are leaving as any unstaged files will be lost)\n\n\ngit merge from-branch\n - merges code from \nfrom-branch\n into your current branch\n\n\n\n\nGood practice is to switch over to your master branch and pull in changes from the remote (if you're using one). Then switch back to your working branch and merge in changes. Doing this ensures that conflicts are kept to a minimum.\n\n\nGitHub and other remotes\n\uf0c1\n\n\nMost people will want to push to Github and other remote repos. There are various ways to manage this within Codio.\n\n\nRemotes and Github\n\uf0c1\n\n\nTo work with Github, you need to set up your SSH keys properly as \ndescribed here\n.\n\n\nI have a remote repo\n\uf0c1\n\n\nIf your starting point is a remote repo, then you should create a new project from the Codio dashboard. Create Project is an option above your project listings.\n\n\nYou should select the Git tab and enter in the ssh url. This will then create your Codio project by cloning the remote repo you specify and that remote repo will automatically be logged within that project.\n\n\nI do not yet have a remote repo\n\uf0c1\n\n\nIf you have code within Codio and you want to configure it to synchronize with a remote repo, then you should to the following\n\n\n\n\nCreate a new, empty repo on Github or other provider.\n\n\nCopy the repo url to the clipboard. If you're using Github, then use the SSH url rather than https.\n\n\nWithin the IDE, go to \nTools-\nGit-\nRemotes\n\n\nComplete the dialog as shown below. It is recommended you use \norigin\n as the name to confirm the normal standards. You do not need to specify a username or password if you are using SSH.\n\n\n\n\n\n\nIf you prefer, you can use the command line interface to achieve the same thing using \ngit remote\n.\n\n\nOnce you have set up your remotes, you can now perform sharing and updating commands (push, pull etc.) from Codio's git command line.\n\n\nTry pushing your code to the remote using \ngit push --set-upstream origin master\n. From now on you can use simply \ngit push\n as the set-upstream command ensure \norigin master\n is used by default.\n\n\nSimplified Git Steps\n\uf0c1\n\n\nWe will not attempt any sort of tutorial here, but the following steps cover the absolute basics of Git usage with a remote. If you are new to Git, then you should refer to the \nresources page\n.\n\n\n\n\ngit status\n gives you the status of your current branch\n\n\ngit add .\n adds all files, tracked or not, to the staged files\n\n\ngit commit -a -m\n stages and commits all files to the snapshot\n\n\nThe first time you push, run the following command to track the new remote \ngit push --set-upstream origin master\n\n\nSubsequent pushes can be done with \ngit push\n, which pushes all committed changes of the \nmaster\n branch to the tracked remote (origin).\n\n\n\n\nActive branch\n\uf0c1\n\n\nYou can see which branch you are on by looking in the file tree. The top level item is the project name and to the right of this in brackets is the current branch.\n\n\nYou may switch branches using the command line interface or the \nTools \n Git \n Switch Branch\n menu item.\n\n\n\n\nKeyboard shortcuts\n\uf0c1\n\n\nYou have full control over the keyboard shortcuts for code editing. You should refer to the \nCodio Preferences\n section to read more about this.\n\n\nCodio has its own complete set of defaults, all of which can be overriden. You can use Vim or Emacs key bindings by modifying the \nkeymap\n preference setting. If you do not use \nkeymap=default\n, you cannot override keyboard shortcuts.\n\n\nThe sections that contain productivity specific actions and shortcuts are \n[Editor]\n and \n[Emmet]\n.\n\n\nMultiple cursors\n\uf0c1\n\n\nYou can place multiple cursors anywhere in a file using \nCmd+Click\n (Mac) or \nCtrl+Click\n (PC/Linux).\n\n\nClick to place the cursor at the desired location, then press and hold Cmd/Ctrl and begin clicking at new locations. When you release Cmd/Ctrl, you can start typing and the content will be duplicated at all cursor locations.\n\n\nYou can also use \nAlt-Click\n to place the cursor everywhere inbetween a start and end position.\n\n\n\n\nSearch and replace\n\uf0c1\n\n\nCodio supports local and global search and replace. You can access these feature by hotkey or from the Find menu.\n\n\nHotkey shortcuts can be seen in the Find menu. You can override these from \nPreferences\n.\n\n\nLocal\n\uf0c1\n\n\nSearch and replace is supported on the currently selected file.\n\n\nThe hotkeys are defined in \nPreferences\n and the defaults are\n\n\n;Find.\n; Type: hotkey\nkey_find = Cmd+F\n\n;Find next.\n; Type: hotkey\nkey_find_next = Cmd+G\n\n;Find previous.\n; Type: hotkey\nkey_find_prev = Shift+Cmd+G\n\n;Replace.\n; Type: hotkey\nkey_replace = Cmd+Alt+F\n\n;Replace all.\n; Type: hotkey\nkey_replace_all = Shift+Cmd+Alt+F\n\n\n\n\nGlobal\n\uf0c1\n\n\nGlobal search and replace are available within the \nFind\n menu under \nFind in project\n and \nReplace in project\n.\n\n\nYou can search using regular expressions, ignore case and whole word settings. The buttons on the left of the input fields control these settings.\n\n\n\n\nOnce the search operation has completed you will see matches listed in a Codio tab. Double click on the highlighted match to open up that file in a new tab.\n\n\n\n\nPattern \n Wildcard Matching (Globs)\n\uf0c1\n\n\nWhen you are searching, you can specify a search pattern in the \nWhere\n field.\n\n\nLets say you have the following project\n\n\n|-- lib\n|  |-- index.js\n|  |-- hello_world.js\n|-- index.html\n|-- 404.html\n|-- app.js\n`-- gruntfile.coffee\n\n\n\n\nthen you can use globs to select files in this way:\n\n\n\n\nAll files ending in \n.js\n: \n**/*.js\n.\n\n\nindex.js\n\n\nhello_world.js\n\n\napp.js\n\n\nAll files ending in \n.html\n in the root folder: \n*.html\n\n\nindex.html\n\n\n404.html\n\n\nAll files in \nlib\n: \nlib/*.*\n\n\nindex.js\n\n\nhello_world.js\n\n\nAll files ending in \n.html\n or \n.coffee\n: \n**/*{.html,.coffee}\n\n\nindex.html\n\n\n404.html\n\n\ngruntfile.coffee\n\n\nAll files beginning with \nindex\n: \n**/index*\n\n\nindex.js\n\n\nindex.html\n\n\n\n\nBasic Rules\n\uf0c1\n\n\nAny character that appears in a pattern, other than the special pattern characters described below, matches itself. The NULL character may not occur in a pattern. A backslash escapes the following character; the escaping backslash is discarded when matching. The special pattern characters must be quoted if they are to be matched literally.\n\n\nThe special pattern characters have the following meanings:\n\n\n\n\n\n\n*\n Matches any string, including the null string. When the globstar shell option is enabled, and \n*\n is used in a filename expansion context, two adjacent \n*\ns used as a single pattern will match all files and zero or more directories and subdirectories. If followed by a \n/\n, two adjacent \n*\ns will match only directories and subdirectories.\n\n\n\n\n\n\n?\n Matches any single character.\n\n\n\n\n\n\n[\u2026]\n Matches any one of the enclosed characters. A pair of characters separated by a hyphen denotes a range expression; any character that sorts between those two characters, inclusive, using the current locale's collating sequence and character set, is matched. If the first character following the \n[\n is a \n!\n or a \n^\n then any character not enclosed is matched. A \n-\n may be matched by including it as the first or last character in the set. A \n]\n may be matched by including it as the first character in the set.\n\n\n\n\n\n\nA character class matches any character belonging to that class. The word character class matches letters, digits, and the character \n_\n.\n\n\nWithin \n[\n and \n]\n, an equivalence class can be specified using the syntax \n[=c=]\n, which matches all characters with the same collation weight (as defined by the current locale) as the character c.\n\n\nWithin \n[\n and \n]\n, the syntax [.symbol.] matches the collating symbol symbol.\n\n\n\n\n\n\n?(pattern-list)\n Matches zero or one occurrence of the given patterns.\n\n\n\n\n\n\n*(pattern-list)\n Matches zero or more occurrences of the given patterns.\n\n\n\n\n\n\n+(pattern-list)\n Matches one or more occurrences of the given patterns.\n\n\n\n\n\n\n@(pattern-list)\n Matches one of the given patterns.\n\n\n\n\n\n\n!(pattern-list)\n Matches anything except one of the given patterns.\n\n\n\n\n\n\nColor preview and picker\n\uf0c1\n\n\nRegular Colors\n\uf0c1\n\n\nIf you are in any file, of any type, that contains something that looks like an RGB hex value, rgb(100, 100, 100), hsla(0,100%,50%,0.2) etc., just hover over the code and a popup will appear that shows the color preview.\n\n\n\n\nGradients\n\uf0c1\n\n\nThis works for gradients as well.\n\n\n\n\nColor Picker\n\uf0c1\n\n\nIf you move your mouse into the color preview area and then click, a color picker dialog will appear that allows you to choose a new color. You can drag things around as well as edit the values directly.\n\n\n\n\n\n\nBeautify javascript\n\uf0c1\n\n\nYou can format your Javascript code by pressing the keyboard shortcut as defined in the \nUser Settings\n. By default, it is\n\n\n\n\nkey_format_code\n = \nCmd+Alt+F\n (for a Mac)\n\n\nkey_format_code\n = \nCtrl+Alt+F\n (for anything else)\n\n\n\n\nIt will indent your code correctly and manage spaces and other cool things.\n\n\nFor example, if you start out with this\n\n\nif ('this_is'==/an_example/){of_beautifer();}else{var a=b?(c%d):e[f];}\n\n\n\n\nThen after beautifying, you will end up with this\n\n\nif ('this_is' == /an_example/) {\n    of_beautifer();\n} else {\n    var a = b ? (c % d) : e[f];\n}\n\n\n\n\nSettings\n\uf0c1\n\n\nIf you look within the [code-beautifier] section of the Codio Preferences, you will see the various beautification settings available.\n\n\nDon't forget, you can force these in \nProject preferences\n if you want to have consistently beautified code regardless of who edits your code.\n\n\nForce language highlighting\n\uf0c1\n\n\nCodio will automatically select the syntax highlighting rules based on the file extension.\n\n\nIf you open a file whose extension is not known then you will not get any highlighting of the code. You can tell Codio which language formatting to use by clicking on the name in the status bar of the code window.\n\n\n\n\nYou can override the language highlighting by clicking as shown (circled) in the above screenshot.", 
            "title": "Code Editing"
        }, 
        {
            "location": "/project/ide/editing/#productivity-emmet-zen-coding", 
            "text": "We have implemented lots of productivity features into the Codio IDE thanks to  Emmet , formerly Zen Coding. These features let you saves considerable time when working with HTML, CSS and Javascript files.", 
            "title": "Productivity, Emmet, Zen Coding"
        }, 
        {
            "location": "/project/ide/editing/#standard-code-editor-keyboard-shortcuts", 
            "text": "General keyboard shortcuts can be found  in this section . All other productivity shortcuts are found here in this chapter.", 
            "title": "Standard Code Editor Keyboard Shortcuts"
        }, 
        {
            "location": "/project/ide/editing/#emmet-keyboard-shortcuts", 
            "text": "A set of powerful  productivity shortcuts  for HTML5, CSS and Javascript.", 
            "title": "Emmet Keyboard Shortcuts"
        }, 
        {
            "location": "/project/ide/editing/#abbreviations", 
            "text": "Thanks to our Emmet support, you get a large number of  HTML and CSS abbreviations  that expand to code, a bit like this  div ul li*3  which expands to     div \n       ul \n           li /li \n           li /li \n           li /li \n       /ul \n   /div   Be sure to check out the  complete reference  as there are an awful lot of abbreviations for you to take advantage of.", 
            "title": "Abbreviations"
        }, 
        {
            "location": "/project/ide/editing/#emmet-docs", 
            "text": "We would strongly recommend having a good dig around the  Emmet documentation  for a detailed introduction into the general Emmet syntax.", 
            "title": "Emmet docs"
        }, 
        {
            "location": "/project/ide/editing/#abbreviations_1", 
            "text": "This is a way of generating HTML using a CSS selector inspired approach. Take a look at the following examples.  You simply enter the abbreviation in the Code Editor and then press the Tab key to expand the abbreviation.", 
            "title": "Abbreviations"
        }, 
        {
            "location": "/project/ide/editing/#basic-html-example", 
            "text": "div ul li*3  results in  div \n     ul \n         li /li \n         li /li \n         li /li \n     /ul  /div", 
            "title": "Basic HTML Example"
        }, 
        {
            "location": "/project/ide/editing/#juicier-html-example", 
            "text": "#page div.logo+ul#navigation li*5 a{Item $}  results in  div id= page \n     div class= logo /div \n     ul id= navigation \n         li a href= Item 1 /a /li \n         li a href= Item 2 /a /li \n         li a href= Item 3 /a /li \n         li a href= Item 4 /a /li \n         li a href= Item 5 /a /li \n     /ul  /div", 
            "title": "Juicier HTML Example"
        }, 
        {
            "location": "/project/ide/editing/#insertion-stops-edit-points", 
            "text": "Emmet offers some abbreviations that have insertion points. For example,  a:link  will insert  a href= http://| /a   Where the  |  character represents the cursor after insertion. After you have entered the  href  url you should press  ctrl+alt+right arrow  (not the Tab key) to jump to the next edit point.", 
            "title": "Insertion Stops / Edit Points"
        }, 
        {
            "location": "/project/ide/editing/#more-html-examples", 
            "text": "Be sure to check out  HTML Abbreviations .  And also take a look at the  cheat sheet  as there are an awful lot of abbreviations for you to take advantage of.", 
            "title": "More HTML Examples"
        }, 
        {
            "location": "/project/ide/editing/#css-examples", 
            "text": "w100p  results in  width: 100%  m10p30e5x  results in  margin: 10% 30em 5ex  and  p100+m10e  results in  padding: 100px;\nmargin: 10em;  and how about this for gradients  lg(left, #fc0, 30%, red)  results in  background-image: -webkit-gradient(linear, 0 0, 100% 0, from(#fc0), color-stop(0.5, 30%), to(red));\nbackground-image: -webkit-linear-gradient(left, #fc0, 30%, red);\nbackground-image: -moz-linear-gradient(left, #fc0, 30%, red);\nbackground-image: -o-linear-gradient(left, #fc0, 30%, red);\nbackground-image: linear-gradient(left, #fc0, 30%, red);", 
            "title": "CSS Examples"
        }, 
        {
            "location": "/project/ide/editing/#fuzzy-search", 
            "text": "If you take a look at  cheat sheet , you\u2019ll find that there are too many CSS snippets to remember. Also, some of them might be a bit lengthy for sake of logical separation.  To make CSS writing a bit easier, Emmet implements fuzzy search logic for CSS snippets: every time you enter an unknown abbreviation, Emmet will try to find the closest snippet definition.  For example, instead of writing  ov:h  (overflow: hidden;) abbreviation, you can write  ov-h ,  ovh  or even  oh . You can play around with the fuzzy search in text editor below. Try to find as many variations as possible (use Tab key to expand abbreviations) for  bxz:cb ,  ovx:h  and  pos:a  snippets.", 
            "title": "Fuzzy Search"
        }, 
        {
            "location": "/project/ide/editing/#more-css-examples", 
            "text": "For more details on CSS abbreviations, please go to the  Emmet documentation  and be sure to look at the sub-chapters.  But also be sure to check out the  cheat sheet .", 
            "title": "More CSS Examples"
        }, 
        {
            "location": "/project/ide/editing/#special-keyboard-actions", 
            "text": "Emmet also offers a very nice range of keyboard shortcuts to speed productivity even further. Keyboard actions can be modified in  Preferences", 
            "title": "Special keyboard actions"
        }, 
        {
            "location": "/project/ide/editing/#match-tag-pair", 
            "text": "Mac:Cmd+D (inward) and Shift+Cmd+D (outward)  WinLin:Ctrl+D (inward) and Shift+Ctrl+D (outward)  A well-known tag balancing: searches for tag or tag's content bounds from current cursor position and selects it. It will expand (outward balancing) or shrink (inward balancing) selection when called multiple times. Not every editor supports both inward and outward balancing due of some implementation issues, most editors have outward balancing only.  Click here to see it in the Emmet site.", 
            "title": "Match Tag Pair"
        }, 
        {
            "location": "/project/ide/editing/#go-to-matching-pair", 
            "text": "Mac: Shift+Cmd+T  Win: Shift+Ctrl+T  In HTML, allows you to quickly traverse between opening and closing tag.  Click here to see it in the Emmet site.", 
            "title": "Go To Matching Pair"
        }, 
        {
            "location": "/project/ide/editing/#wrap-with-abbreviation", 
            "text": "Mac/Win: Shift+Cmd+A  A very powerful feature, it takes an abbreviation, expands it and places currently selected content in the last element of generated snippet. If there\u2019s no selection, action will silently call \u201cMatch Tag Pair\u201d to wrap context element.  Click here to see it in the Emmet site.", 
            "title": "Wrap with Abbreviation"
        }, 
        {
            "location": "/project/ide/editing/#go-to-edit-point", 
            "text": "Win: Ctrl+Alt+Right Arrow or Left Arrow  This action works for HTML code blocks and allows you to quickly traverse between important code points:   between tags  empty attributes  newlines with indentation   Click here to see it in the Emmet site.", 
            "title": "Go to Edit Point"
        }, 
        {
            "location": "/project/ide/editing/#select-item", 
            "text": "Mac/Win: Shift+Cmd+  Action is similar to \u201cGo to Edit Point\u201d, but selects important code parts.  In HTML, these are tag name, full attribute and attribute value. For class attribute it also selects distinct classes.  In CSS, it matches selector, full property and property value. For complex values and functions like 1px solid red or url(image.jpg) also selects part of it.  Click here to see it in the Emmet site.", 
            "title": "Select Item"
        }, 
        {
            "location": "/project/ide/editing/#toggle-comment", 
            "text": "Mac: Cmd+/  Win: Ctrl+/  This action, as name says, toggles comments on and off for the selected line. Works nicely in CSS and HTML files.  Click here to see it in the Emmet site.", 
            "title": "Toggle Comment"
        }, 
        {
            "location": "/project/ide/editing/#remove-tag", 
            "text": "Mac: Cmd+K  Win: Ctrl+K  Quickly removes tag, found by \u201cMatch Tag Pair\u201d from current cursor position, and adjusts indentation.  Click here to see it in the Emmet site.", 
            "title": "Remove Tag"
        }, 
        {
            "location": "/project/ide/editing/#merge-lines", 
            "text": "Mac: Shift+Cmd+M  Win: Shift+Ctrl+M  Merges selected lines into a single line. But when there\u2019s no selection, will match context HTML tag.  Click here to see it in the Emmet site.", 
            "title": "Merge Lines"
        }, 
        {
            "location": "/project/ide/editing/#inline-calculator", 
            "text": "Mac: Shift+Cmd+Y  Win: Shift+Ctrl+Y  Evaluates simple math expressions like 2*4 or 10/2 and outputs its result. You can use  \\  operator which is equivalent to round(a/b).  Very useful in CSS where numeric values should be modified frequently.  Click here to see it in the Emmet site.", 
            "title": "Inline Calculator"
        }, 
        {
            "location": "/project/ide/editing/#incrementdecrement-number", 
            "text": "Mac/Win : Alt+Up/Down (inc/dec by 0.1)  Mac/Win : Ctrl+Up/Down (inc/dec by 1)  Mac/Win : Ctrl+Alt+Up/Down (inc/dec by 10)  This action, as name says, increments or decrements the number under the cursor with different steps: 0.1, 1 or 10.  Click here to see it in the Emmet site.", 
            "title": "Increment/Decrement Number"
        }, 
        {
            "location": "/project/ide/editing/#complete-reference", 
            "text": "Emmet has a huge number of shortcuts available. Check out the  Emmet Cheat Sheet", 
            "title": "Complete reference"
        }, 
        {
            "location": "/project/ide/editing/#git-mercurial-svn", 
            "text": "Git, Mercurial and SVN are all preinstalled, so you can  open up a Terminal window  to access them from the command line.  You can also configure your  .codio  file so common commands are accessible from the  Run  menu in the Codio IDE.  Refer to the Boxes documentation  on how to do this.", 
            "title": "Git, Mercurial &amp; SVN"
        }, 
        {
            "location": "/project/ide/editing/#a-few-git-helpers", 
            "text": "We have added a few Git helpers to the  Tools- Git  menu.", 
            "title": "A few Git helpers"
        }, 
        {
            "location": "/project/ide/editing/#using-git-without-remote-repos", 
            "text": "You can use Git commands within your Codio project without needing to ever set up a remote repo. This gives you not only collaborative capabilities, but also comprehensive version control.  However, one of the benefits of a distributed Source Control Management system is that having your code in more than one place means that there is no single point of failure. For this reason, we recommend that you use a third party provider such as GitHub as an external location to back up your data.", 
            "title": "Using Git without remote repos"
        }, 
        {
            "location": "/project/ide/editing/#viewing-github-repos", 
            "text": "GitHub let's you browse around a repo but it's not the same as using an IDE. Codio gives you a great way of viewing any GitHub (or Git) repo. For web apps, you can even run and  preview  within Codio.", 
            "title": "Viewing GitHub repos"
        }, 
        {
            "location": "/project/ide/editing/#offering-linkbutton-in-the-repo-readmemd-file", 
            "text": "This is great for anyone wanting to offer a link into a GitHub README page and then, when clicked, it initiates the creation of a project, importing in from the repo for the user in their Codio account.  The advantage of this approach is that changes you make to your repo will be automatically shown in Codio as it creates a brand new Codio project whenever clicked on. If a project of that name already exists, users can change the name on the project creation page.   You just use the following link format in your GitHub README file (or anywhere else for that matter).  https://codio.com/home/projects/new?importType=git activeTab=3 name=your_codio_project_name importGitUrl=git@github.com:your_github_name/your_repo_name stackVersion=stack_version_id  In some cases, you may want to specify a specific branch. The common usage for this is if you have a demo or GitHub Pages site that you want to load into Codio. In this case you do the following  https://codio.com/home/projects/new?importType=git activeTab=3 name=your_codio_project_name importGitUrl=git@github.com:your_github_name/your_repo_name branch=other_branch stackVersion=stack_version_id", 
            "title": "Offering link/button in the repo readme.md file"
        }, 
        {
            "location": "/project/ide/editing/#finding-the-stack-version-id", 
            "text": "Go to the  Stacks  area and find the appropriate stack you wish to be used with your repo. Select  Use Stack  and from the address bar you will see the stack version ID to add to your link  Example showing the  Empty Stack  stack version ID   You are free to use any way of linking to Codio but we would recommend using the following images", 
            "title": "Finding the stack version ID"
        }, 
        {
            "location": "/project/ide/editing/#how-get-manually-import-a-git-repo-into-codio", 
            "text": "If you are on the GitHub site and looking at a repo, you will see the  Clone URL  link (circled above).  Click to copy the link to the clipboard; if you clone using SSH, you must have added the Codio SSH public key first as  described here  Login to Codio  Click on  New Project  and then the  Click here  for more options  Select  Import  and then from the  Source  drop-down, select  Git  Paste in the Git URL (see below) and add any additional details you require  Press  Create  and Codio will load the repo and then display it", 
            "title": "How get manually import a Git repo into Codio"
        }, 
        {
            "location": "/project/ide/editing/#resources", 
            "text": "If you are new to Git, then here are some resources to get you started.   Git is simpler than you think  (this is worth reading as it explains HOW Git works rather than teaching you usage)  Git reference  Introduction to Git by Scott Chacon   Here is a list of more Git Tutorials in case you want some choice   10 Git Tutorials for beginners", 
            "title": "Resources"
        }, 
        {
            "location": "/project/ide/editing/#ssh-keys", 
            "text": "To transfer your public key to Github or other remotes, please refer to this  section . There is a section on this page that describes setting up keys with Github.  You may also want to refer to  SSH Keys in the Boxes section .", 
            "title": "SSH keys"
        }, 
        {
            "location": "/project/ide/editing/#very-basic-git-tutorial", 
            "text": "This is not supposed to be a proper Git tutorial in any sense. Its purpose is to show anyone who is new to Git or Codio how to use it to get all the basic things done.  For a proper, in-depth overview of Git, refer to the  resources  page.  Please make sure you read this excellent overview if you are new to Git :  http://git-scm.com/book/en/Getting-Started-Git-Basics", 
            "title": "Very basic Git tutorial"
        }, 
        {
            "location": "/project/ide/editing/#github-keys", 
            "text": "If you're using GitHub, it is recommended that you use the SSH remote url rather than HTTPS. In order to do this, however, you should first make sure that your Codio public key is loaded into your GitHub account or repo settings. This whole process is  described here .", 
            "title": "GitHub Keys"
        }, 
        {
            "location": "/project/ide/editing/#experimentation", 
            "text": "The best way to learn Git is to create a really simple project with a few text files in it and then experiment like crazy. You can play around with all the Git commands and sync with GitHub repos to your heart's content without worrying about doing any coding.  Once you have done this for a while, you will feel a lot more comfortable about using Git for your precious code.", 
            "title": "Experimentation"
        }, 
        {
            "location": "/project/ide/editing/#your-projects-starting-point", 
            "text": "", 
            "title": "Your project's starting point"
        }, 
        {
            "location": "/project/ide/editing/#you-created-a-project-by-importing-from-a-git-repo", 
            "text": "If you have code that already exists in a remote repo, say GitHub, then you should create a new project by importing from that repo. That will automatically load the project and set up the correct association with the remote Git repo.  Creating a project is  fully described here .", 
            "title": "You created a project by importing from a Git repo"
        }, 
        {
            "location": "/project/ide/editing/#i-do-not-yet-have-a-remote-repo", 
            "text": "If you have code within Codio and you want to create a brand new GitHub (or other remote) repo, then follow these steps.   Create a new project in Codio or open up an existing one.  Open the terminal (Tools   Terminal) and initialize git by typing \"git init\" and pressing enter  Create a new, empty repo on GitHub or other provider.  Copy the repo url to the clipboard. If you're using GitHub, use the SSH url rather than https and you should make sure that your Codio public key is loaded into your GitHub account or repo settings as  described here     Within the IDE, go to  Tools   Git   Remotes  It is recommended you use  origin  as the name to confirm the normal standards. You do not need to specify a username or password if you are using SSH.  Paste the remote url into the URL field.", 
            "title": "I do not yet have a remote repo"
        }, 
        {
            "location": "/project/ide/editing/#check-the-status-with-git-status", 
            "text": "Whenever you want to see what the Git status of your project is enter  git status . Initially, you will see that there is nothing to report  $ git status\n# On branch master nothing to commit, working directory clean", 
            "title": "Check the status with 'git status'"
        }, 
        {
            "location": "/project/ide/editing/#tracking-files", 
            "text": "Codio uses Git by default and if you import a project from a Git repo, all the existing files will already be 'tracked' (explained in the next section). Any new files you add will need to be tracked using a Git command.  Tracking means that Git knows about them. If you add a new file, Git will not know about it and needs to be explicitly told.   Add a new file ( test.txt ) and add a few random characters to it.  Open any other existing file (I chose humans.txt) and make a small, harmless change to it.  Run  git status  again and you should see   # On branch master `\n# Changes not staged for commit:`\n# (use  git add ...  to update what will be committed)\n# (use  git checkout -- ...  to discard changes in working directory)\n#\n#   modified: humans.txt\n#\n# Untracked files:\n# (use  git add ...  to include in what will be committed)\n#\n#   test.txt no changes added to commit (use  git add  and/or  git commit -a )  This shows you the modified and the new (untracked) files.  To tell GitHub to track the file, you can do one of the following   git add .  which tells Git to track all files in the project that are not yet tracked. This is the quickest and simplest way to track any new files.  git add FILENAME  explicitly tracks a single file", 
            "title": "Tracking files"
        }, 
        {
            "location": "/project/ide/editing/#staged-files", 
            "text": "A staged file is one that is tracked and is ready to commit into the repository. Once you run  git add  you are tracking and staging that file. But if you modify a tracked file, the modifications are not staged. To correctly stage them, you need to rerun  git add .", 
            "title": "Staged Files"
        }, 
        {
            "location": "/project/ide/editing/#committing-your-changes", 
            "text": "Committing means that you want to add your staged, files into the repository. There are two ways to do this...   git commit -m 'commit message'  will take all staged files and commit them to the repo.  git commit -a -m 'commit message'  will do the same but the  -a  switch tells Git to automatically stage any tracked files before committing them. This means that you don't have to use  git add  at all (unless you want to add new, untracked files).   The commit message is important as it allows you to see what general changes were involved in the commit. This can be useful when you want to look back a few days later and no longer remember what was in the commit.  So I entered  git commit -a -m \"added test.txt and modified some stuff\"  and get  [master d3e6bb1] added test.txt and modified some stuff\n2 files changed, 2 insertions(+)\ncreate mode 100644 test.txt`  and if I run a  git status  afterwards, I will see that everything is clean and up-to-date.  # On branch master nothing to commit, working directory clean", 
            "title": "Committing your changes"
        }, 
        {
            "location": "/project/ide/editing/#reverting", 
            "text": "One of the nice things you can do is to revert your code back to an earlier commit.  git revert  is the command for rolling back like this. There are a number of ways to use this, simple uses are   git revert 'commit id'  reverts back to the SHA (uid) you can see when you type  git log  git revert HEAD  will revert back to the last commit, throwing away any uncommitted changes  git revert HEAD~n  for example HEAD~3 will revert to the 4rd last commit.  git revert HEAD^^^  (count of ^ is like ~n) will also revert back to the 4th last commit   There are more advanced usages which you should read up on such as the  -n . Try  looking here .", 
            "title": "Reverting"
        }, 
        {
            "location": "/project/ide/editing/#pushing-to-a-remote-repository", 
            "text": "If you want to send your committed changes to a remote repository, you will use the  git push  command. First, however, you need to make sure that you have a  remote  set up.  If you created your repository by importing from a Git repo, then the remote will have automatically been created.  If you want to create a new remote repository, then you will have already done this as described at the top of this page.  So all you need to do is enter  git push origin master  . Let's dissect this command   origin  is the name of the remote repo. In most cases, this will be called origin, but is not necessarily so.  master  is the name of the branch. When you create a new Codio project, a  master  branch is automatically created and appears in brackets at the top of the file tree next to the project name. Branches are beyond the scope of this topic but they are definitely worth investigating as they are a very powerful feature of Git.   If you now go to GitHub and look at the repository, you will see that your changes are pushed. You can also see the commits you made.", 
            "title": "Pushing to a remote repository"
        }, 
        {
            "location": "/project/ide/editing/#pulling-from-a-remote-repository", 
            "text": "Now let's say that someone else is working remotely on the same code (let's assume they are not using Codio). They will push their code to the GitHub repo, too.  By running  git pull origin master , we pull in changes from the remote repo and Git will automatically merge them.", 
            "title": "Pulling from a remote repository"
        }, 
        {
            "location": "/project/ide/editing/#resolving-conflicts", 
            "text": "When you pull in from the remote, you may get a conflict warning. This will happen if someone else has modified code in a way that Git cannot automatically resolve, usually because you have been editing the same bit of code.  When this happens, you will need to resolve the conflict. If you open up the file, you will see something like this   HEAD:index.html div id= footer contact : email.support@github.com /div \n======= div id= footer \nplease contact us at support@github.com /div   iss53:index.html  You simply need to remove the code block that you want to dispose of. The top block is your code and the bottom comes from the code being merged. If you want to keep your code, you will want to end up with  div id= footer contact : email.support@github.com /div   if you want the merged code to remain, it will be  div id= footer \n    please contact us at support@github.com /div   To minimize conflicts, you should 1. Commit little and often and 2. Pull from the remote master often.", 
            "title": "Resolving Conflicts"
        }, 
        {
            "location": "/project/ide/editing/#branches", 
            "text": "Branches are important and worth mastering at an early stage. When you create a branch, you are creating a new area to code within. You then  merge  another branch, usually the  master  branch, into your new branch. From this point on, you can do whatever you want (add, commit, push etc) without impacting on the  master  branch on any other branch for that matter.  For a full overview on branching, please  read this  The commands you will need to master are   git branch  - creates a new branch  git checkout  - switches to that branch (be careful about doing this without committing the branch you are leaving as any unstaged files will be lost)  git merge from-branch  - merges code from  from-branch  into your current branch   Good practice is to switch over to your master branch and pull in changes from the remote (if you're using one). Then switch back to your working branch and merge in changes. Doing this ensures that conflicts are kept to a minimum.", 
            "title": "Branches"
        }, 
        {
            "location": "/project/ide/editing/#github-and-other-remotes", 
            "text": "Most people will want to push to Github and other remote repos. There are various ways to manage this within Codio.", 
            "title": "GitHub and other remotes"
        }, 
        {
            "location": "/project/ide/editing/#remotes-and-github", 
            "text": "To work with Github, you need to set up your SSH keys properly as  described here .", 
            "title": "Remotes and Github"
        }, 
        {
            "location": "/project/ide/editing/#i-have-a-remote-repo", 
            "text": "If your starting point is a remote repo, then you should create a new project from the Codio dashboard. Create Project is an option above your project listings.  You should select the Git tab and enter in the ssh url. This will then create your Codio project by cloning the remote repo you specify and that remote repo will automatically be logged within that project.", 
            "title": "I have a remote repo"
        }, 
        {
            "location": "/project/ide/editing/#i-do-not-yet-have-a-remote-repo_1", 
            "text": "If you have code within Codio and you want to configure it to synchronize with a remote repo, then you should to the following   Create a new, empty repo on Github or other provider.  Copy the repo url to the clipboard. If you're using Github, then use the SSH url rather than https.  Within the IDE, go to  Tools- Git- Remotes  Complete the dialog as shown below. It is recommended you use  origin  as the name to confirm the normal standards. You do not need to specify a username or password if you are using SSH.    If you prefer, you can use the command line interface to achieve the same thing using  git remote .  Once you have set up your remotes, you can now perform sharing and updating commands (push, pull etc.) from Codio's git command line.  Try pushing your code to the remote using  git push --set-upstream origin master . From now on you can use simply  git push  as the set-upstream command ensure  origin master  is used by default.", 
            "title": "I do not yet have a remote repo"
        }, 
        {
            "location": "/project/ide/editing/#simplified-git-steps", 
            "text": "We will not attempt any sort of tutorial here, but the following steps cover the absolute basics of Git usage with a remote. If you are new to Git, then you should refer to the  resources page .   git status  gives you the status of your current branch  git add .  adds all files, tracked or not, to the staged files  git commit -a -m  stages and commits all files to the snapshot  The first time you push, run the following command to track the new remote  git push --set-upstream origin master  Subsequent pushes can be done with  git push , which pushes all committed changes of the  master  branch to the tracked remote (origin).", 
            "title": "Simplified Git Steps"
        }, 
        {
            "location": "/project/ide/editing/#active-branch", 
            "text": "You can see which branch you are on by looking in the file tree. The top level item is the project name and to the right of this in brackets is the current branch.  You may switch branches using the command line interface or the  Tools   Git   Switch Branch  menu item.", 
            "title": "Active branch"
        }, 
        {
            "location": "/project/ide/editing/#keyboard-shortcuts", 
            "text": "You have full control over the keyboard shortcuts for code editing. You should refer to the  Codio Preferences  section to read more about this.  Codio has its own complete set of defaults, all of which can be overriden. You can use Vim or Emacs key bindings by modifying the  keymap  preference setting. If you do not use  keymap=default , you cannot override keyboard shortcuts.  The sections that contain productivity specific actions and shortcuts are  [Editor]  and  [Emmet] .", 
            "title": "Keyboard shortcuts"
        }, 
        {
            "location": "/project/ide/editing/#multiple-cursors", 
            "text": "You can place multiple cursors anywhere in a file using  Cmd+Click  (Mac) or  Ctrl+Click  (PC/Linux).  Click to place the cursor at the desired location, then press and hold Cmd/Ctrl and begin clicking at new locations. When you release Cmd/Ctrl, you can start typing and the content will be duplicated at all cursor locations.  You can also use  Alt-Click  to place the cursor everywhere inbetween a start and end position.", 
            "title": "Multiple cursors"
        }, 
        {
            "location": "/project/ide/editing/#search-and-replace", 
            "text": "Codio supports local and global search and replace. You can access these feature by hotkey or from the Find menu.  Hotkey shortcuts can be seen in the Find menu. You can override these from  Preferences .", 
            "title": "Search and replace"
        }, 
        {
            "location": "/project/ide/editing/#local", 
            "text": "Search and replace is supported on the currently selected file.  The hotkeys are defined in  Preferences  and the defaults are  ;Find.\n; Type: hotkey\nkey_find = Cmd+F\n\n;Find next.\n; Type: hotkey\nkey_find_next = Cmd+G\n\n;Find previous.\n; Type: hotkey\nkey_find_prev = Shift+Cmd+G\n\n;Replace.\n; Type: hotkey\nkey_replace = Cmd+Alt+F\n\n;Replace all.\n; Type: hotkey\nkey_replace_all = Shift+Cmd+Alt+F", 
            "title": "Local"
        }, 
        {
            "location": "/project/ide/editing/#global", 
            "text": "Global search and replace are available within the  Find  menu under  Find in project  and  Replace in project .  You can search using regular expressions, ignore case and whole word settings. The buttons on the left of the input fields control these settings.   Once the search operation has completed you will see matches listed in a Codio tab. Double click on the highlighted match to open up that file in a new tab.", 
            "title": "Global"
        }, 
        {
            "location": "/project/ide/editing/#pattern-wildcard-matching-globs", 
            "text": "When you are searching, you can specify a search pattern in the  Where  field.  Lets say you have the following project  |-- lib\n|  |-- index.js\n|  |-- hello_world.js\n|-- index.html\n|-- 404.html\n|-- app.js\n`-- gruntfile.coffee  then you can use globs to select files in this way:   All files ending in  .js :  **/*.js .  index.js  hello_world.js  app.js  All files ending in  .html  in the root folder:  *.html  index.html  404.html  All files in  lib :  lib/*.*  index.js  hello_world.js  All files ending in  .html  or  .coffee :  **/*{.html,.coffee}  index.html  404.html  gruntfile.coffee  All files beginning with  index :  **/index*  index.js  index.html", 
            "title": "Pattern &amp; Wildcard Matching (Globs)"
        }, 
        {
            "location": "/project/ide/editing/#basic-rules", 
            "text": "Any character that appears in a pattern, other than the special pattern characters described below, matches itself. The NULL character may not occur in a pattern. A backslash escapes the following character; the escaping backslash is discarded when matching. The special pattern characters must be quoted if they are to be matched literally.  The special pattern characters have the following meanings:    *  Matches any string, including the null string. When the globstar shell option is enabled, and  *  is used in a filename expansion context, two adjacent  * s used as a single pattern will match all files and zero or more directories and subdirectories. If followed by a  / , two adjacent  * s will match only directories and subdirectories.    ?  Matches any single character.    [\u2026]  Matches any one of the enclosed characters. A pair of characters separated by a hyphen denotes a range expression; any character that sorts between those two characters, inclusive, using the current locale's collating sequence and character set, is matched. If the first character following the  [  is a  !  or a  ^  then any character not enclosed is matched. A  -  may be matched by including it as the first or last character in the set. A  ]  may be matched by including it as the first character in the set.    A character class matches any character belonging to that class. The word character class matches letters, digits, and the character  _ .  Within  [  and  ] , an equivalence class can be specified using the syntax  [=c=] , which matches all characters with the same collation weight (as defined by the current locale) as the character c.  Within  [  and  ] , the syntax [.symbol.] matches the collating symbol symbol.    ?(pattern-list)  Matches zero or one occurrence of the given patterns.    *(pattern-list)  Matches zero or more occurrences of the given patterns.    +(pattern-list)  Matches one or more occurrences of the given patterns.    @(pattern-list)  Matches one of the given patterns.    !(pattern-list)  Matches anything except one of the given patterns.", 
            "title": "Basic Rules"
        }, 
        {
            "location": "/project/ide/editing/#color-preview-and-picker", 
            "text": "", 
            "title": "Color preview and picker"
        }, 
        {
            "location": "/project/ide/editing/#regular-colors", 
            "text": "If you are in any file, of any type, that contains something that looks like an RGB hex value, rgb(100, 100, 100), hsla(0,100%,50%,0.2) etc., just hover over the code and a popup will appear that shows the color preview.", 
            "title": "Regular Colors"
        }, 
        {
            "location": "/project/ide/editing/#gradients", 
            "text": "This works for gradients as well.", 
            "title": "Gradients"
        }, 
        {
            "location": "/project/ide/editing/#color-picker", 
            "text": "If you move your mouse into the color preview area and then click, a color picker dialog will appear that allows you to choose a new color. You can drag things around as well as edit the values directly.", 
            "title": "Color Picker"
        }, 
        {
            "location": "/project/ide/editing/#beautify-javascript", 
            "text": "You can format your Javascript code by pressing the keyboard shortcut as defined in the  User Settings . By default, it is   key_format_code  =  Cmd+Alt+F  (for a Mac)  key_format_code  =  Ctrl+Alt+F  (for anything else)   It will indent your code correctly and manage spaces and other cool things.  For example, if you start out with this  if ('this_is'==/an_example/){of_beautifer();}else{var a=b?(c%d):e[f];}  Then after beautifying, you will end up with this  if ('this_is' == /an_example/) {\n    of_beautifer();\n} else {\n    var a = b ? (c % d) : e[f];\n}", 
            "title": "Beautify javascript"
        }, 
        {
            "location": "/project/ide/editing/#settings", 
            "text": "If you look within the [code-beautifier] section of the Codio Preferences, you will see the various beautification settings available.  Don't forget, you can force these in  Project preferences  if you want to have consistently beautified code regardless of who edits your code.", 
            "title": "Settings"
        }, 
        {
            "location": "/project/ide/editing/#force-language-highlighting", 
            "text": "Codio will automatically select the syntax highlighting rules based on the file extension.  If you open a file whose extension is not known then you will not get any highlighting of the code. You can tell Codio which language formatting to use by clicking on the name in the status bar of the code window.   You can override the language highlighting by clicking as shown (circled) in the above screenshot.", 
            "title": "Force language highlighting"
        }, 
        {
            "location": "/project/ide/features/", 
            "text": "Our IDE features also include autocomplete, code-folding, key-bindings, line-numbering, multiple cursors, detailed control over visual themes and preferences, key bindings, standard and regex search and replace.\n\n\nAdditional advanced features include multiple code panels and syntax highlighting support for all programming languages.\n\n\nDebugging\n\uf0c1\n\n\nCodio offers an integrated, language specific debugger. Codio currently supports the following languages.\n\n\n\n\nJava\n\n\nPython 2\n\n\nPython 3\n\n\nNodeJS\n\n\nC and C++\n\n\n\n\nIf you would like support for any languages that do not appear in the list, please \ncontact us\n and we can look into adding it.\n\n\nSample project\n\uf0c1\n\n\nIf you created the account for your Codio Trial account then you will find \nDemo Codio Debugger\n in your My Projects list. You will find instructions in the README.md file when you open the project.\n\n\nIf you cannot see it then \nclick here\n to create it now. Press the \nUse Pack\n button to install.\n\n\nVideo overview\n\uf0c1\n\n\nFor anyone who has not used a debugger before, here is a useful video tutorial.\n\n\n\n\n\nPrerequisites\n\uf0c1\n\n\nIf you install Java, C or NodeJS from a stack, then the GBD components that support debugging will be automatically installed. However, if you have installed these languages manually then when you run the debugger, you will get a warning telling you to install the GDB component. A link will be provided to the Install Software feature that allows you to install it with a single click.\n\n\n\n\nCreating and managing debug targets\n\uf0c1\n\n\nYou should first configure a debug target. Having multiple debug targets is useful for the following reasons.\n\n\n\n\nIt allows you to quickly debug the same application with different command line arguments, allowing you to test different scenarios.\n\n\nYou can debug more than one application.\n\n\n\n\nYou manage debug targets from the following locations\n\n\n\n\nthe rightmost toolbar menu item, select the \nConfigure...\n option\n\n\nTools-\nDebugger Settings\n\n\n\n\nThis will bring up the list of any debug targets you may have previously configured.\n\n\n\n\nTo create a new target, press the Create button. You can then configure your target. You can also edit any existing debug target. The following parameters can be configured.\n\n\n\n\nThe programming language\n\n\nA friendly name to give the configuration\n\n\nThe command to execute to your program along with any command line parameters you may wish to include\n\n\nAny command to execute before debugging starts. This is usually a compile process.\n\n\nYou can also reference the active file in use using {{filepath}} token which inserts the path and full file name /path/to/file.ext\n\n\n\n\n\n\nWhen creating a new target, you are also shown the debugger port and instruction but these can typically be ignored.\n\n\nSingle file confgurations\n\uf0c1\n\n\nIf you are using C, C++ or Java and debugging a simple single code file project (common in early programmng courses) then you should choose Single C File, Single C++ file or Single Java file Debugger Type. This frees you from having to worry about the detailed compile and run configuration.\n\n\nLanguage specific compilation commands\n\uf0c1\n\n\nIf you are not using a single file configuration then you will need to provide the following information\n\n\n\n\nBefore Launch\n will typically be a compilation or build command\n\n\nLaunch\n will be the command to launch the program\n\n\n\n\nIn java you are asked for a port number, which should always be set to \n5105\n.\n\n\nStarting a debugging session\n\uf0c1\n\n\nThere are two ways you can launch an application in debug mode.\n\n\n\n\nfrom the rightmost toolbar menu you can select the debug target from the dropdown menu or just press the button to re-run the last executed debug target.\n\n\nfrom the debug targets list you can press the \nDebug\n button.\n\n\n\n\n\n\nAt this point, the debugger will fire up and you will see a screen similar to the one show below.\n\n\n\n\nYou may need to wait a second or two for the debugger to load. It will automatically stop on the first line of code, regardless of whether there is a breakpoint set or not.\n\n\nBreakpoints\n\uf0c1\n\n\nA breakpoint is a line of code where the debugger will pause code execution if in debug mode. To set a breakpoint you click in the gutter next to the line number. You can remove a breakpoint in the same way.\n\n\nWhen a breakpoint is set, a red dot will appear on the line.\n\n\nControlling the debugger\n\uf0c1\n\n\nOnce the debugger stops code execution you can control execution using the buttons at the top of the debug panel.\n\n\n\n\n\n\nResume\n - this tells the debugger to carry on execution without stopping until another breakpoint is encountered.\n\n\nStop\n - execution will stop and the debug window will be closed.\n\n\nStep over\n - the debugger will execute the next line of code and then stop. If the line of code about to be executed is a function, then it will execute the contents of that function but will not stop within it unless the function contains a breakpoint.\n\n\nStep into\n - the debugger will execute the next line of code and then stop. If the line of code about to be executed is a function, then it will stop on the first line within that function.\n\n\nStep out\n - the debugger will exit the current function and stop on the next line of the calling function. If the current line is the main entry function of the application then execution will cease but and the debugger will restart automatically.\n\n\n\n\nOther features\n\uf0c1\n\n\nThe debug panel also contains other useful features.\n\n\n\n\nCall stack\n - this shows the parent functions relative to the function that contains the currently executing line of code.\n\n\nLocal variables\n - all local variables of the current function and their current values are automatically displayed.\n\n\nWatches\n - this allows you to watch a specific variable, and for some languages also expressions,\n\n\nBreakpoints\n - this lists all the breakpoints currently set in any of your code files. You can disable them by unchecking the boxes.\n\n\nConsole\n - the console has two main functions; it displays status messages from the system in bold and your code can output data there by writing output to the console  (for example a \nprint('message')\n statement in Python).\n\n\n\n\nSupport for the standard input when debugging\n\uf0c1\n\n\nSupport for stdin is available for:\n\n\n\n\nC/C++\n\n\nNode.js\n\n\nGDB\n\n\n\n\nNode example:\n\n\nfunction testStdIn() {\n    console.log(\nWhat is your name?\n);\n    process.stdin.once('data', (chunk) =\n {\n        let name = chunk.toString();\n        console.log(\nHello, \n + name + \n!\n);\n    });\n}\n\ntestStdIn()\n\n\n\n\nLaunching the debugger from Codio content\n\uf0c1\n\n\nIt is also possible to launch any debugger configuration from a page. Please \nclick here\n for details.\n\n\nJUnit testing framework\n\uf0c1\n\n\nCodio provides a simple way to execute \nJUnit\n tests for Java in your project.\n\n\nTo use JUnit, your project requires Java and so should\n\n\n\n\neither use the \nJava 8\n stack\n\n\nor you should have manually installed Java in your box\n\n\nor install from \nTools\nInstall Software\n. See \nInstalling Software Packages\n for more information\n\n\n\n\nConfiguration\n\uf0c1\n\n\nOpen the JUnit dialog \nTools-\nJUnit\n or use the \nShift+Alt+J\n hotkey. Then configure the\n\n\n\n\nSource path\n is the location of the student source code\n\n\nTest source path\n is the location of the test cases source folder\n\n\nLibrary path\n is the path to any libraries used by the student application\n\n\nWorking directory\n is the path where the compiled student code should execute\n\n\n\n\nAll paths are relative to the root of the workspace folder.\n\n\n\n\nIndividual test cases can be added\n\n\n\n\nby specifying the paths to a file with JUnit tests in the add test case fields\n\n\nor by dragging and dropping the file into the JUnit tab.\n\n\n\n\nTimeout settings\n\uf0c1\n\n\nThe default timeout for JUnit execution is 30 seconds but you can change this as required in user or project preferences. You can also change the default hotkey to access JUnit if required as well\n\n\n\nTo ensure that the same settings apply to students may use the project within a class, we would recommend you change this as a \nproject preference\n\n\nExecution\n\uf0c1\n\n\nYou can Execute the tests from the \nJUnits Execution\n tab. Once completed, the results will be listed below.\n\n\n\n\nIf you publish your project as a unit to a class, the JUnit configurations you set up will be included in the Unit for students.\n\n\nAutocomplete\n\uf0c1\n\n\nAutocomplete is supported within HTML, CSS and Javascript files. Just type away and we will automatically show you matches for what you are typing.\n\n\nIf you don't like your auto-complete auto-completing, just set the preference \nautomatic_completions = false\n.\n\n\nOther languages are supported with \nlanguage server protocol\n although in such files, autocomplete is not automatically involved. See \nlanguage server protocol\n for more information.\n\n\nHTML Tags\n\uf0c1\n\n\nAuto complete is context sensitive, so you will only be shown Tags that are relevant to your location within the HTML file.\n\n\nFor example, if you are not within \nbody\n/body\n, you will see a much reduced set of options in the auto complete popup. However, place your cursor inside the \nbody\n/body\n tags and you will see the full list of standard HTML tags.\n\n\nHTML Attribtues\n\uf0c1\n\n\nIf you have entered \na\n, then invoke auto complete, you are presented with a list of relevant attributes for the \na\n tag.\n\n\nTern \n Javascript\n\uf0c1\n\n\nWe support intelligent autocomplete using TernJS. Tern also support explicit directives in the \n.tern-project\n file you can place in the root of your project.\n\n\nThis file looks like this\n\n\n{\n  \nlibs\n: [\n    \nbrowser\n,\n    \njquery\n\n  ],\n  \nloadEagerly\n: [\n    \nimportantfile.js\n\n  ],\n  \nplugins\n: {\n    \nrequirejs\n: {\n      \nbaseURL\n: \n./\n,\n      \npaths\n: {}\n    }\n  }\n}\n\n\n\n\nYou should note that Codio currently only supports autocomplete for the currently opened file as well as items specified in the \nlibs\n section of the \n.tern-project\n file.\n\n\nPlease refer to the \nTern documentation\n for full details on how to configure this file.\n\n\nCSS\n\uf0c1\n\n\nUse \nctrl+space\n within your CSS to invoke auto complete.\n\n\nCommand bar\n\uf0c1\n\n\nThe Command Bar allows you to access almost all of the Codio actions from a searchable list. It is also a great way of looking up keyboard shortcuts without having to explore the menu.\n\n\nYou invoke the Command Bar with\n\n\n\n\nTools \n Command Bar\n\n\nCmd+Shift+P\n (Mac) / \nCtrl+Shift+P\n (PC/Linux)\n\n\n\n\nYou will then see the following popup dialog.\n\n\n\n\nNow just start typing and the list will refine as you type.\n\n\nForking a project\n\uf0c1\n\n\nYou can fork any 3rd party public project into your account going to \nProject\nFork\n. If you are looking at a forked project, then it will look like this.\n\n\n\n\nIf you are signed into Codio, forking a project will create the fork in your account.\n\n\nIf the project owner has allowed box cloning you will also be able to clone the box as well as the project.\n\n\n\n\nCode beautification\n\uf0c1\n\n\nYou can format your code by pressing the keyboard shortcut as defined in the \nUser Preferences\n. By default, it is\n\n\n\n\nkey_format_code\n = \nCmd+Shift+B\n (for a Mac)\n\n\nkey_format_code\n = \nCtrl+Shift+B\n (for anything else)\n\n\n\n\nIt will indent your code correctly and manage spaces and other cool things.\n\n\nFor example, if you start out with this\n\n\nif ('this_is'==/an_example/){of_beautifer();}else{var a=b?(c%d):e[f];}\n\n\n\n\nThen after beautifying, you will end up with this\n\n\nif ('this_is' == /an_example/) {\n    of_beautifer();\n} else {\n    var a = b ? (c % d) : e[f];\n}\n\n\n\n\nSettings\n\uf0c1\n\n\nIf you look within the \n[code-beautifier]\n section of the Codio Preferences, you will see the various beautification settings available.\n\n\nDon't forget, you can force these at the \nProject level preferences\n if you want to have consistently beautified code regardless of who edits your code.\n\n\nPreview\n\uf0c1\n\n\nIt is important to understand the difference between Static and Dynamic content when using the Preview menu options. Codio provides a configurable menu item for Dynamic/Server Side content (rightmost Codio menu) as well as Static content.\n\n\nStatic content\n\uf0c1\n\n\nYou can use \nPreview static\n options on Static content only (HTML, CSS, JS and text).\nYou can also preview static content on your mobile device easily using \nProject\nQR Code for Preview URL\n to generate a QR code you can scan with a QR Reader on your device.\n\n\nDynamic content\n\uf0c1\n\n\nTo access files or services that are executed on the server (PHP, Ruby, Node etc.), you need to use the right-most menu option. You can access your server side application by:\n\n\n\n\nword1-word2-port.codio.io which will access your box over port 80, which is useful if your corporate firewall blocks ports other than 80 and 443.\n\n\n\n\nword1-word2\n is an automatically generated subdomain name for your Codio Box. You can configure your application to listen on ports defining the port in the URL, but please be aware than Codio supported a restricted range of ports. Please refer to \nthis section\n for more details.\n\n\nRead on for information on how to configure your Static and Dynamic preview menus.\n\n\nInstructions\n\uf0c1\n\n\nThe Preview button lets you preview one or more web pages with a simple button press. Codio creates four default entries in the Preview menu automatically.\n\n\n\n\n\n\nProject Index\n - this is the default file to run for your project. It can be set by right-clicking a file in the file tree. This option should only be used to preview static content (typically \n.html\n files). For PHP, Ruby etc. you should use the \nBox URL\n option.\n\n\nCurrent File\n - whichever code file currently has focus. This option should only be used to preview static content (typically \n.html\n files). For PHP, Ruby etc. you should use the \nBox URL\n option.\n\n\nBox URL\n - use this option for previewing PHP, Ruby or other server side languages over http. \nClick here\n for more information on configuring port access for http.\n\n\nBox URL SSL\n - use this option for previewing PHP, Ruby or other server side languages over SSL. \nClick here\n for more information on configuring port access for https.\n\n\n\n\nIf you right-click a file in the file tree or the Tab, you can also select \nPreview Static\n.\n\n\n\n\nPreview in a Codio tab or new browser tab\n\uf0c1\n\n\nIn the Preview dropdown menu, you can select one of the following ways to preview\n\n\n\n\nInside Codio\n : displays the preview in a Codio tab; note that if you are accessing via any port other than Port 80 (the Box URL and Box URL SSL defaults in the screenshot at the top) then this option will only work if you are using HTTPS as Codio itself runs over HTTPS and the browser will not allow mixed HTTP/HTTPS. \nSee here\n for more details on using HTTPS.\n\n\nNew browser tab\n : it will open up a new browser tab or window.\n\n\n\n\nIf you are previewing a private project containing Static content and you have not enabled \nAllow Private Static Preview\n option (available only via \nProject\nSettings\n) you will be asked to authenticate with your username and password. If you signed up using GitHub/BitBucket/G+ method, a random password is created for your account. Go to \nCodio\nAccount\n and on the Account tab you can set up a password of your own choosing.\n\n\nIf though you have enabled this option, then you can preview static content without authentication. A new backend URL will be generated for this purpose that you can then share with anyone else you wish to be able to preview your project. You are also able to regenerate this URL at any time and access using the old URL will no longer function.\n\n\nThis only applies to code being previewed over the standard ports 80 and 443. Previewing via any other port will have no authentication, because the code is being served from your application server, which we have no control over but you can add your own authentication.\n\n\nSee \nApache Password Basic Authentication\n and \nHTTP Authentication with PHP\n for some examples.\n\n\nModifying the Preview menu\n\uf0c1\n\n\nYou are free to customize the menu in either of the following ways\n\n\n\n\nFrom the \nPreview\n or \nRun\n drop down menus (the 2nd and 3rd right most Codio menu items), select \nConfigure...\n\n\nIf it exists already, open the \n.codio\n file that lives in the root of your project.\n\n\n\n\nFor details about the various tokens that can be inserted, please refer to \nCustomizing the Run menu\n.\n\n\n{{domain3000}}\n is the most important token for the \nPreview menu\n. It is replaced by the public url required to access your project over port 80, which is useful if your corporate firewall blocks ports other than 80 and 443.\n\n{{domain}}\n can also be used in the \nPreview\n menu. In most cases you will want to add the Port number (default 3000) to your service. e.g \n\"Box URL\": \"http://{{domain3000}}/\",\n\n\n{\n// Configure your Run and Preview buttons here.\n\n// Run button configuration\n  \ncommands\n: {\n        \nNode version\n: \nnode --version\n\n  },\n\n// Preview button configuration\n  \npreview\n: {\n        \nProject Index (static)\n: \nhttps://{{domain}}/{{index}}\n,\n        \nCurrent File (static)\n: \nhttps://{{domain}}/{{filepath}}\n,\n        \nBox URL\n: \nhttp://{{domain3000}}/\n,\n        \nBox URL SSL\n: \nhttps://{{domain3000}}/\n\n  }\n}\n\n\n\n\nNote that static content is served over Port 80. To access dynamic content you may need to specify the appropriate Port.\n\n\nIf you cannot access your project over SSL then this could be the way your application is configured.\n\n\nThe full range of Codio \n{{tokens}}\n is explained in \nthis section\n.\n\n\nInsecure Content with In-Tab preview and front-end code (#mixed-content)\n\uf0c1\n\n\nCodio runs over a secure connection using HTTPS, and therefore so does the inline preview. If your code references an external resource (script, font, image, etc.). For example:\n\n\nscript src=\nhttp://code.angularjs.org/1.1.5/angular.js\n\n\n\n\n\nYou will get a browser error indicating that there is some form of insecure or mixed content because you are running in a mixed HTTP/HTTPS mode. This is a restriction of the browser, and cannot be modified easily, or in some browsers, it cannot be modified at all. It is intended to protect you from insecure content.\n\n\nThere are 3 ways to avoid this:\n\n\n\n\nModify your external references to use HTTPS.\n\n\nExpand the inline preview into a new browser tab (icon is in the small floating toolbar in the top right of the preview tab) and then modify the url from \nhttps://codio.io/xxxx\n to \nhttp://codio.io/xxxx\n.\n\n\nModify your references to use the 'current protocol' by including '//' without http or https, so \nscript src=\"//code.angularjs.org/1.1.5/angular.js\"\n.\n\n\nIf none of the above work, then download the external file, and include and reference it within the Codio project itself.\n\n\n\n\nQuick open\n\uf0c1\n\n\nQuick open (fast open) is a great way of opening files without the need to access the file tree. Invoke Quick Open from\n\n\n\n\nFile \n Open File\n from the menu\n\n\nCmd+O\n (Mac) / \nCtrl+O\n (PC/Linux)\n\n\n\n\n... and the quick open dialog will appear.\n\n\n\n\nYou now start typing the name of a file and as you type, the list will narrow down. You can then select the file you want using the mouse or use the keyboard, pressing Enter on the required file.\n\n\nReal time code collaboration\n\uf0c1\n\n\nIf you give other Codio users permissions to access to your project, then Codio allows more than one user to view and edit files simultaneously.\n\n\nRather like Google Docs, you will be able to see other people editing the file in real time.\n\n\nBecause of this collaboration feature, your files are saved in real time and there is no need to press the save button. It just happens automatically.\n\n\nYou can change full access to your project from the \nProject-\nPermissions\n menu, but this is risky and we advise strongly against this unless you are sure only one person will be editing the project at a time.\n\n\nThe better approach is to use Git. If you are familiar with Git then each person has their own project but they all use Git to synchronize the content with a remote repository hosted on a platform like GitHub or BitBucket.\n\n\nSaving files\n\uf0c1\n\n\nThere is generally no need to save your files as content is saved automatically. You can still save manually using the \nCtrl+S|Cmd+S\n keyboard shortcut, which most of you should be familiar with, but you don\u2019t need to.\nIf you make mistakes, then use the regular undo (\nCtrl+Z\n).\n\n\nVersion Control is the best possible way of managing restores and this is comprehensively supported thanks to our \nGit integration\n.\n\n\nSharing and embedding\n\uf0c1\n\n\nTo share a project or link to a project from a web page, go to the \nProject \n Share\n menu item.\n\n\n\n\nRetaining layout status \n automatically starting tutorials\n\uf0c1\n\n\nYou'll notice the three options at the top of the dialog. When you embed or link to a Codio project you have three ways of the IDE rendering it\n\n\n\n\nProject URL\n : use this URL to display the project with whatever panel and open file configuration happens to be active at the time. This can change all the time depending on what the user happens to have active at any given time.\n\n\nGuide URL\n: use this URL to display your project with your \nGuide\n automatically starting.\n\n\nWith Layout\n : use this URL if you want to always use the precise panel and file configuration that you currently have open. This is the right option if you want to embed it in a blog post or page and a precise configuration should be retained no matter what the project owner is doing with the layout at any given time.\n\n\n\n\nYou can use either of these basic URLs by copying and pasting.\n\n\nBut if you want to use one of our preconfigured button options, read on.\n\n\nMarkdown or HTML\n\uf0c1\n\n\nYou can choose between Markdown or HTML by clicking on the HTML or Markdown label. Markdown is great for your GitHub README.md pages.\n\n\nOnce you have made your selection you can copy and paste from one of the button options below.\n\n\nSuggested Buttons\n\uf0c1\n\n\nYou will notice that there are two suggested buttons available for Project URL and With Layout modes.\n\n\n\n\nDemo\n : the suggested button for any situation where you want to link to a demo project. A great example would be on your GitHub page, where you want to be able to show a demo of your code as well as allowing the user to browse around the code itself.\n\n\nShow me the code\n : the suggested button for any situation where you want to link a blog, tutorial or some documentation to a real code sample.", 
            "title": "Advanced IDE Features"
        }, 
        {
            "location": "/project/ide/features/#debugging", 
            "text": "Codio offers an integrated, language specific debugger. Codio currently supports the following languages.   Java  Python 2  Python 3  NodeJS  C and C++   If you would like support for any languages that do not appear in the list, please  contact us  and we can look into adding it.", 
            "title": "Debugging"
        }, 
        {
            "location": "/project/ide/features/#sample-project", 
            "text": "If you created the account for your Codio Trial account then you will find  Demo Codio Debugger  in your My Projects list. You will find instructions in the README.md file when you open the project.  If you cannot see it then  click here  to create it now. Press the  Use Pack  button to install.", 
            "title": "Sample project"
        }, 
        {
            "location": "/project/ide/features/#video-overview", 
            "text": "For anyone who has not used a debugger before, here is a useful video tutorial.", 
            "title": "Video overview"
        }, 
        {
            "location": "/project/ide/features/#prerequisites", 
            "text": "If you install Java, C or NodeJS from a stack, then the GBD components that support debugging will be automatically installed. However, if you have installed these languages manually then when you run the debugger, you will get a warning telling you to install the GDB component. A link will be provided to the Install Software feature that allows you to install it with a single click.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/project/ide/features/#creating-and-managing-debug-targets", 
            "text": "You should first configure a debug target. Having multiple debug targets is useful for the following reasons.   It allows you to quickly debug the same application with different command line arguments, allowing you to test different scenarios.  You can debug more than one application.   You manage debug targets from the following locations   the rightmost toolbar menu item, select the  Configure...  option  Tools- Debugger Settings   This will bring up the list of any debug targets you may have previously configured.   To create a new target, press the Create button. You can then configure your target. You can also edit any existing debug target. The following parameters can be configured.   The programming language  A friendly name to give the configuration  The command to execute to your program along with any command line parameters you may wish to include  Any command to execute before debugging starts. This is usually a compile process.  You can also reference the active file in use using {{filepath}} token which inserts the path and full file name /path/to/file.ext    When creating a new target, you are also shown the debugger port and instruction but these can typically be ignored.", 
            "title": "Creating and managing debug targets"
        }, 
        {
            "location": "/project/ide/features/#single-file-confgurations", 
            "text": "If you are using C, C++ or Java and debugging a simple single code file project (common in early programmng courses) then you should choose Single C File, Single C++ file or Single Java file Debugger Type. This frees you from having to worry about the detailed compile and run configuration.", 
            "title": "Single file confgurations"
        }, 
        {
            "location": "/project/ide/features/#language-specific-compilation-commands", 
            "text": "If you are not using a single file configuration then you will need to provide the following information   Before Launch  will typically be a compilation or build command  Launch  will be the command to launch the program   In java you are asked for a port number, which should always be set to  5105 .", 
            "title": "Language specific compilation commands"
        }, 
        {
            "location": "/project/ide/features/#starting-a-debugging-session", 
            "text": "There are two ways you can launch an application in debug mode.   from the rightmost toolbar menu you can select the debug target from the dropdown menu or just press the button to re-run the last executed debug target.  from the debug targets list you can press the  Debug  button.    At this point, the debugger will fire up and you will see a screen similar to the one show below.   You may need to wait a second or two for the debugger to load. It will automatically stop on the first line of code, regardless of whether there is a breakpoint set or not.", 
            "title": "Starting a debugging session"
        }, 
        {
            "location": "/project/ide/features/#breakpoints", 
            "text": "A breakpoint is a line of code where the debugger will pause code execution if in debug mode. To set a breakpoint you click in the gutter next to the line number. You can remove a breakpoint in the same way.  When a breakpoint is set, a red dot will appear on the line.", 
            "title": "Breakpoints"
        }, 
        {
            "location": "/project/ide/features/#controlling-the-debugger", 
            "text": "Once the debugger stops code execution you can control execution using the buttons at the top of the debug panel.    Resume  - this tells the debugger to carry on execution without stopping until another breakpoint is encountered.  Stop  - execution will stop and the debug window will be closed.  Step over  - the debugger will execute the next line of code and then stop. If the line of code about to be executed is a function, then it will execute the contents of that function but will not stop within it unless the function contains a breakpoint.  Step into  - the debugger will execute the next line of code and then stop. If the line of code about to be executed is a function, then it will stop on the first line within that function.  Step out  - the debugger will exit the current function and stop on the next line of the calling function. If the current line is the main entry function of the application then execution will cease but and the debugger will restart automatically.", 
            "title": "Controlling the debugger"
        }, 
        {
            "location": "/project/ide/features/#other-features", 
            "text": "The debug panel also contains other useful features.   Call stack  - this shows the parent functions relative to the function that contains the currently executing line of code.  Local variables  - all local variables of the current function and their current values are automatically displayed.  Watches  - this allows you to watch a specific variable, and for some languages also expressions,  Breakpoints  - this lists all the breakpoints currently set in any of your code files. You can disable them by unchecking the boxes.  Console  - the console has two main functions; it displays status messages from the system in bold and your code can output data there by writing output to the console  (for example a  print('message')  statement in Python).", 
            "title": "Other features"
        }, 
        {
            "location": "/project/ide/features/#support-for-the-standard-input-when-debugging", 
            "text": "Support for stdin is available for:   C/C++  Node.js  GDB   Node example:  function testStdIn() {\n    console.log( What is your name? );\n    process.stdin.once('data', (chunk) =  {\n        let name = chunk.toString();\n        console.log( Hello,   + name +  ! );\n    });\n}\n\ntestStdIn()", 
            "title": "Support for the standard input when debugging"
        }, 
        {
            "location": "/project/ide/features/#launching-the-debugger-from-codio-content", 
            "text": "It is also possible to launch any debugger configuration from a page. Please  click here  for details.", 
            "title": "Launching the debugger from Codio content"
        }, 
        {
            "location": "/project/ide/features/#junit-testing-framework", 
            "text": "Codio provides a simple way to execute  JUnit  tests for Java in your project.  To use JUnit, your project requires Java and so should   either use the  Java 8  stack  or you should have manually installed Java in your box  or install from  Tools Install Software . See  Installing Software Packages  for more information", 
            "title": "JUnit testing framework"
        }, 
        {
            "location": "/project/ide/features/#configuration", 
            "text": "Open the JUnit dialog  Tools- JUnit  or use the  Shift+Alt+J  hotkey. Then configure the   Source path  is the location of the student source code  Test source path  is the location of the test cases source folder  Library path  is the path to any libraries used by the student application  Working directory  is the path where the compiled student code should execute   All paths are relative to the root of the workspace folder.   Individual test cases can be added   by specifying the paths to a file with JUnit tests in the add test case fields  or by dragging and dropping the file into the JUnit tab.", 
            "title": "Configuration"
        }, 
        {
            "location": "/project/ide/features/#timeout-settings", 
            "text": "The default timeout for JUnit execution is 30 seconds but you can change this as required in user or project preferences. You can also change the default hotkey to access JUnit if required as well  \nTo ensure that the same settings apply to students may use the project within a class, we would recommend you change this as a  project preference", 
            "title": "Timeout settings"
        }, 
        {
            "location": "/project/ide/features/#execution", 
            "text": "You can Execute the tests from the  JUnits Execution  tab. Once completed, the results will be listed below.   If you publish your project as a unit to a class, the JUnit configurations you set up will be included in the Unit for students.", 
            "title": "Execution"
        }, 
        {
            "location": "/project/ide/features/#autocomplete", 
            "text": "Autocomplete is supported within HTML, CSS and Javascript files. Just type away and we will automatically show you matches for what you are typing.  If you don't like your auto-complete auto-completing, just set the preference  automatic_completions = false .  Other languages are supported with  language server protocol  although in such files, autocomplete is not automatically involved. See  language server protocol  for more information.", 
            "title": "Autocomplete"
        }, 
        {
            "location": "/project/ide/features/#html-tags", 
            "text": "Auto complete is context sensitive, so you will only be shown Tags that are relevant to your location within the HTML file.  For example, if you are not within  body /body , you will see a much reduced set of options in the auto complete popup. However, place your cursor inside the  body /body  tags and you will see the full list of standard HTML tags.", 
            "title": "HTML Tags"
        }, 
        {
            "location": "/project/ide/features/#html-attribtues", 
            "text": "If you have entered  a , then invoke auto complete, you are presented with a list of relevant attributes for the  a  tag.", 
            "title": "HTML Attribtues"
        }, 
        {
            "location": "/project/ide/features/#tern-javascript", 
            "text": "We support intelligent autocomplete using TernJS. Tern also support explicit directives in the  .tern-project  file you can place in the root of your project.  This file looks like this  {\n   libs : [\n     browser ,\n     jquery \n  ],\n   loadEagerly : [\n     importantfile.js \n  ],\n   plugins : {\n     requirejs : {\n       baseURL :  ./ ,\n       paths : {}\n    }\n  }\n}  You should note that Codio currently only supports autocomplete for the currently opened file as well as items specified in the  libs  section of the  .tern-project  file.  Please refer to the  Tern documentation  for full details on how to configure this file.", 
            "title": "Tern &amp; Javascript"
        }, 
        {
            "location": "/project/ide/features/#css", 
            "text": "Use  ctrl+space  within your CSS to invoke auto complete.", 
            "title": "CSS"
        }, 
        {
            "location": "/project/ide/features/#command-bar", 
            "text": "The Command Bar allows you to access almost all of the Codio actions from a searchable list. It is also a great way of looking up keyboard shortcuts without having to explore the menu.  You invoke the Command Bar with   Tools   Command Bar  Cmd+Shift+P  (Mac) /  Ctrl+Shift+P  (PC/Linux)   You will then see the following popup dialog.   Now just start typing and the list will refine as you type.", 
            "title": "Command bar"
        }, 
        {
            "location": "/project/ide/features/#forking-a-project", 
            "text": "You can fork any 3rd party public project into your account going to  Project Fork . If you are looking at a forked project, then it will look like this.   If you are signed into Codio, forking a project will create the fork in your account.  If the project owner has allowed box cloning you will also be able to clone the box as well as the project.", 
            "title": "Forking a project"
        }, 
        {
            "location": "/project/ide/features/#code-beautification", 
            "text": "You can format your code by pressing the keyboard shortcut as defined in the  User Preferences . By default, it is   key_format_code  =  Cmd+Shift+B  (for a Mac)  key_format_code  =  Ctrl+Shift+B  (for anything else)   It will indent your code correctly and manage spaces and other cool things.  For example, if you start out with this  if ('this_is'==/an_example/){of_beautifer();}else{var a=b?(c%d):e[f];}  Then after beautifying, you will end up with this  if ('this_is' == /an_example/) {\n    of_beautifer();\n} else {\n    var a = b ? (c % d) : e[f];\n}", 
            "title": "Code beautification"
        }, 
        {
            "location": "/project/ide/features/#settings", 
            "text": "If you look within the  [code-beautifier]  section of the Codio Preferences, you will see the various beautification settings available.  Don't forget, you can force these at the  Project level preferences  if you want to have consistently beautified code regardless of who edits your code.", 
            "title": "Settings"
        }, 
        {
            "location": "/project/ide/features/#preview", 
            "text": "It is important to understand the difference between Static and Dynamic content when using the Preview menu options. Codio provides a configurable menu item for Dynamic/Server Side content (rightmost Codio menu) as well as Static content.", 
            "title": "Preview"
        }, 
        {
            "location": "/project/ide/features/#static-content", 
            "text": "You can use  Preview static  options on Static content only (HTML, CSS, JS and text).\nYou can also preview static content on your mobile device easily using  Project QR Code for Preview URL  to generate a QR code you can scan with a QR Reader on your device.", 
            "title": "Static content"
        }, 
        {
            "location": "/project/ide/features/#dynamic-content", 
            "text": "To access files or services that are executed on the server (PHP, Ruby, Node etc.), you need to use the right-most menu option. You can access your server side application by:   word1-word2-port.codio.io which will access your box over port 80, which is useful if your corporate firewall blocks ports other than 80 and 443.   word1-word2  is an automatically generated subdomain name for your Codio Box. You can configure your application to listen on ports defining the port in the URL, but please be aware than Codio supported a restricted range of ports. Please refer to  this section  for more details.  Read on for information on how to configure your Static and Dynamic preview menus.", 
            "title": "Dynamic content"
        }, 
        {
            "location": "/project/ide/features/#instructions", 
            "text": "The Preview button lets you preview one or more web pages with a simple button press. Codio creates four default entries in the Preview menu automatically.    Project Index  - this is the default file to run for your project. It can be set by right-clicking a file in the file tree. This option should only be used to preview static content (typically  .html  files). For PHP, Ruby etc. you should use the  Box URL  option.  Current File  - whichever code file currently has focus. This option should only be used to preview static content (typically  .html  files). For PHP, Ruby etc. you should use the  Box URL  option.  Box URL  - use this option for previewing PHP, Ruby or other server side languages over http.  Click here  for more information on configuring port access for http.  Box URL SSL  - use this option for previewing PHP, Ruby or other server side languages over SSL.  Click here  for more information on configuring port access for https.   If you right-click a file in the file tree or the Tab, you can also select  Preview Static .", 
            "title": "Instructions"
        }, 
        {
            "location": "/project/ide/features/#preview-in-a-codio-tab-or-new-browser-tab", 
            "text": "In the Preview dropdown menu, you can select one of the following ways to preview   Inside Codio  : displays the preview in a Codio tab; note that if you are accessing via any port other than Port 80 (the Box URL and Box URL SSL defaults in the screenshot at the top) then this option will only work if you are using HTTPS as Codio itself runs over HTTPS and the browser will not allow mixed HTTP/HTTPS.  See here  for more details on using HTTPS.  New browser tab  : it will open up a new browser tab or window.   If you are previewing a private project containing Static content and you have not enabled  Allow Private Static Preview  option (available only via  Project Settings ) you will be asked to authenticate with your username and password. If you signed up using GitHub/BitBucket/G+ method, a random password is created for your account. Go to  Codio Account  and on the Account tab you can set up a password of your own choosing.  If though you have enabled this option, then you can preview static content without authentication. A new backend URL will be generated for this purpose that you can then share with anyone else you wish to be able to preview your project. You are also able to regenerate this URL at any time and access using the old URL will no longer function.  This only applies to code being previewed over the standard ports 80 and 443. Previewing via any other port will have no authentication, because the code is being served from your application server, which we have no control over but you can add your own authentication.  See  Apache Password Basic Authentication  and  HTTP Authentication with PHP  for some examples.", 
            "title": "Preview in a Codio tab or new browser tab"
        }, 
        {
            "location": "/project/ide/features/#modifying-the-preview-menu", 
            "text": "You are free to customize the menu in either of the following ways   From the  Preview  or  Run  drop down menus (the 2nd and 3rd right most Codio menu items), select  Configure...  If it exists already, open the  .codio  file that lives in the root of your project.   For details about the various tokens that can be inserted, please refer to  Customizing the Run menu .  {{domain3000}}  is the most important token for the  Preview menu . It is replaced by the public url required to access your project over port 80, which is useful if your corporate firewall blocks ports other than 80 and 443. {{domain}}  can also be used in the  Preview  menu. In most cases you will want to add the Port number (default 3000) to your service. e.g  \"Box URL\": \"http://{{domain3000}}/\",  {\n// Configure your Run and Preview buttons here.\n\n// Run button configuration\n   commands : {\n         Node version :  node --version \n  },\n\n// Preview button configuration\n   preview : {\n         Project Index (static) :  https://{{domain}}/{{index}} ,\n         Current File (static) :  https://{{domain}}/{{filepath}} ,\n         Box URL :  http://{{domain3000}}/ ,\n         Box URL SSL :  https://{{domain3000}}/ \n  }\n}  Note that static content is served over Port 80. To access dynamic content you may need to specify the appropriate Port.  If you cannot access your project over SSL then this could be the way your application is configured.  The full range of Codio  {{tokens}}  is explained in  this section .", 
            "title": "Modifying the Preview menu"
        }, 
        {
            "location": "/project/ide/features/#insecure-content-with-in-tab-preview-and-front-end-code-mixed-content", 
            "text": "Codio runs over a secure connection using HTTPS, and therefore so does the inline preview. If your code references an external resource (script, font, image, etc.). For example:  script src= http://code.angularjs.org/1.1.5/angular.js   You will get a browser error indicating that there is some form of insecure or mixed content because you are running in a mixed HTTP/HTTPS mode. This is a restriction of the browser, and cannot be modified easily, or in some browsers, it cannot be modified at all. It is intended to protect you from insecure content.  There are 3 ways to avoid this:   Modify your external references to use HTTPS.  Expand the inline preview into a new browser tab (icon is in the small floating toolbar in the top right of the preview tab) and then modify the url from  https://codio.io/xxxx  to  http://codio.io/xxxx .  Modify your references to use the 'current protocol' by including '//' without http or https, so  script src=\"//code.angularjs.org/1.1.5/angular.js\" .  If none of the above work, then download the external file, and include and reference it within the Codio project itself.", 
            "title": "Insecure Content with In-Tab preview and front-end code (#mixed-content)"
        }, 
        {
            "location": "/project/ide/features/#quick-open", 
            "text": "Quick open (fast open) is a great way of opening files without the need to access the file tree. Invoke Quick Open from   File   Open File  from the menu  Cmd+O  (Mac) /  Ctrl+O  (PC/Linux)   ... and the quick open dialog will appear.   You now start typing the name of a file and as you type, the list will narrow down. You can then select the file you want using the mouse or use the keyboard, pressing Enter on the required file.", 
            "title": "Quick open"
        }, 
        {
            "location": "/project/ide/features/#real-time-code-collaboration", 
            "text": "If you give other Codio users permissions to access to your project, then Codio allows more than one user to view and edit files simultaneously.  Rather like Google Docs, you will be able to see other people editing the file in real time.  Because of this collaboration feature, your files are saved in real time and there is no need to press the save button. It just happens automatically.  You can change full access to your project from the  Project- Permissions  menu, but this is risky and we advise strongly against this unless you are sure only one person will be editing the project at a time.  The better approach is to use Git. If you are familiar with Git then each person has their own project but they all use Git to synchronize the content with a remote repository hosted on a platform like GitHub or BitBucket.", 
            "title": "Real time code collaboration"
        }, 
        {
            "location": "/project/ide/features/#saving-files", 
            "text": "There is generally no need to save your files as content is saved automatically. You can still save manually using the  Ctrl+S|Cmd+S  keyboard shortcut, which most of you should be familiar with, but you don\u2019t need to.\nIf you make mistakes, then use the regular undo ( Ctrl+Z ).  Version Control is the best possible way of managing restores and this is comprehensively supported thanks to our  Git integration .", 
            "title": "Saving files"
        }, 
        {
            "location": "/project/ide/features/#sharing-and-embedding", 
            "text": "To share a project or link to a project from a web page, go to the  Project   Share  menu item.", 
            "title": "Sharing and embedding"
        }, 
        {
            "location": "/project/ide/features/#retaining-layout-status-automatically-starting-tutorials", 
            "text": "You'll notice the three options at the top of the dialog. When you embed or link to a Codio project you have three ways of the IDE rendering it   Project URL  : use this URL to display the project with whatever panel and open file configuration happens to be active at the time. This can change all the time depending on what the user happens to have active at any given time.  Guide URL : use this URL to display your project with your  Guide  automatically starting.  With Layout  : use this URL if you want to always use the precise panel and file configuration that you currently have open. This is the right option if you want to embed it in a blog post or page and a precise configuration should be retained no matter what the project owner is doing with the layout at any given time.   You can use either of these basic URLs by copying and pasting.  But if you want to use one of our preconfigured button options, read on.", 
            "title": "Retaining layout status &amp; automatically starting tutorials"
        }, 
        {
            "location": "/project/ide/features/#markdown-or-html", 
            "text": "You can choose between Markdown or HTML by clicking on the HTML or Markdown label. Markdown is great for your GitHub README.md pages.  Once you have made your selection you can copy and paste from one of the button options below.", 
            "title": "Markdown or HTML"
        }, 
        {
            "location": "/project/ide/features/#suggested-buttons", 
            "text": "You will notice that there are two suggested buttons available for Project URL and With Layout modes.   Demo  : the suggested button for any situation where you want to link to a demo project. A great example would be on your GitHub page, where you want to be able to show a demo of your code as well as allowing the user to browse around the code itself.  Show me the code  : the suggested button for any situation where you want to link a blog, tutorial or some documentation to a real code sample.", 
            "title": "Suggested Buttons"
        }, 
        {
            "location": "/project/ide/", 
            "text": "This section contains key features of our powerful web based IDE. Using the IDE you can create and manage your code as well as access the command line.", 
            "title": "The Codio IDE"
        }, 
        {
            "location": "/project/ide/introduction/", 
            "text": "The Codio IDE sits on top of a Codio Box. A box is a full Ubuntu server. There are a lot of features in both the boxes and the IDE. The documentation contains a reference for all features. Below is a list of commonly used features with links to the documentation pages.\n\n\nBoxes\n\uf0c1\n\n\n\n\nAccessing the command line and root privileges\n\n\nInstallation of software packages using Codio dialog driven installer\n\n\nSSH into a box\n\n\nAutostart services on your box\n\n\nAccess to http and https ports\n\n\nRestarting a box\n\n\nAlways on boxes that do not shut down when a project is exited\n\n\nGetting code \ninto\n and \nout\n of Codio\n\n\nLinking your box to GitHub and Bitbucket\n\n\nGranting access to other Codio users\n\n\nAllowing others to fork your box's software configuration as well as the workspace\n\n\nGoogle Docs type access to files\n\n\nStack management\n\n\n\n\nIDE\n\uf0c1\n\n\n\n\nPreferences for keyboard shortcuts\n\n\nConfiguring custom menus\n\n\nCustom code panels and layouts\n\n\nConfiguring general IDE preferences", 
            "title": "Introduction"
        }, 
        {
            "location": "/project/ide/introduction/#boxes", 
            "text": "Accessing the command line and root privileges  Installation of software packages using Codio dialog driven installer  SSH into a box  Autostart services on your box  Access to http and https ports  Restarting a box  Always on boxes that do not shut down when a project is exited  Getting code  into  and  out  of Codio  Linking your box to GitHub and Bitbucket  Granting access to other Codio users  Allowing others to fork your box's software configuration as well as the workspace  Google Docs type access to files  Stack management", 
            "title": "Boxes"
        }, 
        {
            "location": "/project/ide/introduction/#ide", 
            "text": "Preferences for keyboard shortcuts  Configuring custom menus  Custom code panels and layouts  Configuring general IDE preferences", 
            "title": "IDE"
        }, 
        {
            "location": "/project/ide/navigation/", 
            "text": "No special knowledge is needed to use Codio\u2019s IDE.\n\n\nIt's easy enough for beginners who are learning to code.\n\n\nBecause it\u2019s web-based, there\u2019s nothing to download, install or update.\n\n\nExiting the IDE\n\uf0c1\n\n\nYou can exit the IDE and return to the Dasboard in one of the following ways\n\n\n\n\nSelect \nProject \n Close\n from the menu\n\n\nClick on the Gravatar in the top bar\n\n\nClick on your user name in the top bar\n\n\n\n\nEditing a file\n\uf0c1\n\n\nYou can open an existing file from the tree or create a new one from either the \nFile \n New File\n menu or by right-clicking in the file tree.\n\n\nWhen you open a file, it will appear in a tab in the currently active \nPanel\n.\n\n\nCodio will syntax highlight based on the file type. You can see the detected file type in the status bar. Clicking on that file type will allow you to force the syntax highlighting to another language format.\n\n\nUploading files\n\uf0c1\n\n\nYou can upload a file into your project in the following ways\n\n\n\n\n\n\nRight-click within the file tree, taking into account folders\n\n\nSelect the \nFile \n Upload\n menu option, having first selected a folder in the file tree.\n\n\n\n\nHaving selected on of these options, you can upload files by\n\n\n\n\nPressing the \nbrowse for files\n button and selecting your files\n\n\nDragging files from your destop or file explorer into the dialog. Dragging of a folder and its contents is only supported in Chrome.\n\n\n\n\nImportant:\n if you select both files and folders to upload, only the files within the main folder will get uploaded. You will need to upload one folder at a time.\n\n\nDownloading files\n\uf0c1\n\n\nYou can download individual files from your project.\n\n\n\n\n\n\nRight-click the file from the file tree,\n\n\nSelect the \nDownload\n option.\n\n\n\n\nAdding files\n\uf0c1\n\n\nAdding a file is done in one of two ways. First, make sure you have selected the folder within the file tree where you want the file created.\n\n\n\n\nRight-click within the file tree, taking into account your folders\n\n\nSelect File \n New\n from the menu\n\n\n\n\nYou should specify both the file name and the extension.\n\n\nRight-clicking also allows you to Copy/Paste existing files.\n\n\nCreating a folder\n\uf0c1\n\n\nCreating a new folder is done in one of two ways:\n\n\n\n\nRight-click within the file tree, taking into account the existing folder structure\n\n\nSelect the \nFile \n New folder\n item from the menu\n\n\n\n\nRight-clicking also allows you to Copy/Paste existing folders along with its contents.\n\n\nDeleting a folder\n\uf0c1\n\n\nYou can delete an entire folder and its content in two ways\n\n\n\n\nRight click the folder and select \nDelete\n\n\nOn Macs, press \nfn+backspace\n\n\nOn anything else, press \nshift+del\n\n\n\n\nWarning\n\uf0c1\n\n\nDeleting a folder cannot be undone.\n\n\nDragging files \n folders\n\uf0c1\n\n\nYou can drag individual or multiple files and folders around the filetree. Excercise caution when doing this as drag actions cannot be undone.\n\n\nRight-clicking also allows you to Copy/Paste existing files/folders.\n\n\nReadme info pages\n\uf0c1\n\n\nWhen you open up a project in the IDE, Codio will try to locate a file called readme.md in the root of the project. If it finds one and you have not opened the project beforehand, it will open and display it in 'markdown' mode.\n\n\n\n\nIf you select the README.md file from the file tree, it will be opened up for editing using markdown. You can switch between markdown,  'preview' and you can run in SplitView mode as highlighted in the above image.\n\n\nThe readme.md file should be written in markdown format. Here is a reference for markdown:\n\n\n\n\nDaring Fireball\n - the author of markdown\n\n\n\n\nExporting an app\n\uf0c1\n\n\nYou can export an app at any point by\n\n\n\n\nright-clicking the app in the file tree (click the top level item)\n\n\nor by selecting the \nProject\nExport as Zip\n menu item\n\n\nfrom the \nProject Settings\n\n\n\n\nYou can also download individual files from your project. See \nDownload Files\n for more information.", 
            "title": "Basic IDE Features"
        }, 
        {
            "location": "/project/ide/navigation/#exiting-the-ide", 
            "text": "You can exit the IDE and return to the Dasboard in one of the following ways   Select  Project   Close  from the menu  Click on the Gravatar in the top bar  Click on your user name in the top bar", 
            "title": "Exiting the IDE"
        }, 
        {
            "location": "/project/ide/navigation/#editing-a-file", 
            "text": "You can open an existing file from the tree or create a new one from either the  File   New File  menu or by right-clicking in the file tree.  When you open a file, it will appear in a tab in the currently active  Panel .  Codio will syntax highlight based on the file type. You can see the detected file type in the status bar. Clicking on that file type will allow you to force the syntax highlighting to another language format.", 
            "title": "Editing a file"
        }, 
        {
            "location": "/project/ide/navigation/#uploading-files", 
            "text": "You can upload a file into your project in the following ways    Right-click within the file tree, taking into account folders  Select the  File   Upload  menu option, having first selected a folder in the file tree.   Having selected on of these options, you can upload files by   Pressing the  browse for files  button and selecting your files  Dragging files from your destop or file explorer into the dialog. Dragging of a folder and its contents is only supported in Chrome.   Important:  if you select both files and folders to upload, only the files within the main folder will get uploaded. You will need to upload one folder at a time.", 
            "title": "Uploading files"
        }, 
        {
            "location": "/project/ide/navigation/#downloading-files", 
            "text": "You can download individual files from your project.    Right-click the file from the file tree,  Select the  Download  option.", 
            "title": "Downloading files"
        }, 
        {
            "location": "/project/ide/navigation/#adding-files", 
            "text": "Adding a file is done in one of two ways. First, make sure you have selected the folder within the file tree where you want the file created.   Right-click within the file tree, taking into account your folders  Select File   New  from the menu   You should specify both the file name and the extension.  Right-clicking also allows you to Copy/Paste existing files.", 
            "title": "Adding files"
        }, 
        {
            "location": "/project/ide/navigation/#creating-a-folder", 
            "text": "Creating a new folder is done in one of two ways:   Right-click within the file tree, taking into account the existing folder structure  Select the  File   New folder  item from the menu   Right-clicking also allows you to Copy/Paste existing folders along with its contents.", 
            "title": "Creating a folder"
        }, 
        {
            "location": "/project/ide/navigation/#deleting-a-folder", 
            "text": "You can delete an entire folder and its content in two ways   Right click the folder and select  Delete  On Macs, press  fn+backspace  On anything else, press  shift+del", 
            "title": "Deleting a folder"
        }, 
        {
            "location": "/project/ide/navigation/#warning", 
            "text": "Deleting a folder cannot be undone.", 
            "title": "Warning"
        }, 
        {
            "location": "/project/ide/navigation/#dragging-files-folders", 
            "text": "You can drag individual or multiple files and folders around the filetree. Excercise caution when doing this as drag actions cannot be undone.  Right-clicking also allows you to Copy/Paste existing files/folders.", 
            "title": "Dragging files &amp; folders"
        }, 
        {
            "location": "/project/ide/navigation/#readme-info-pages", 
            "text": "When you open up a project in the IDE, Codio will try to locate a file called readme.md in the root of the project. If it finds one and you have not opened the project beforehand, it will open and display it in 'markdown' mode.   If you select the README.md file from the file tree, it will be opened up for editing using markdown. You can switch between markdown,  'preview' and you can run in SplitView mode as highlighted in the above image.  The readme.md file should be written in markdown format. Here is a reference for markdown:   Daring Fireball  - the author of markdown", 
            "title": "Readme info pages"
        }, 
        {
            "location": "/project/ide/navigation/#exporting-an-app", 
            "text": "You can export an app at any point by   right-clicking the app in the file tree (click the top level item)  or by selecting the  Project Export as Zip  menu item  from the  Project Settings   You can also download individual files from your project. See  Download Files  for more information.", 
            "title": "Exporting an app"
        }, 
        {
            "location": "/project/ide/panels/", 
            "text": "IDE panels let you create any panel configuration you want for both code editing and also other features (such as \nGit\n, \nDeployment\n etc.).\n\n\nThis gives you complete control over the layout of your project. Whenever you leave you project, its precise pane configuration is saved and reloaded when you come back to it.\n\n\n\n\nFile Tree\n\uf0c1\n\n\nThe main file tree itself is a tab within a panel. If you look carefully, you will see that it can receive focus and the Filetree text is in a tab.\n\n\nAs a result, you can perform the exact same set of operations on it as with any other tab content. It can be moved around, removed, reinstated etc.\n\n\nPanel Focus\n\uf0c1\n\n\nIf you have multiple panels, the panel you click within gets the focus and can be seen by a white border.\n\n\nIf you want to open a file in a different panel, first click on that panel and then open a file from the file tree.\n\n\nTabs\n\uf0c1\n\n\nYou can add any number of tabs into a single panel. You are also free to drag tabs around to change their order.\n\n\nTabs can also be dragged from one panel to another.\n\n\nPanel Management\n\uf0c1\n\n\nTabs can be created from the \nView \n Panels\n menu or by using hotkeys. The next section explain the panel actions available.\n\n\nPanel actions\n\uf0c1\n\n\nCodio lets you manage panels using either hotkeys or from the \nView \n Panels\n menu.\n\n\nReset to Default Layout\n\uf0c1\n\n\nIf you want to quickly go back to a basic IDE layout, then this is easily done.\n\n\nMac : Cmd+Alt+R\nWin : Ctrl+Alt+R\n\n\n\n\nMenu : \nView \n Layouts \n Default\n Layout\n\n\nSplit Vertical\n\uf0c1\n\n\nThis splits the selected panel by drawing a vertical line down the middle, so you end up with two panels side by side.\n\n\nMac : Cmd+Alt+V\nWin : Ctrl+Alt+V\n\n\n\n\nSplit Horizontal\n\uf0c1\n\n\nThis splits the selected panel by drawing a horizontal line across the middle, so you end up with one panel on top of the new panel.\n\n\nMac : Cmd+Alt+H\nWin : Ctrl+Alt+H\n\n\n\n\nClose Panel\n\uf0c1\n\n\nThis will close the selected panel and all the tabs within it.\n\n\nMac : Cmd+Alt+C\nWin : Ctrl+Alt+C\n\n\n\n\nRestore File Tree\n\uf0c1\n\n\nIf you deliberately or inadvertently close the file tree, you can restore it from the \nView \n Open/Show File Tree\n menu.\n\n\nSwitch Tabs\n\uf0c1\n\n\nYou can cycle between tabs in a panel using the keyboard. \nAlt+Shift+.\n takes you to the previous tab and \nAlt+Shift+.\n to the next. If you don't like those key bindings, open up your \npreferences\n and change the \ntab_switch_left\n and \ntab_switch_right\n item.\n\n\nExpand tabs full screen\n\uf0c1\n\n\nIf you have multiple panels open, you may find that you like the arrangement but some of the panels are too small for code editing.\n\n\nFull screen mode is activated by selecting a tab and then pressing (by default) \nF11\n. You can shrink it back into the tab by pressing \nF11\n again.\n\n\nSome Mac users may find that F11 is blocked. You can easily modify the keyboard shortcut in \nCodio Preferences\n.", 
            "title": "Panels & Tabs"
        }, 
        {
            "location": "/project/ide/panels/#file-tree", 
            "text": "The main file tree itself is a tab within a panel. If you look carefully, you will see that it can receive focus and the Filetree text is in a tab.  As a result, you can perform the exact same set of operations on it as with any other tab content. It can be moved around, removed, reinstated etc.", 
            "title": "File Tree"
        }, 
        {
            "location": "/project/ide/panels/#panel-focus", 
            "text": "If you have multiple panels, the panel you click within gets the focus and can be seen by a white border.  If you want to open a file in a different panel, first click on that panel and then open a file from the file tree.", 
            "title": "Panel Focus"
        }, 
        {
            "location": "/project/ide/panels/#tabs", 
            "text": "You can add any number of tabs into a single panel. You are also free to drag tabs around to change their order.  Tabs can also be dragged from one panel to another.", 
            "title": "Tabs"
        }, 
        {
            "location": "/project/ide/panels/#panel-management", 
            "text": "Tabs can be created from the  View   Panels  menu or by using hotkeys. The next section explain the panel actions available.", 
            "title": "Panel Management"
        }, 
        {
            "location": "/project/ide/panels/#panel-actions", 
            "text": "Codio lets you manage panels using either hotkeys or from the  View   Panels  menu.", 
            "title": "Panel actions"
        }, 
        {
            "location": "/project/ide/panels/#reset-to-default-layout", 
            "text": "If you want to quickly go back to a basic IDE layout, then this is easily done.  Mac : Cmd+Alt+R\nWin : Ctrl+Alt+R  Menu :  View   Layouts   Default  Layout", 
            "title": "Reset to Default Layout"
        }, 
        {
            "location": "/project/ide/panels/#split-vertical", 
            "text": "This splits the selected panel by drawing a vertical line down the middle, so you end up with two panels side by side.  Mac : Cmd+Alt+V\nWin : Ctrl+Alt+V", 
            "title": "Split Vertical"
        }, 
        {
            "location": "/project/ide/panels/#split-horizontal", 
            "text": "This splits the selected panel by drawing a horizontal line across the middle, so you end up with one panel on top of the new panel.  Mac : Cmd+Alt+H\nWin : Ctrl+Alt+H", 
            "title": "Split Horizontal"
        }, 
        {
            "location": "/project/ide/panels/#close-panel", 
            "text": "This will close the selected panel and all the tabs within it.  Mac : Cmd+Alt+C\nWin : Ctrl+Alt+C", 
            "title": "Close Panel"
        }, 
        {
            "location": "/project/ide/panels/#restore-file-tree", 
            "text": "If you deliberately or inadvertently close the file tree, you can restore it from the  View   Open/Show File Tree  menu.", 
            "title": "Restore File Tree"
        }, 
        {
            "location": "/project/ide/panels/#switch-tabs", 
            "text": "You can cycle between tabs in a panel using the keyboard.  Alt+Shift+.  takes you to the previous tab and  Alt+Shift+.  to the next. If you don't like those key bindings, open up your  preferences  and change the  tab_switch_left  and  tab_switch_right  item.", 
            "title": "Switch Tabs"
        }, 
        {
            "location": "/project/ide/panels/#expand-tabs-full-screen", 
            "text": "If you have multiple panels open, you may find that you like the arrangement but some of the panels are too small for code editing.  Full screen mode is activated by selecting a tab and then pressing (by default)  F11 . You can shrink it back into the tab by pressing  F11  again.  Some Mac users may find that F11 is blocked. You can easily modify the keyboard shortcut in  Codio Preferences .", 
            "title": "Expand tabs full screen"
        }, 
        {
            "location": "/project/ide/settings/", 
            "text": "Codio allows various Preferences and Settings to be customized.\n\n\nQuick access to the following commonly used settings are available from the \nView\n menu\n\n\n\n\nFont Size, Tab Size, Soft Tabs, Wrap, Theme\n\n\n\n\nFull settings can be accessed and managed as follows\n\n\nAccount settings\n\uf0c1\n\n\nYou can find your account settings in the \nCodio \n Account\n dropdown menu and from the Gear icon at the bottom of the Dashboard.\n\n\nAccount Settings lets you manage the following\n\n\n\n\nUser profile\n\n\nPassword\n\n\nSSH key\n\n\nGithub single signon and Codio public key upload\n\n\nBitBucket single signon and Codio public key upload\n\n\nAccount deletion\n\n\n\n\nUser preferences\n\uf0c1\n\n\nYou can access the User Preferences using the menu item \nCodio \n Preferences \n User\n when you are in a project.\n\n\n\n\nUser Preferences are the full collection of settings that apply to you, the logged in user. They cover all aspects of Codio usage from code editor settings (tab stops, indentation, colors, fonts etc.) through to hotkey keyboard shortcut mappings.\n\n\n\n\nCodio allows you to fully customize all these preferences and the User level and the \nProject level\n.\n\n\nCodio does the following to manage the final preferences for the logged in user...\n\n\n\n\nCodio defaults are taken\n\n\nAny user overrides are then applied\n\n\nAny project level preferences are finally applied, if any\n\n\n\n\nDefault Preferences\n\uf0c1\n\n\nWhen you create your account, you will be assigned the default settings. You can see these on the right hand side. These settings are read-only, so you cannot modify them. You can browse through this file to see the complete set of preferences available.\n\n\nDefault settings look something like this\n\n\n;Brace style.\n; Type: list.\n; Values:\n;  collapse : collapse\n;  expand : expand\n;  end-expand : end-expand\nbrace_style = collapse\n\n\n\n\nYou can see the setting name (\nbrace_style\n with a default value of \ncollapse\n) as well as the data type (list) and the available values (in the case of a list).\n\n\nUser Preferences\n\uf0c1\n\n\nUser preferences can be made from the main menu \nCodio \n Preferences \n User\n.\n\n\nUser preference overrides are made in left hand pane. When your account is created, this will be empty. Here is an example of user settings that override the Codio defaults ...\n\n\n[editor]\ntheme=eclipse\nfont_size=13\n\n[code-beautifier]\nindent_level=4\nindent_with_tabs=true\n\n\n\n\nKeyboard shortcuts \n Hotkeys\n\uf0c1\n\n\nWithin the default settings (right hand pane) you can see how you can map your own keyboard shortcuts.\n\n\nThe defaults will display appropriately for Mac or Linux/PC users. If you override these shortcuts in the left hand pane, then these not Mac/PC/Linux aware. If you are a Mac user and you specify \nCmd\n keys, then you should be aware that these will not be accessible from PC/Linux machines. If you need to have your custom shortcuts working on all machines then avoid using \nCmd\n.\n\n\nUsing Autocomplete\n\uf0c1\n\n\nBe sure to use the Codio autocomplete feature for both the setting name and possible values.\n\n\nPosition the cursor within the left pane and press \nctrl+space\n.\n\n\nIf you are on the first line of the file, you will see that you only have Sections available. If you are within a Section, you will see all available settings for that section.\n\n\nHaving selected a preference, press \n=\n and then \nctrl+space\n to bring up the autocomplete window again. Depending on the preference type (list or boolean), you will see the available options for that preference.\n\n\nSearching for preference settings\n\uf0c1\n\n\nIf you want to find a preference setting in the default pane, the best thing is to search. This will highlight any matching text.\n\n\nProject preferences\n\uf0c1\n\n\nProject preferences get the highest priority and are applied over User Settings. To modify these, you should open your project and then choose one of the following\n\n\n\n\nFrom the menu, select \nCodio \n Preferences \n Project\n\n\nFrom the file tree, locate the \n.settings\n file\n\n\n\n\nAs any project preferences will be applied over your user preferences and everyone else's, you should be careful in what settings you place in here.\n\n\nPreferences list\n\uf0c1\n\n\nYou can set a lot of preferences in Codio. There are various ways of listing and finding preferences and their corresponding keyboard shortcuts.\n\n\n\n\nCommand Bar\n lets you find and execute commands and actions. It only shows actionable commands, so things like Font Size, Theme are not available here. Toggle items are, however.\n\n\nHelp \n Shortcuts\n and type and search list that shows all keyboard shortcuts\n\n\nCodio \n Preferences \n User\n where a complete list is shown in the Default Preferences area and you can also modify the preferences.\n\n\n\n\nTo see how to modify your preferences see \nCodio Preferences\n\n\nProject settings\n\uf0c1\n\n\nThese settings are found within the IDE (a loaded project) from the \nProject \n Settings\n menu item and also accessible from the \nMy Projects\n listing, by clicking the gear icon in the right side of the listing.\n\n\nProject settings, as distinct from Project preferences, are used to store the following details about the project\n\n\n\n\nProject Name\n\n\nProject Description\n\n\nPublic/Private\n\n\nAllow Box Cloning (subscription required)\n\n\nEnable your Box as \nAlways-On\n\n\nAllow Private Static Preview. See \nPreview\n for more information. \nNB\n Only available from \nProject\nSettings\n\n\nProtect Dynamic Ports. Disable to allow preview of the box to anyone who knows the box url. \nNB\n Only available from \nProject\nSettings\n\n\nDelete your Project\n\n\nExport the project as a Zip file.\n\n\nStack Settings - details of the stack used in your project.\n\n\nForwarding Settings - details of how to SSH into your box. See \nhere\n for more.\n\n\n\n\n\n\nProject permissions\n\uf0c1\n\n\nYou modify permissions by selecting \nPermissions\n from the \nProject\n dropdown menu.\n\n\n\n\nBy default:\n\n\n\n\nAnyone can see a public project\n\n\nNo-one can edit a public project (but they can fork it)\n\n\nNo-one can see a private project\n\n\n\n\nChanging permissions allows you to give the following access permissions to Users and/or Groups.\n\n\n\n\nRead\n - View the project only\n\n\nWrite\n - Edit the project\n\n\nAdmin\n - Users can access the terminal and the deployment screens. Care should be taken as this entails security risk given that an Admin user has full access to keys and any other private data that might be stored on the Box.\n\n\n\n\nAdding/Removing a User\n\uf0c1\n\n\nTo add a new user, start typing the user name in the text field. When you find the user, click Add and that user will be added to the list of users below.\n\n\nYou can remove a user from the list by clicking the 'x' button.", 
            "title": "Settings"
        }, 
        {
            "location": "/project/ide/settings/#account-settings", 
            "text": "You can find your account settings in the  Codio   Account  dropdown menu and from the Gear icon at the bottom of the Dashboard.  Account Settings lets you manage the following   User profile  Password  SSH key  Github single signon and Codio public key upload  BitBucket single signon and Codio public key upload  Account deletion", 
            "title": "Account settings"
        }, 
        {
            "location": "/project/ide/settings/#user-preferences", 
            "text": "You can access the User Preferences using the menu item  Codio   Preferences   User  when you are in a project.   User Preferences are the full collection of settings that apply to you, the logged in user. They cover all aspects of Codio usage from code editor settings (tab stops, indentation, colors, fonts etc.) through to hotkey keyboard shortcut mappings.   Codio allows you to fully customize all these preferences and the User level and the  Project level .  Codio does the following to manage the final preferences for the logged in user...   Codio defaults are taken  Any user overrides are then applied  Any project level preferences are finally applied, if any", 
            "title": "User preferences"
        }, 
        {
            "location": "/project/ide/settings/#default-preferences", 
            "text": "When you create your account, you will be assigned the default settings. You can see these on the right hand side. These settings are read-only, so you cannot modify them. You can browse through this file to see the complete set of preferences available.  Default settings look something like this  ;Brace style.\n; Type: list.\n; Values:\n;  collapse : collapse\n;  expand : expand\n;  end-expand : end-expand\nbrace_style = collapse  You can see the setting name ( brace_style  with a default value of  collapse ) as well as the data type (list) and the available values (in the case of a list).", 
            "title": "Default Preferences"
        }, 
        {
            "location": "/project/ide/settings/#user-preferences_1", 
            "text": "User preferences can be made from the main menu  Codio   Preferences   User .  User preference overrides are made in left hand pane. When your account is created, this will be empty. Here is an example of user settings that override the Codio defaults ...  [editor]\ntheme=eclipse\nfont_size=13\n\n[code-beautifier]\nindent_level=4\nindent_with_tabs=true", 
            "title": "User Preferences"
        }, 
        {
            "location": "/project/ide/settings/#keyboard-shortcuts-hotkeys", 
            "text": "Within the default settings (right hand pane) you can see how you can map your own keyboard shortcuts.  The defaults will display appropriately for Mac or Linux/PC users. If you override these shortcuts in the left hand pane, then these not Mac/PC/Linux aware. If you are a Mac user and you specify  Cmd  keys, then you should be aware that these will not be accessible from PC/Linux machines. If you need to have your custom shortcuts working on all machines then avoid using  Cmd .", 
            "title": "Keyboard shortcuts &amp; Hotkeys"
        }, 
        {
            "location": "/project/ide/settings/#using-autocomplete", 
            "text": "Be sure to use the Codio autocomplete feature for both the setting name and possible values.  Position the cursor within the left pane and press  ctrl+space .  If you are on the first line of the file, you will see that you only have Sections available. If you are within a Section, you will see all available settings for that section.  Having selected a preference, press  =  and then  ctrl+space  to bring up the autocomplete window again. Depending on the preference type (list or boolean), you will see the available options for that preference.", 
            "title": "Using Autocomplete"
        }, 
        {
            "location": "/project/ide/settings/#searching-for-preference-settings", 
            "text": "If you want to find a preference setting in the default pane, the best thing is to search. This will highlight any matching text.", 
            "title": "Searching for preference settings"
        }, 
        {
            "location": "/project/ide/settings/#project-preferences", 
            "text": "Project preferences get the highest priority and are applied over User Settings. To modify these, you should open your project and then choose one of the following   From the menu, select  Codio   Preferences   Project  From the file tree, locate the  .settings  file   As any project preferences will be applied over your user preferences and everyone else's, you should be careful in what settings you place in here.", 
            "title": "Project preferences"
        }, 
        {
            "location": "/project/ide/settings/#preferences-list", 
            "text": "You can set a lot of preferences in Codio. There are various ways of listing and finding preferences and their corresponding keyboard shortcuts.   Command Bar  lets you find and execute commands and actions. It only shows actionable commands, so things like Font Size, Theme are not available here. Toggle items are, however.  Help   Shortcuts  and type and search list that shows all keyboard shortcuts  Codio   Preferences   User  where a complete list is shown in the Default Preferences area and you can also modify the preferences.   To see how to modify your preferences see  Codio Preferences", 
            "title": "Preferences list"
        }, 
        {
            "location": "/project/ide/settings/#project-settings", 
            "text": "These settings are found within the IDE (a loaded project) from the  Project   Settings  menu item and also accessible from the  My Projects  listing, by clicking the gear icon in the right side of the listing.  Project settings, as distinct from Project preferences, are used to store the following details about the project   Project Name  Project Description  Public/Private  Allow Box Cloning (subscription required)  Enable your Box as  Always-On  Allow Private Static Preview. See  Preview  for more information.  NB  Only available from  Project Settings  Protect Dynamic Ports. Disable to allow preview of the box to anyone who knows the box url.  NB  Only available from  Project Settings  Delete your Project  Export the project as a Zip file.  Stack Settings - details of the stack used in your project.  Forwarding Settings - details of how to SSH into your box. See  here  for more.", 
            "title": "Project settings"
        }, 
        {
            "location": "/project/ide/settings/#project-permissions", 
            "text": "You modify permissions by selecting  Permissions  from the  Project  dropdown menu.   By default:   Anyone can see a public project  No-one can edit a public project (but they can fork it)  No-one can see a private project   Changing permissions allows you to give the following access permissions to Users and/or Groups.   Read  - View the project only  Write  - Edit the project  Admin  - Users can access the terminal and the deployment screens. Care should be taken as this entails security risk given that an Admin user has full access to keys and any other private data that might be stored on the Box.", 
            "title": "Project permissions"
        }, 
        {
            "location": "/project/ide/settings/#addingremoving-a-user", 
            "text": "To add a new user, start typing the user name in the text field. When you find the user, click Add and that user will be added to the list of users below.  You can remove a user from the list by clicking the 'x' button.", 
            "title": "Adding/Removing a User"
        }, 
        {
            "location": "/project/ide/tools/deployment/", 
            "text": "You do not to need to deploy when you are developing your project. Front-end code is automatically served up over Port 80. Access to back-end code (PHP, Ruby etc.) is done by accessing your \nBox\n.\n\n\nYou can deploy from the command line (\nTools-\nTerminal\n menu), but Codio has a great Deployment Manager that lets you deploy all or any part of your project, with a single click ,to a custom 'deployment target'. We support deployment to the following platforms.\n\n\n\n\nFTP\n\n\nSFTP\n\n\nRSYNC\n\n\nNodejitsu\n\n\nGeneric Git deployment\n\n\n\n\nCreate/manage a target\n\uf0c1\n\n\nThe Manage Targets options are accessed via \nTools \n Deployment \n Manage Targets\n menu. All Deployment dialogs will be displayed in the currently active \nPanel\n.\n\n\nIf you have not yet created any deployment targets then you will be prompted to create one.\n\n\n\n\nIn the Deployment Targets dialog, you can:\n\n\n\n\nlist all defined deployment targets\n\n\nmodify existing targets\n\n\ncreate new targets\n\n\n\n\nDestination\n\uf0c1\n\n\nThe Destination drop down specifies the type of the target you are deploying to. Currently we support the following destinations (click on each one to find out about its associated parameters)\n\n\n\n\nFTP\n\n\nRYSNC\n\n\nSFTP\n\n\nNodejitsu\n\n\nGit\n\n\n\n\nBase path field\n\uf0c1\n\n\nYou will notice that all deployment targets, except Codio, have a \nPreview Base Path\n field.\n\n\n\n\nIt is important to complete this field for all target types involving remote servers so that the Preview option knows how to access your project once deployed.\n\n\nFor example, you might deploy to a remote server at a folder location \n/home/fmay/www\n. Accessing this application via a browser, however, depends on how you configure your remote web server.\n\n\nSo it could be \nhttp://123.456.789\n or \nfmay.mydomain.com\n is the correct location.\n\n\nPlease see the \nPreview\n section for more information.\n\n\nPublic keys for remote servers\n\uf0c1\n\n\nWhen you are setting up a remote server, Codio can automatically install the Codio public key on your remote server, which saves a tedious manual process.\n\n\n\n\nYou can copy a key from the \nCodio \n Account\n dialog as \ndescribed here\n\n\nYou can set up an SSH Connection and use the \nConnection Manger\n to do the same thing.\n\n\n\n\nTerminal access to remotes\n\uf0c1\n\n\nIf you are working with remote servers, you may find it useful to be able to SSH into your remote server.\n\n\nCodio supports the ability to open an SSH terminal in a Codio tab. \nClick here\n for further details.\n\n\nDeploying to a target\n\uf0c1\n\n\nThere are three ways to deploy projects.\n\n\nTools-\nDeployment-\nDeploy menu\n\uf0c1\n\n\nThis let's you deploy to any of your deployment targets you created in \nManage Targets\n. You are shown a log if any errors occur.\n\n\n\n\nRight Click in the file tree\n\uf0c1\n\n\nYou can deploy an individual file or folder by right-clicking in the file tree.\n\n\nCommand Line\n\uf0c1\n\n\nYou can use the command line directly but you can also add your custom deployment actions by \nmodifying the Run Menu\n.\n\n\nRsync target type\n\uf0c1\n\n\nRsync is a great way of working with remote servers. It behaves much the same as the SFTP deployment type but rather than deploying all files, it deploys only files that have changed.\n\n\nYou can use a password and/or a public key for authentication.\n\n\n\n\nBase Path\n\uf0c1\n\n\nWe recommend you set the base path field for remote servers as \ndescribed here\n. This will be useful when using the \nPreview\n feature.\n\n\nPublic Key Authentication\n\uf0c1\n\n\nCodio auto-generates a public key that is uniquely associated with your user account. You can find this public key in the \nUser Settings dialog\n. You should make sure that this public key is added to your remote server.\n\n\nProtocol\n\uf0c1\n\n\nThere are two options available\n\n\n\n\nSSH\n : (recommended) uses an SSH connection to transfer\n\n\nRSYNC Daemon\n : this requires you to set up an rsync daemon on the remote server. This is a more complex procedure and so should generally be avoided.\n\n\n\n\nSpecifying a Port\n\uf0c1\n\n\nIf you want to override the default SFTP port (22) then you can add the port number to the domain name as shown below\n\n\nmydomain.com:1234\n\n\n\n\nUser Name\n\uf0c1\n\n\nYou will need to supply a valid user name for your remote server regardless of the authentication method.\n\n\nPassword Authentication\n\uf0c1\n\n\nIf you are using a public key then you can leave the password field empty.\n\n\nIf you do not want to use a public key, then you will need to use a password for authentication. Simply provide the details in the Codio dialog.\n\n\nDelete Missing Folders\n\uf0c1\n\n\nThis removes any folders from the remote server that are not present in the Codio project.\n\n\nFTP target type\n\uf0c1\n\n\nThe FTP target type allows you to deploy to any FTP server. You supply the usual FTP access details.\n\n\n\n\nBase Path\n\uf0c1\n\n\nWe recommend you set the base path field for remote servers as \ndescribed here\n. This will be useful when using the \nPreview\n feature.\n\n\nSpecifying a Port\n\uf0c1\n\n\nIf you want to override the default FTP port (21) then you can add the port number to the domain name as shown below\n\n\nmydomain.com:1234\n\n\n\n\nTransfer Mode\n\uf0c1\n\n\nFTP can operate in 'Active' or 'Passive' mode. Codio will attempt to connect in passive mode by default. If it fails, then it will automatically try active mode. If that fails then you will get an error.\n\n\nHowever, if you get an error then try changing the setting to Active. This will ensure that Codio will only try to connect in active mode without a risk of confusing the target server.\n\n\nSFTP target type\n\uf0c1\n\n\nThe SFTP target type allows you to deploy to any SFTP server. You can use a password and/or a public key for authentication.\n\n\n\n\nBase Path\n\uf0c1\n\n\nWe recommend you set the base path field for remote servers as \ndescribed here\n. This will be useful when using the \nPreview\n feature.\n\n\nPublic Key Authentication\n\uf0c1\n\n\nCodio auto-generates a public key that is uniquely associated with your user account. You can find this public key in the \nUser Settings dialog\n. You should make sure that this public key is added to your remote server.\n\n\nSpecifying a Port\n\uf0c1\n\n\nIf you want to override the default SFTP port (22) then you can add the port number to the domain name as shown below\n\n\nmydomain.com:1234\n\n\n\n\nUser Name\n\uf0c1\n\n\nYou will need to supply a valid user name for your remote server regardless of the authentication method.\n\n\nPassword Authentication\n\uf0c1\n\n\nIf you are using a public key then you can leave the password field empty.\n\n\nIf you do not want to use a public key, then you will need to use a password for authentication. Simply provide the details in the Codio dialog. You can use both a public key and a password if you like.\n\n\nEmpty Destination Path\n\uf0c1\n\n\nBe very careful when checking this box. It will brutally remove all content from specified location on the remote server before the deploy starts.\n\n\nNodejitsu target type\n\uf0c1\n\n\nNodejitsu\n is a high quality third party Node.js production platform, so we built a dedicated deployment target that makes life as easy as possible.\n\n\nYou will need to sign up for a Nodejitsu account before you use it.\n\n\n\n\nSelect Nodejitsu from the Destination drop down and then make sure you either provide an API Token in the highlighted field or just press the Generate button and we'll create one for you.\n\n\nBase Path\n\uf0c1\n\n\nWe recommend you set the base path field for remote servers as \ndescribed here\n. This will be useful when using the \nPreview\n feature.\n\n\nThat's all you will need to do. You're now ready to deploy.\n\n\nGit target type\n\uf0c1\n\n\nThe Git target type allows you to deploy to any remote Git server. You supply the usual Git access details.\n\n\nIf you prefer, you can deploy to any remote Git server using the command line. Simply \naccess your Box Terminal\n.\n\n\nExisting Remote\n\uf0c1\n\n\nIf you imported your project from a remote Git repo or used \ngit add remote\n from the command line, you will see existing remotes listed in the \nRemote\n dropdown box and you can select it.\n\n\nAdding a Remote\n\uf0c1\n\n\nYou can add a new remote by selecting \nAdd remote ...\n from the dropdown. You can then enter your remote details.\n\n\nCommitted Files\n\uf0c1\n\n\nCodio will only do the equivalent of \ngit push remote-name current-branch\n and so you need to have staged and committed your files first from the Command Line.\n\n\nDeployment history\n\uf0c1\n\n\nEach time you do a deploy, a history entry is created so you have a full record of deploys and who did them.\n\n\n\n\nIf you have not selected any specific targets, then all deploys across all targets will be shown. If you select the history button for a specific target, then the history for that specific target is shown.\n\n\nDeploying specific files \n folders\n\uf0c1\n\n\nIf you are using a 3rd party hosting provider that does not support RSYNC (the recommended approach), then you can avoid Codio deploying your entire project by only deploying the files or folders that you specify.\n\n\nSelect any files and folders from the file tree and then use the right-click menu to deploy them.\n\n\n\n\nAll defined deployment targets will be listed in the submenu. Click the target you want to deploy to.", 
            "title": "Deployment"
        }, 
        {
            "location": "/project/ide/tools/deployment/#createmanage-a-target", 
            "text": "The Manage Targets options are accessed via  Tools   Deployment   Manage Targets  menu. All Deployment dialogs will be displayed in the currently active  Panel .  If you have not yet created any deployment targets then you will be prompted to create one.   In the Deployment Targets dialog, you can:   list all defined deployment targets  modify existing targets  create new targets", 
            "title": "Create/manage a target"
        }, 
        {
            "location": "/project/ide/tools/deployment/#destination", 
            "text": "The Destination drop down specifies the type of the target you are deploying to. Currently we support the following destinations (click on each one to find out about its associated parameters)   FTP  RYSNC  SFTP  Nodejitsu  Git", 
            "title": "Destination"
        }, 
        {
            "location": "/project/ide/tools/deployment/#base-path-field", 
            "text": "You will notice that all deployment targets, except Codio, have a  Preview Base Path  field.   It is important to complete this field for all target types involving remote servers so that the Preview option knows how to access your project once deployed.  For example, you might deploy to a remote server at a folder location  /home/fmay/www . Accessing this application via a browser, however, depends on how you configure your remote web server.  So it could be  http://123.456.789  or  fmay.mydomain.com  is the correct location.  Please see the  Preview  section for more information.", 
            "title": "Base path field"
        }, 
        {
            "location": "/project/ide/tools/deployment/#public-keys-for-remote-servers", 
            "text": "When you are setting up a remote server, Codio can automatically install the Codio public key on your remote server, which saves a tedious manual process.   You can copy a key from the  Codio   Account  dialog as  described here  You can set up an SSH Connection and use the  Connection Manger  to do the same thing.", 
            "title": "Public keys for remote servers"
        }, 
        {
            "location": "/project/ide/tools/deployment/#terminal-access-to-remotes", 
            "text": "If you are working with remote servers, you may find it useful to be able to SSH into your remote server.  Codio supports the ability to open an SSH terminal in a Codio tab.  Click here  for further details.", 
            "title": "Terminal access to remotes"
        }, 
        {
            "location": "/project/ide/tools/deployment/#deploying-to-a-target", 
            "text": "There are three ways to deploy projects.", 
            "title": "Deploying to a target"
        }, 
        {
            "location": "/project/ide/tools/deployment/#tools-deployment-deploy-menu", 
            "text": "This let's you deploy to any of your deployment targets you created in  Manage Targets . You are shown a log if any errors occur.", 
            "title": "Tools-&gt;Deployment-&gt;Deploy menu"
        }, 
        {
            "location": "/project/ide/tools/deployment/#right-click-in-the-file-tree", 
            "text": "You can deploy an individual file or folder by right-clicking in the file tree.", 
            "title": "Right Click in the file tree"
        }, 
        {
            "location": "/project/ide/tools/deployment/#command-line", 
            "text": "You can use the command line directly but you can also add your custom deployment actions by  modifying the Run Menu .", 
            "title": "Command Line"
        }, 
        {
            "location": "/project/ide/tools/deployment/#rsync-target-type", 
            "text": "Rsync is a great way of working with remote servers. It behaves much the same as the SFTP deployment type but rather than deploying all files, it deploys only files that have changed.  You can use a password and/or a public key for authentication.", 
            "title": "Rsync target type"
        }, 
        {
            "location": "/project/ide/tools/deployment/#base-path", 
            "text": "We recommend you set the base path field for remote servers as  described here . This will be useful when using the  Preview  feature.", 
            "title": "Base Path"
        }, 
        {
            "location": "/project/ide/tools/deployment/#public-key-authentication", 
            "text": "Codio auto-generates a public key that is uniquely associated with your user account. You can find this public key in the  User Settings dialog . You should make sure that this public key is added to your remote server.", 
            "title": "Public Key Authentication"
        }, 
        {
            "location": "/project/ide/tools/deployment/#protocol", 
            "text": "There are two options available   SSH  : (recommended) uses an SSH connection to transfer  RSYNC Daemon  : this requires you to set up an rsync daemon on the remote server. This is a more complex procedure and so should generally be avoided.", 
            "title": "Protocol"
        }, 
        {
            "location": "/project/ide/tools/deployment/#specifying-a-port", 
            "text": "If you want to override the default SFTP port (22) then you can add the port number to the domain name as shown below  mydomain.com:1234", 
            "title": "Specifying a Port"
        }, 
        {
            "location": "/project/ide/tools/deployment/#user-name", 
            "text": "You will need to supply a valid user name for your remote server regardless of the authentication method.", 
            "title": "User Name"
        }, 
        {
            "location": "/project/ide/tools/deployment/#password-authentication", 
            "text": "If you are using a public key then you can leave the password field empty.  If you do not want to use a public key, then you will need to use a password for authentication. Simply provide the details in the Codio dialog.", 
            "title": "Password Authentication"
        }, 
        {
            "location": "/project/ide/tools/deployment/#delete-missing-folders", 
            "text": "This removes any folders from the remote server that are not present in the Codio project.", 
            "title": "Delete Missing Folders"
        }, 
        {
            "location": "/project/ide/tools/deployment/#ftp-target-type", 
            "text": "The FTP target type allows you to deploy to any FTP server. You supply the usual FTP access details.", 
            "title": "FTP target type"
        }, 
        {
            "location": "/project/ide/tools/deployment/#base-path_1", 
            "text": "We recommend you set the base path field for remote servers as  described here . This will be useful when using the  Preview  feature.", 
            "title": "Base Path"
        }, 
        {
            "location": "/project/ide/tools/deployment/#specifying-a-port_1", 
            "text": "If you want to override the default FTP port (21) then you can add the port number to the domain name as shown below  mydomain.com:1234", 
            "title": "Specifying a Port"
        }, 
        {
            "location": "/project/ide/tools/deployment/#transfer-mode", 
            "text": "FTP can operate in 'Active' or 'Passive' mode. Codio will attempt to connect in passive mode by default. If it fails, then it will automatically try active mode. If that fails then you will get an error.  However, if you get an error then try changing the setting to Active. This will ensure that Codio will only try to connect in active mode without a risk of confusing the target server.", 
            "title": "Transfer Mode"
        }, 
        {
            "location": "/project/ide/tools/deployment/#sftp-target-type", 
            "text": "The SFTP target type allows you to deploy to any SFTP server. You can use a password and/or a public key for authentication.", 
            "title": "SFTP target type"
        }, 
        {
            "location": "/project/ide/tools/deployment/#base-path_2", 
            "text": "We recommend you set the base path field for remote servers as  described here . This will be useful when using the  Preview  feature.", 
            "title": "Base Path"
        }, 
        {
            "location": "/project/ide/tools/deployment/#public-key-authentication_1", 
            "text": "Codio auto-generates a public key that is uniquely associated with your user account. You can find this public key in the  User Settings dialog . You should make sure that this public key is added to your remote server.", 
            "title": "Public Key Authentication"
        }, 
        {
            "location": "/project/ide/tools/deployment/#specifying-a-port_2", 
            "text": "If you want to override the default SFTP port (22) then you can add the port number to the domain name as shown below  mydomain.com:1234", 
            "title": "Specifying a Port"
        }, 
        {
            "location": "/project/ide/tools/deployment/#user-name_1", 
            "text": "You will need to supply a valid user name for your remote server regardless of the authentication method.", 
            "title": "User Name"
        }, 
        {
            "location": "/project/ide/tools/deployment/#password-authentication_1", 
            "text": "If you are using a public key then you can leave the password field empty.  If you do not want to use a public key, then you will need to use a password for authentication. Simply provide the details in the Codio dialog. You can use both a public key and a password if you like.", 
            "title": "Password Authentication"
        }, 
        {
            "location": "/project/ide/tools/deployment/#empty-destination-path", 
            "text": "Be very careful when checking this box. It will brutally remove all content from specified location on the remote server before the deploy starts.", 
            "title": "Empty Destination Path"
        }, 
        {
            "location": "/project/ide/tools/deployment/#nodejitsu-target-type", 
            "text": "Nodejitsu  is a high quality third party Node.js production platform, so we built a dedicated deployment target that makes life as easy as possible.  You will need to sign up for a Nodejitsu account before you use it.   Select Nodejitsu from the Destination drop down and then make sure you either provide an API Token in the highlighted field or just press the Generate button and we'll create one for you.", 
            "title": "Nodejitsu target type"
        }, 
        {
            "location": "/project/ide/tools/deployment/#base-path_3", 
            "text": "We recommend you set the base path field for remote servers as  described here . This will be useful when using the  Preview  feature.  That's all you will need to do. You're now ready to deploy.", 
            "title": "Base Path"
        }, 
        {
            "location": "/project/ide/tools/deployment/#git-target-type", 
            "text": "The Git target type allows you to deploy to any remote Git server. You supply the usual Git access details.  If you prefer, you can deploy to any remote Git server using the command line. Simply  access your Box Terminal .", 
            "title": "Git target type"
        }, 
        {
            "location": "/project/ide/tools/deployment/#existing-remote", 
            "text": "If you imported your project from a remote Git repo or used  git add remote  from the command line, you will see existing remotes listed in the  Remote  dropdown box and you can select it.", 
            "title": "Existing Remote"
        }, 
        {
            "location": "/project/ide/tools/deployment/#adding-a-remote", 
            "text": "You can add a new remote by selecting  Add remote ...  from the dropdown. You can then enter your remote details.", 
            "title": "Adding a Remote"
        }, 
        {
            "location": "/project/ide/tools/deployment/#committed-files", 
            "text": "Codio will only do the equivalent of  git push remote-name current-branch  and so you need to have staged and committed your files first from the Command Line.", 
            "title": "Committed Files"
        }, 
        {
            "location": "/project/ide/tools/deployment/#deployment-history", 
            "text": "Each time you do a deploy, a history entry is created so you have a full record of deploys and who did them.   If you have not selected any specific targets, then all deploys across all targets will be shown. If you select the history button for a specific target, then the history for that specific target is shown.", 
            "title": "Deployment history"
        }, 
        {
            "location": "/project/ide/tools/deployment/#deploying-specific-files-folders", 
            "text": "If you are using a 3rd party hosting provider that does not support RSYNC (the recommended approach), then you can avoid Codio deploying your entire project by only deploying the files or folders that you specify.  Select any files and folders from the file tree and then use the right-click menu to deploy them.   All defined deployment targets will be listed in the submenu. Click the target you want to deploy to.", 
            "title": "Deploying specific files &amp; folders"
        }, 
        {
            "location": "/project/ide/tools/guides/", 
            "text": "Codio Guide is our tutorial authoring tool. \nClick here\n for more information.", 
            "title": "Guides"
        }, 
        {
            "location": "/project/ide/tools/phonegap/", 
            "text": "You access Codio's \nPhonegap:Build\n features from the \nTools-\nPhonegap\n menu.\n\n\nOur Phonegap support provides a comfortable integration with Adobe's Phonegap Build platform. You should first create an account at \nhttp://build.phonegap.com\n.\n\n\nNote:\n At the time of writing, the \nPhoneGap:Build\n free plan supports a maximum project size of 50MB and 1000MB or 1GB for paid plans. Account plan details can be found \nhere\n.\n\n\nAuthentication\n\uf0c1\n\n\nTo access Phonegap:Build from Codio you should set up an Authentication token. This is available in your Phonegap:Build account.\n\n\nGo to your Phonegap \naccount details\n and select the \nClient Application\n tab. If you do not see an authentication token, click \nReset\n to obtain one.\n\n\n\n\nIn Codio, select the \nChange Token\n button and paste in your key.\n\n\n\n\nThe config.xml file\n\uf0c1\n\n\nTo build apps at Phonegap:Build, a \nconfig.xml\n file is required in the root of your project. If one does not yet exist, Codio will ask if you want to create one.\n\n\n\n\nThis will create a default file for you and associated image resources for Splash Screen and Icon images in \npg-images\n folder.\n\n\nYour \nconfig.xml\n needs to contain specific lines for each platform you want to target. For example, to build for iOS, Android and Windows Phone you need to include\n\n\ngap:platforms\n\n    \ngap:platform name=\nios\n /\n\n    \ngap:platform name=\nandroid\n /\n\n    \ngap:platform name=\nwinphone\n /\n\n\n/gap:platforms\n\n\n\n\n\nIf you only want to build for one platform (for example Android) you would only need to include\n\n\ngap:platforms\n\n    \ngap:platform name=\nandroid\n /\n\n\n/gap:platforms\n\n\n\n\n\nUseful resources and references for the config.xml file can be found on the Phonegap site:\n\n\n\n\nconfig.xml\n\n\nCustom preferences\n\n\nIcons and Splash Screens\n\n\nPhonegap:Build plugins\n\n\n\n\nBuild\n\uf0c1\n\n\nWhen you are ready to build your app, you press the \nBuild\n button in the Phonegap Build Area section. Make sure you have \ncreated and configured your \nconfig.xml\n file\n.\n\n\nYou should have set up your code signing keys in your Phonegap:Build account (more on keys below) and you should select which keys you wish to use for each platform you defined in your \ngap:platforms\n tag in the \nconfig.xml\n file.\n\n\nKeys are configured from the \nAccount \n Edit Setting \n Signing Keys\n tab in your Phonegap:Build account.\n\n\n\n\nA bit about Keys\n\uf0c1\n\n\nPhonegap has very good documentation on how to generate your keys as well as how to configure your Phonegap:Build account.\n\n\n\n\nAndroid\n\n\niOS\n\n\n\n\nNote If you do not see anything in the \nKeys\n area, review your \ngap:platforms\n content in the config.xml file\n\n\nAndroid\n\uf0c1\n\n\nTo build and test, you don't need to do anything. You can leave the field empty . If you want to deploy a codesigned App, (which you will need to deploy via Google Play) then you need to generate a proper Certificate.\n\n\niOS\n\uf0c1\n\n\nApple requires both a Codesigning Certificate and a Mobile Provisioning Profile. You need different ones for development and for App Store deployment.\n\n\nWindows\n\uf0c1\n\n\nWindows does not require any certificates to build.\n\n\nBuild Settings\n\uf0c1\n\n\nPrivate Application\n\uf0c1\n\n\nDepending on the Phonegap:Build account plan you have, you can build a number of private applications. Check this box if you want to build as a private application. See \nhere\n for more information on Phonegap:Build plans\n\n\nEnable Debug\n\uf0c1\n\n\nChecking this box enables Phonegap Build debugging to allow you to use standard Web Inspector tools available from the PhoneGap Build site to debug PhoneGap apps while they are running on your device.\n\n\nFor more information on this see \nRemote Debugging Tools\n\n\nEnable Hydrates\n\uf0c1\n\n\nChecking this box enables Phonegap:Build Hydration. Hydration is a tool that has two main benefits:\n\n\n\n\nCompilation times are improved significantly.\n\n\nUpdates are pushed directly to the application installed on a device.\n\n\n\n\nFor more information on this see \nHydration\n\n\nInitiate Build\n\uf0c1\n\n\nWhen you have selected keys and any settings, simply press the Build button. Codio now passes all information through to the Phonegap:Build platform, where the build is run in the background.\n\n\nIf the status does not complete in a reasonable time, you can do one of the following\n\n\n\n\ngo to your Phonegap:Build account and click the main Apps tab, where you should see your app and its status\n\n\ncheck the status of the Phonegap:Build service \nhere\n\n\n\n\nDownload your App\n\uf0c1\n\n\nWhen the build is completed you can deploy the app to your device in the following ways.\n\n\n\n\ndownload the native file and manually upload to your device\n\n\nscan the QR code to download from Phonegap:Build to your device", 
            "title": "Phonegap"
        }, 
        {
            "location": "/project/ide/tools/phonegap/#authentication", 
            "text": "To access Phonegap:Build from Codio you should set up an Authentication token. This is available in your Phonegap:Build account.  Go to your Phonegap  account details  and select the  Client Application  tab. If you do not see an authentication token, click  Reset  to obtain one.   In Codio, select the  Change Token  button and paste in your key.", 
            "title": "Authentication"
        }, 
        {
            "location": "/project/ide/tools/phonegap/#the-configxml-file", 
            "text": "To build apps at Phonegap:Build, a  config.xml  file is required in the root of your project. If one does not yet exist, Codio will ask if you want to create one.   This will create a default file for you and associated image resources for Splash Screen and Icon images in  pg-images  folder.  Your  config.xml  needs to contain specific lines for each platform you want to target. For example, to build for iOS, Android and Windows Phone you need to include  gap:platforms \n     gap:platform name= ios  / \n     gap:platform name= android  / \n     gap:platform name= winphone  /  /gap:platforms   If you only want to build for one platform (for example Android) you would only need to include  gap:platforms \n     gap:platform name= android  /  /gap:platforms   Useful resources and references for the config.xml file can be found on the Phonegap site:   config.xml  Custom preferences  Icons and Splash Screens  Phonegap:Build plugins", 
            "title": "The config.xml file"
        }, 
        {
            "location": "/project/ide/tools/phonegap/#build", 
            "text": "When you are ready to build your app, you press the  Build  button in the Phonegap Build Area section. Make sure you have  created and configured your  config.xml  file .  You should have set up your code signing keys in your Phonegap:Build account (more on keys below) and you should select which keys you wish to use for each platform you defined in your  gap:platforms  tag in the  config.xml  file.  Keys are configured from the  Account   Edit Setting   Signing Keys  tab in your Phonegap:Build account.", 
            "title": "Build"
        }, 
        {
            "location": "/project/ide/tools/phonegap/#a-bit-about-keys", 
            "text": "Phonegap has very good documentation on how to generate your keys as well as how to configure your Phonegap:Build account.   Android  iOS   Note If you do not see anything in the  Keys  area, review your  gap:platforms  content in the config.xml file", 
            "title": "A bit about Keys"
        }, 
        {
            "location": "/project/ide/tools/phonegap/#android", 
            "text": "To build and test, you don't need to do anything. You can leave the field empty . If you want to deploy a codesigned App, (which you will need to deploy via Google Play) then you need to generate a proper Certificate.", 
            "title": "Android"
        }, 
        {
            "location": "/project/ide/tools/phonegap/#ios", 
            "text": "Apple requires both a Codesigning Certificate and a Mobile Provisioning Profile. You need different ones for development and for App Store deployment.", 
            "title": "iOS"
        }, 
        {
            "location": "/project/ide/tools/phonegap/#windows", 
            "text": "Windows does not require any certificates to build.", 
            "title": "Windows"
        }, 
        {
            "location": "/project/ide/tools/phonegap/#build-settings", 
            "text": "", 
            "title": "Build Settings"
        }, 
        {
            "location": "/project/ide/tools/phonegap/#private-application", 
            "text": "Depending on the Phonegap:Build account plan you have, you can build a number of private applications. Check this box if you want to build as a private application. See  here  for more information on Phonegap:Build plans", 
            "title": "Private Application"
        }, 
        {
            "location": "/project/ide/tools/phonegap/#enable-debug", 
            "text": "Checking this box enables Phonegap Build debugging to allow you to use standard Web Inspector tools available from the PhoneGap Build site to debug PhoneGap apps while they are running on your device.  For more information on this see  Remote Debugging Tools", 
            "title": "Enable Debug"
        }, 
        {
            "location": "/project/ide/tools/phonegap/#enable-hydrates", 
            "text": "Checking this box enables Phonegap:Build Hydration. Hydration is a tool that has two main benefits:   Compilation times are improved significantly.  Updates are pushed directly to the application installed on a device.   For more information on this see  Hydration", 
            "title": "Enable Hydrates"
        }, 
        {
            "location": "/project/ide/tools/phonegap/#initiate-build", 
            "text": "When you have selected keys and any settings, simply press the Build button. Codio now passes all information through to the Phonegap:Build platform, where the build is run in the background.  If the status does not complete in a reasonable time, you can do one of the following   go to your Phonegap:Build account and click the main Apps tab, where you should see your app and its status  check the status of the Phonegap:Build service  here", 
            "title": "Initiate Build"
        }, 
        {
            "location": "/project/ide/tools/phonegap/#download-your-app", 
            "text": "When the build is completed you can deploy the app to your device in the following ways.   download the native file and manually upload to your device  scan the QR code to download from Phonegap:Build to your device", 
            "title": "Download your App"
        }, 
        {
            "location": "/project/ide/tools/ssh/", 
            "text": "Important\n : if you are looking for information on how to connect to your project 'Box' using the terminal/console window, then please \nread about Boxes\n.\n\n\n\n\nCodio provides the ability to connect to remote servers via SSH. You can open multiple connections and manage connections through the \nSSH Connection Manager\n.\n\n\nA \nQuick Connect\n option lets you access remote servers on an ad hoc basis. The SSH Connection Manager lets you store connections for quick access later.\n\n\nYou can do the same things you can do in a regular terminal window, including running text editors like Nano etc.\n\n\nCopy \n Paste operations\n\uf0c1\n\n\nBehavior varies between Macs and other operating systems. Using the right-click menu should work on all systems.\n\n\nMac\n\uf0c1\n\n\nCopy and paste both works as expected with \ncmd+c\n and \ncmd+v\n.\n\n\nWindows, Linux\n\uf0c1\n\n\nPasting is done as expected with \nctrl+v\n but copying (\nctrl+c\n) cannot be done as it conflicts with the \nkill process\n command, so you should use the right-click menu.\n\n\nSSH connection manager\n\uf0c1\n\n\nYou can manage your SSH connections by going to the \nTools \n SSH \n Connection Manager\n menu item. The Connection Manager lists all previously created connections, which you can then connect to or edit.\n\n\n\nCreating and Editing Connections\n\uf0c1\n\n\nPress the Create New button to create a new connection or the pencil icon to edit an existing connection.\n\n\nYou enter the remote server credentials : user name, hostname and optionally port. You can also specify a friendly name that will appear in the connections list.\n\n\n\n\nPublic Keys\n\uf0c1\n\n\nIf you want to add your Codio public key to the remote server, press the key icon in the main Connection Manager listing. This saves you from having to upload a public key manually and means you won't need to enter a password to authenticate.\n\n\nIf you do want to add your public key manually, please refer to the \nCodio public key\n documentation.\n\n\nMaking a connection\n\uf0c1\n\n\nTo make a connection, you click on the leftmost icon, which opens the connection in a new tab.\n\n\nQuick connect\n\uf0c1\n\n\nThe Quick Connect Option (\nTools \n SSH \n Quick Connect\n) lets you access remote servers on an ad hoc basis. You just enter the remote server credentials : user name, hostname and optionally port.\n\n\nSpecify a friendly name if you want to save the connection details.\n\n\n\n\nIf you do not want to install a public key remotely, then Codio will connect to the remote server, which will prompt you for a password.\n\n\nConnect\n\uf0c1\n\n\nWhen you press Connect, a tab will open up in the current panel and off you go. The connection details will not be saved.\n\n\nConnect \n Save\n\uf0c1\n\n\nThis connects but also saves the connection details to the \nSSH Connection Manager\n.\n\n\nPublic Keys\n\uf0c1\n\n\nIf you want to add your Codio public key to the remote server, then you should Connect \n Save. Then go to the SSH Connection Manager and press the public key button as \ndescribed here\n.", 
            "title": "Remote SSH Terminal Access"
        }, 
        {
            "location": "/project/ide/tools/ssh/#copy-paste-operations", 
            "text": "Behavior varies between Macs and other operating systems. Using the right-click menu should work on all systems.", 
            "title": "Copy &amp; Paste operations"
        }, 
        {
            "location": "/project/ide/tools/ssh/#mac", 
            "text": "Copy and paste both works as expected with  cmd+c  and  cmd+v .", 
            "title": "Mac"
        }, 
        {
            "location": "/project/ide/tools/ssh/#windows-linux", 
            "text": "Pasting is done as expected with  ctrl+v  but copying ( ctrl+c ) cannot be done as it conflicts with the  kill process  command, so you should use the right-click menu.", 
            "title": "Windows, Linux"
        }, 
        {
            "location": "/project/ide/tools/ssh/#ssh-connection-manager", 
            "text": "You can manage your SSH connections by going to the  Tools   SSH   Connection Manager  menu item. The Connection Manager lists all previously created connections, which you can then connect to or edit.", 
            "title": "SSH connection manager"
        }, 
        {
            "location": "/project/ide/tools/ssh/#creating-and-editing-connections", 
            "text": "Press the Create New button to create a new connection or the pencil icon to edit an existing connection.  You enter the remote server credentials : user name, hostname and optionally port. You can also specify a friendly name that will appear in the connections list.", 
            "title": "Creating and Editing Connections"
        }, 
        {
            "location": "/project/ide/tools/ssh/#public-keys", 
            "text": "If you want to add your Codio public key to the remote server, press the key icon in the main Connection Manager listing. This saves you from having to upload a public key manually and means you won't need to enter a password to authenticate.  If you do want to add your public key manually, please refer to the  Codio public key  documentation.", 
            "title": "Public Keys"
        }, 
        {
            "location": "/project/ide/tools/ssh/#making-a-connection", 
            "text": "To make a connection, you click on the leftmost icon, which opens the connection in a new tab.", 
            "title": "Making a connection"
        }, 
        {
            "location": "/project/ide/tools/ssh/#quick-connect", 
            "text": "The Quick Connect Option ( Tools   SSH   Quick Connect ) lets you access remote servers on an ad hoc basis. You just enter the remote server credentials : user name, hostname and optionally port.  Specify a friendly name if you want to save the connection details.   If you do not want to install a public key remotely, then Codio will connect to the remote server, which will prompt you for a password.", 
            "title": "Quick connect"
        }, 
        {
            "location": "/project/ide/tools/ssh/#connect", 
            "text": "When you press Connect, a tab will open up in the current panel and off you go. The connection details will not be saved.", 
            "title": "Connect"
        }, 
        {
            "location": "/project/ide/tools/ssh/#connect-save", 
            "text": "This connects but also saves the connection details to the  SSH Connection Manager .", 
            "title": "Connect &amp; Save"
        }, 
        {
            "location": "/project/ide/tools/ssh/#public-keys_1", 
            "text": "If you want to add your Codio public key to the remote server, then you should Connect   Save. Then go to the SSH Connection Manager and press the public key button as  described here .", 
            "title": "Public Keys"
        }, 
        {
            "location": "/resources/changelog/", 
            "text": "This page contains a list of recent updates made to the Codio platform. We update Codio regularly, so this page should provide information to help you.\n\n\nWe do not report small bug fixes or issues that affect individual users, who we will notify directly.\n\n\n[I]\n = Update or improvement\n\n[F]\n = New feature\n\n\nNovember 2019\n\n\n\n\n[I] [22nd]\n: Improve visibility of assessment id to list of assessments\n\n\n[I] [21st]\n: Fix problem uploading images to stacks/packs/units/books/course/modules\n\n\n[I] [19th]\n: Fix problem with assessment button not showing\n\n\n[F] [17th]\n: Add support for \nLTI 1.3\n integration\n\n\n[I] [11th]\n: Fix problem connecting to BitBucket repo's\n\n\n[I] [06th]\n: Update messaging when unable to publish jupyter based units\n\n\n[I] [05th]\n: Update handling of users signing up through LMS\n\n\n\n\nOctober 2019\n\n\n\n\n[F] [16th]\n: Add function to allow \nClasses\n to be sorted by begin date of class\n\n\n[I] [02nd]\n: Fix problem with AOB allocation for self pay organisations\n\n\n\n\nSeptember 2019\n\n\n\n\n[I] [27th]\n: Improve handling of autograde scripts for large units\n\n\n[I] [24th]\n: Improve accessibility function in Find panel\n\n\n[I] [19th]\n: Fix problem opening files in same tab as guides\n\n\n[I] [11th]\n: Fix problem with SSH connections\n\n\n[I] [09th]\n: Fix problem with handling of answer/rationale for free text assessment\n\n\n[F] [04th]\n: Add support for the standard input when \ndebugging\n C/C++, node.js and GDB programs.\n\n\n\n\nAugust 2019\n\n\n\n\n[I] [29th]\n: Fix problem with marking units as completed\n\n\n[I] [28th]\n: Update handling of grade book comments\n\n\n[I] [28th]\n: Improve stack creation when creating from an older stack\n\n\n[F] [28th]\n: Add \nCodio Global Assessment library\n\n\n[I] [27th]\n: Add hint to student tab in classes for number of students\n\n\n[I] [27th]\n: Update handling of answer/rationale showing for students\n\n\n[F] [20th]\n: Add \nAssessments Library\n to allow sharing of assessments\n\n\n[I] [15th]\n: Fix issue with navigation after searching in guides\n\n\n[F] [15th]\n: Add support for self pay students to purchase through institutions \nbookstores\n\n\n[I] [09th]\n: Fix problem accessing projects in 'Shared with Me' area\n\n\n[I] [02nd]\n: Fix problem deleting modules in course\n\n\n\n\nJuly 2019\n\n\n\n\n[I] [31st]\n: Update handling of \nviewing Git repo's\n in Codio account\n\n\n[I] [30th]\n: Add \ncurrentPage\n and \ntotalNumberofPages\n parameters for \ncustom scripts\n\n\n[I] [30th]\n: Fix problem with contact URL settings in IDE chat area\n\n\n[I] [29th]\n: Fix issue with sorting of new classes being added\n\n\n[I] [25th]\n: Fix issue with guides section list not correctly showing for completed unit\n\n\n[I] [23rd]\n: Fix problem with focus on guides pages\n\n\n[I] [23rd]\n: Redesign dialog pages for \nassessments\n\n\n[I] [19th]\n: Add user cues when using \ngit remote\n\n\n[I] [11th]\n: Improve handling of long class names\n\n\n[I] [11th]\n: Fix problem with \ncolor picker\n\n\n[I] [02nd]\n: Update Class Dashboard pages and other menus for better accessibility\n\n\n\n\nJune 2019\n\n\n\n\n[I] [19th]\n: Update Dashboard pages for better accessibility\n\n\n[I] [17th]\n: Improve handling of publication of large units\n\n\n[I] [11th]\n: Fix issue with showing/hiding folders in guides\n\n\n\n\nMay 2019\n\n\n\n\n[I] [17th]\n: Fix guides navigation problem causing layout to be incorrect\n\n\n[I] [07th]\n: Fix issue with library path not saving correctly in JUnit settings\n\n\n[I] [07th]\n: Fix issue with \ndebugger\n with Node 11\n\n\n[F] [06th]\n: Add additional configuration options for \nnbgrader/jupyter\n units\n\n\n[I] [03rd]\n: Improve handling of autograder custom scripts\n\n\n\n\nApril 2019\n\n\n\n\n[I] [30th]\n: Add \npython working directory\n parameter for \nAdvanced Code Test\n to support python unit tests running from dot folders\n\n\n[I] [23rd]\n: Update clike codemirror plugin for better handling of objective c files\n\n\n[I] [23rd]\n: Fix layout problem for pull/push buttons in desktop app\n\n\n[I] [23rd]\n: Fix problem with updating Jupyter Notebook units to a class\n\n\n[I] [22nd]\n: Improve layout of private/public icon in class\n\n\n[I] [18th]\n: Fix problem with autograde scripts where units are read only\n\n\n[F] [18th]\n: Add support to extend timeout for \nnbgrader/jupyter\n units\n\n\n[I] [17th]\n: Improve messaging where assessment submissions unable to complete correctly\n\n\n[I] [17th]\n: Improve handling of code assessment submissions files\n\n\n[I] [16th]\n: Update handling of test students to show correct class logged into\n\n\n[I] [15th]\n: Fix problem with handling of grading templates for class units\n\n\n[I] [ 9th]\n: Fix problem with changing theme in guides\n\n\n[I] [10th]\n: Remove grading button when unit is \nopened as teacher\n\n\n[I] [10th]\n: Fix problem with saving panel layout on submission\n\n\n[F] [10th]\n: Add support for \nsecure assessment script execution\n\n\n[I] [10th]\n: Improve handling of copying links/tokens to show confirmation\n\n\n[F] [10th]\n: Add assessment attempts count into \ndownload csv\n files\n\n\n[I] [10th]\n: Fix problem with partial points for advanced code test not showing correctly in dashboard\n\n\n[F] [10th]\n: Add \ncustom script\n to allow third-party systems to track/help students.\n\n\n[I] [ 9th]\n: Improve standard code feedback field text handling\n\n\n[I] [ 9th]\n: Fix problem with changing theme in guides\n\n\n[F] [ 9th]\n: Add \nsense.network\n assessment to offer feedbackdback to students on code submissions\n\n\n[I] [ 7th]\n: Improve visibility of keyboard focus\n\n\n[I] [ 7th]\n: Change wording \nUpgrade\n to \nUpdate\n for consistency of language\n\n\n[F] [ 6th]\n: Add ability to \nexclude files\n from students units in a class\n\n\n[I] [ 4th]\n: Update handling of teacher only pages in books\n\n\n\n\nMarch 2019\n\n\n\n\n[F] [31st]\n: Empty Stack set to use Ubuntu 18.04.\n\n\n[F] [29th]\n: Add ability to \nclone class\n from main class dashboard\n\n\n[I] [27th]\n: Fix terminal scrolling problem when unit run in iframe\n\n\n[I] [26th]\n: Update messaging to students marking units as completed\n\n\n[I] [26th]\n: Minor \ndashboard\n text changes\n\n\n[I] [22nd]\n: Fix problem with handling of read only projects where external services are used (e.g. Jupyter/RStudio)\n\n\n[I] [21st]\n: Fix problem with storage of guides layout settings in units\n\n\n[I] [20th]\n: Improve handling of adding teachers to class\n\n\n[I] [19th]\n: Fix problem with teachers not able to access students projects after deadline passed\n\n\n[I] [15th]\n: Fix problem for student feedback when unit running in iframe\n\n\n[I] [15th]\n: Fix issue with students able to start units after deadline is past\n\n\n[I] [15th]\n: Remove menu item \"Submit Jupyter assessments\" from jupyter units\n\n\n[I] [14th]\n: Improve handling of test autograde script\n\n\n[F] [11th]\n: Improve \norganisation\n and \nclass\n contact url for students, allowing multiple contact urls to be defined.\n\n\n[I] [ 7th]\n: Improve layout for unit penalty screen\n\n\n[F] [ 7th]\n: Add \nEducation\nValidate Jupyter\n menu item to allow authors to validate and check Jupyter projects before publishing\n\n\n[I] [ 7th]\n: Update guides page navigation handing to mitigate content synchronisation issues\n\n\n[I] [ 6th]\n: Improve handling of submit jupyter assessments button\n\n\n[I] [ 6th]\n: Fix issue with show expected answer in html pages\n\n\n[I] [ 5th]\n: Improve validation to detect errors better in .codio-menu file\n\n\n[I] [ 4th]\n: Fix issue with symbols used in guides TOC\n\n\n[I] [ 4th]\n: Fix problem with Tools\nGuides\nRemotes menu item\n\n\n[F] [ 4th]\n: Add support to provide additional feedback to students when test fails in \nstandard code test\n\n\n[I] [ 1st]\n: Improve messaging when stack used in class unit is deleted where unit was not re published\n\n\n\n\nFebruary 2019\n\n\n\n\n[I] [28th]\n: Fix issue in \nupgrade course\n where long names used in module and/or units\n\n\n[I] [28th]\n: Fix layout issue in \nstandard code test\n assessment in html type of page\n\n\n[I] [26th]\n: Improve messaging when connecting project in \ndesktop app\n\n\n[I] [26th]\n: Fix issue with Book permissions if a user is deleted\n\n\n[I] [26th]\n: Improve handling of redirection when unit run in LMS when students mark the unit as completed\n\n\n[I] [26th]\n: Add refresh button to \nvisualisation\n assessment\n\n\n[I] [26th]\n: Fix problem for students being unable to view the content of the unit when marked as complete and visibility set to read only\n\n\n[I] [26th]\n: Update Light reading theme drop down in guides \nglobal settings\n to read only\n\n\n[I] [26th]\n: Make course/module owner brighter\n\n\n[F] [25th]\n: Add \nvisualisation\n assessment support in \nguides\n\n\n[F] [21st]\n: Add support for promotion codes in \nSelf Invoicing\n\n\n[I] [20th]\n: Update handling of soft tabs for python that were not handling backspace and delete buttons actions correctly\n\n\n[I] [20th]\n: Improve messaging on stack version creation if user has no access\n\n\n[I] [19th]\n: Improve messaging when publishing unit in a module that the user hasn't previously opened\n\n\n[I] [18th]\n: Improve handling of \ncourse upgrade\n in class where there is a mix of public and private modules\n\n\n[I] [15th]\n: Enlarge size of confirmation dialogs text for better accessibility\n\n\n[I] [15th]\n: Remove \nproject settings\n from \ndesktop app\n\n\n[I] [15th]\n: Improve messaging display when invalid dates entered for a class\n\n\n[I] [15th]\n: Update \ndownload csv\n to remove data of students removed from the class\n\n\n[I] [15th]\n: Improve guides settings to save and close from one click\n\n\n[F] [15th]\n: Add new guides \nlayout\n including file tree with guides presented on the left hand side\n\n\n[F] [14th]\n: Add new assessment type: \nParson's puzzle\n\n\n[I] [12th]\n: Review button colours on Class Admin screen\n\n\n[I] [12th]\n: Fix problem with returned grade score for book based units\n\n\n[I] [12th]\n: Fix issue with one attempt only message for assessments showing incorrectly when not enabled\n\n\n[I] [12th]\n: Fix problem with dark theme in FF65 on MacOS\n\n\n[I] [11th]\n: Improve handling of invitation of teachers into classes\n\n\n[F] [ 6th]\n: Fix problem with exporting project as zip\n\n\n[I] [ 5th]\n: Increase inactive timeout period to 60mins\n\n\n[F] [ 4th]\n: Add course permissions feature to \nrestrict access\n to courses for teachers/students\n\n\n\n\nJanuary 2019\n\n\n\n\n[I] [30th]\n: Improve handling of project preview when waiting for services to start\n\n\n[F] [29th]\n: Add statistical collection for teachers/instructors to \nexport\n class activity\n\n\n[I] [25th]\n: Fix issue with changing stack in project\n\n\n[I] [25th]\n: Improve handling for Brightspace D2L integration where by if you have\n\nresource_link_id\nfield an endping URL of \nhttps://apollo.codio.com/lti/link_endpoint\n can be used\n\n\n[I] [24th]\n: Fix problem with unit ordering in course module when adding new units\n\n\n[I] [23rd]\n: Fix problem updating students units in class when archived\n\n\n[I] [23rd]\n: Fix problem with partial points implemented in \nAdvanced Code Test\n assessment\n\n\n[F] [21st]\n: Add new guides \nlayout\n for '3 panels without tree' with guides presented on the left hand side\n\n\n[I] [21st]\n: Fix problem with book settings not applied to class units\n\n\n[F] [18th]\n: Add ability to \nclone\n content of existing class into a new class\n\n\n[F] [18th]\n: Add new \nCustom Button\n function to all users to restore current files in guides\n\n\n[F] [17th]\n: Add new guides \nlayout\n for '2 panels without tree' with guides presented on the left hand side\n\n\n[F] [16th]\n: Add new \nglobal\n setting in guides to restrict students from opening/closing tabs in unit\n\n\n[I] [16th]\n: Fix problem with handling of .codiomenu on guides being closed\n\n\n[I] [16th]\n: Fix problem for self-pay students agreeing to \nStudent Consent\n\n\n[I] [11th]\n: Fix problem with grade feedback dialogs not opening for students\n\n\n[I] [ 8th]\n: Improve contrast colour for confirmation code dialogs\n\n\n[I] [ 8th]\n: Update \nRStudio\n stack to be loginless\n\n\n[I] [ 6th]\n: Improve handling of syncronisation in  \ndesktop app\n\n\n\n\nDecember 2018\n\n\n\n\n[I] [28th]\n: Improve accessibility handling of next/previous buttons in guides\n\n\n[I] [26th]\n: Improve handling of user authentication when allow private static preview is enabled\n\n\n[I] [24th]\n: Improve handling of .git folder if it is in .guides/secure folder\n\n\n[I] [17th]\n: Add setting to manage students access to project based units when \ncompleted\n\n\n[I] [14th]\n: Fix problem with \nevent listener\n\n\n[I] [14th]\n: Add jupyter preview to student's grade feedback preview\n\n\n[I] [14th]\n: Improve guides for visually impaired users\n\n\n[I] [14th]\n: Add additional fields for students answers into the \ndownload csv\n\n\n[I] [11th]\n: Improve handling of \ngigabox\n allocation when run from a course\n\n\n[I] [10th]\n: Fix problem with Advanced Code Test with Custom language type and Allow Partial Points\n\n\n[I] [ 7th]\n: Add answer and rationale fields to \ngrading feedback\n for student dashboard\n\n\n[I] [ 6th]\n: Fix problem with global scripts in guides\n\n\n[I] [ 5th]\n: Improve \ngrading feedback\n for student dashboard\n\n\n[I] [ 4th]\n: Improve messaging when synchronising of files pulled/pushed to \ndesktop app\n\n\n\n\nNovember 2018\n\n\n\n\n[F] [29th]\n: Add \ngrading feedback\n for student dashboard\n\n\n[F] [29th]\n: Pass \ngrading feedback URL\n to LMS systems\n\n\n[I] [29th]\n: Improve handling of line delimiters in .codio-menu file\n\n\n[I] [29th]\n: Improve synchronisation of files pulled/pushed to \ndesktop app\n\n\n[F] [22nd]\n: Allow files/folders to be excluded from synchronisation with \ndesktop app\n\n\n[I] [22nd]\n: Fix problem with \ncustomising\n in \nbooks\n\n\n[F] [22nd]\n: Add support for \npython3\n in unit tests\n\n\n[F] [21st]\n: Add separate fields for first and last name to \ndownload csv\n\n\n[I] [21st]\n: Fix problem with first time execution of advanced code test assessments\n\n\n[I] [20th]\n: Fix problem trying to start unit from a course\n\n\n[I] [16th]\n: Fix problem with delete confirmation dialog showing in error when deleting owned module\n\n\n[I] [15th]\n: Improve highlighting of differences in standard code text\n\n\n[I] [14th]\n: Improve sorting when accented characters used\n\n\n[I] [13th]\n: Fix problem with project permissions not updating when project renamed\n\n\n[I] [12th]\n: Update handling of autograde scripts in .guides/secure folder\n\n\n[I] [ 9th]\n: Improve handling of \nPublic/Private Settings\n\n\n[I] [ 9th]\n: Improve messaging for Allow Box Cloning\n\n\n[I] [ 8th]\n: Fix problem with scrolling in guides with assessments\n\n\n[I] [ 6th]\n: Fix problem with handling of spaces in \nStandard Code Test\n output\n\n\n[I] [ 6th]\n: Fix sorting of \nmodules\n\n\n[I] [ 6th]\n: Update message shown when units already graded by another teacher\n\n\n[F] [ 5th]\n: Add \nAutograde Free Text\n assessment\n\n\n\n\nOctober 2018\n\n\n\n\n[I] [31st]\n: Update guidelines for privacy settings for Safari 12.0 browser\n\n\n[I] [29th]\n: Fix problem accessing grading in students units\n\n\n[F] [29th]\n: Allow use of accented characters\n\n\n[I] [26th]\n: Fix issue with users able to update project settings when not having admin rights\n\n\n[I] [26th]\n: Improve handling of guide editor\n\n\n[I] [24th]\n: Fix focus problem when adding assessments to guides page\n\n\n[I] [24th]\n: Improve tab handling in pop up dialogs\n\n\n[I] [23rd]\n: Add function to hide Codio logo icone when \ncustomising\n top menus for students\n\n\n[I] [19th]\n: Fix rendering of bold text in guides for Firefox browser\n\n\n[I] [19th]\n: Fix problem using tabs in Firefox\n\n\n[F] [18th]\n: Add new user/project preference \nnavigateWithinSoftTabs\n to simplify navigation when soft tabs are used\n\n\n[I] [18th]\n: Fix problem with loss of focus when in split view mode editing guides\n\n\n[I] [18th]\n: Fix problem in guides saving close tab state\n\n\n[I] [18th]\n: Add text description that is visible on mouse over when the icon gets focus.\n\n\n[I] [18th]\n: Fix problem rendering output of code tests on Mac OS\n\n\n[I] [15th]\n: Fix problem unpacking projects\n\n\n[I] [15th]\n: Fix problem with page focus in guides\n\n\n[I] [15th]\n: Improve menu handling when \ncustomising\n top menus for students\n\n\n[F] [10th]\n: Add function to automatically release grades in new classes. See \norganisation release grades\n for more information\n\n\n[F] [ 9th]\n: Add ability to change all students completed unit to incomplete. See \nforce marked as complete\n for more information.\n\n\n[I] [ 3rd]\n: Fix problem when executing commands in \nGuides\n that contain brackets\n\n\n[F] [ 3rd]\n: Add \norganisation\n and \nclass\n contact url for students to be able to raise questions, seek assistance from your preferred area (forums/LMS discussion areas etc)\n\n\n[F] [ 3rd]\n: Add ability to sort students in classes by first or last names\n\n\n\n\nSeptember 2018\n\n\n\n\n[I] [30th]\n: Fix problem with \nMultiple Choice\n assessments not showing students correct answers on submission\n\n\n[I] [26th]\n: Fix layout of media page in guides settings\n\n\n[F] [26th]\n: Add feature for IDE top menu to be \ncustomised\n for student view when running guides\n\n\n[I] [24th]\n: Fix problem with \nSelf Invoicing\n\n\n[I] [24th]\n: Improve messaging of local file changes when disconnecting project in \ndesktop application\n\n\n[I] [20th]\n: Fix problem embedding content in \nCanvas\n\n\n[I] [20th]\n: Improve \ndownload csv\n content adding students email address\n\n\n[I] [20th]\n: Remove character limitation for \ngrading\n comments\n\n\n[I] [15th]\n: Improve \ndownload csv\n content, adding 2 new fields for Points and Max Points\n\n\n[I] [13th]\n: Fix problem for book based units when disabling units in class module\n\n\n[F] [13th]\n: Add ability for 'mark as completed' to be \ndisabled\n for individual units in classes\n\n\n[I] [12th]\n: Remove https preview warning to avoid confusion for students\n\n\n[I] [12th]\n: Improve handling of fullscreen button in frames\n\n\n[I] [12th]\n: Improve Usability handling in menus\n\n\n[I] [11th]\n: Fix problem with changing state of 'use submit buttons' setting in guides\n\n\n[I] [11th]\n: Fix problem when adding projects to module with reserved words\n\n\n[I] [10th]\n: Update explanatory text for Visibility Summary for Course and Modules\n\n\n[I] [10th]\n: Fix problem with Guides Table of Contents\n\n\n[I] [10th]\n: Improve handling of LTI full screen support\n\n\n[I] [10th]\n: Improve handling of empty points field in Grade book assessment\n\n\n[I] [ 5th]\n: Add example bash script for \nautograding on completion\n\n\n[I] [ 5th]\n: Improve handling of duplicate file warning\n\n\n[I] [ 4th]\n: Improve colour contrast on \nQuick Open\n and \nCommand Bar\n\n\n[I] [ 4th]\n: Fix problem with handling of cancel button actions in project settings area\n\n\n[I] [ 3rd]\n: Add support for \nlis_course_offering_sourcedid\n as a unique course identifier in LMS systems\n\n\n\n\nAugust 2018\n\n\n\n\n[I] [29th]\n: Update handling of panel widths when guides is collapsed/reopened when in 3 column layout\n\n\n[I] [29th]\n: Fix problem with \nQuick Open\n handling in screen readers\n\n\n[F] [29th]\n: Added \nSelf Invoicing\n for University and School organisation\n\n\n[F] [29th]\n: Added support for \nLTI Constant URLs\n and \nLTI Class fork\n\n\n[F] [22nd]\n: Added \nCodio LTI App\n to improve ease of integrating Codio with LMS systems\n\n\n[I] [16th]\n: Fix issue with \nCustom Buttons\n incorrectly handling\n\n\n[F] [ 9th]\n: Add ability to use current file in \ndebugger\n targets\n\n\n[I] [ 7th]\n: update handling of \nCrunch\n projects\n\n\n[I] [ 7th]\n: Improve visibility of form elements and handling of \nQuick Open\n dialog\n\n\n[I] [ 7th]\n: Update menu handling for screen readers\n\n\n[F] [ 7th]\n: Add additional 3 column \nlayout\n options\n\n\n[I] [ 4th]\n: Fix problem with terminal opening in guides\n\n\n[I] [ 2nd]\n: Add support for manual grading for \nnbgrader\n\n\n\n\nJuly 2018\n\n\n\n\n[I] [26th]\n: Improve handling of \nBook\n deletion\n\n\n[F] [26th]\n: Add typescript support for \ndesktop application\n\n\n[F] [18th]\n: Improve handling of enabling/disabling of class units\n\n\n[F] [17th]\n: Fix issue with cloning \nPartial Point Rubric\n in IE browser\n\n\n[F] [13th]\n: Add support for \nnbgrader\n\n\n[I] [12th]\n: Improve handing of copy file actions\n\n\n[I] [11th]\n: Improve handling of cookie consent\n\n\n[I] [11th]\n: Fix issue in counter for grading of book based units\n\n\n[F] [10th]\n: Allow \nPartial Point Rubric\n to be cloned from other units\n\n\n[I] [ 3rd]\n: Update handling of Edge browser integration with LMS systems\n\n\n[I] [ 3rd]\n: Improve \nplagiarism checker\n adding new filters that can be set\n\n\n[I] [ 2nd]\n: Fix problem with tab focus being lost in guides\n\n\n[I] [ 2nd]\n: Fix problem when removing units from module/course in a class\n\n\n\n\nJune 2018\n\n\n\n\n[I] [29th]\n: Improve visibility of active buttons in tabs\n\n\n[I] [29th]\n: Improve export class data to better handle any archived units\n\n\n[I] [29th]\n: Fix problem with layout for manual grading in IE browser\n\n\n[I] [27th]\n: Fix problem with adding user project permissions\n\n\n[F] [22nd]\n: Add STACK file type in \nMath assessment\n authoring and YAML validation.\n\n\n[I] [21st]\n: Improve error message handling of publishing of books with broken .json files\n\n\n[I] [21st]\n: Improve teacher view of pinned units\n\n\n[F] [20th]\n: Add \nPartial Point Rubric\n for manual grading\n\n\n[I] [19th]\n: Improve behaviour of free text assessment\n\n\n[I] [19th]\n: Update unit publishing to ignore assessmentsAnswers.json file\n\n\n[I] [19th]\n: Update handling of assessment submiit button\n\n\n[F] [15th]\n: Add \ncollapse on start\n for guides\n\n\n[I] [15th]\n: Improve handling of \nexporting class data\n\n\n[I] [13th]\n: Improve support for keyboard and screen readers\n\n\n[I] [13th]\n: Update handling of dynamic port protection\n\n\n[I] [ 5th]\n: Add overview video for \ndesktop application\n\n\n[I] [ 4th]\n: Improve handling of mark as completed process for students\n\n\n\n\nMay 2018\n\n\n\n\n[I] [31st]\n: Improve handling of autocomplete when searching for users to share projects\n\n\n[I] [28th]\n: Improve handling of local deleted files and folders in \ndesktop application\n\n\n[I] [28th]\n: Improve handling of assessment points if changed when updating unit in class\n\n\n[I] [28th]\n: Fix issue with \nplagiarism\n in book based units\n\n\n[I] [24th]\n: Improve handling of \nexit\n terminal commands\n\n\n[I] [21st]\n: Fix problem with teachers opening own last version of unit in \ncourses\n\n\n[I] [21st]\n: Fix issue with restarting \nguides\n after changing settings\n\n\n[I] [21st]\n: Improve message handling of errors in \ndebugger\n\n\n[I] [21st]\n: Fix issue for students opening list of units\n\n\n[I] [18th]\n: Fix issue with updating stack causing issue publishing new version of course unit\n\n\n[F] [18th]\n: Add support for timeout period in \nadvanced code tests\n\n\n[I] [18th]\n: Improve layout for student grading screens\n\n\n[I] [18th]\n: Update subscription information shown when plan expires\n\n\n[I] [16th]\n: Teachers in Self-Pay organisations no longer require subscription\n\n\n[F] [14th]\n: Restrict preview of box url to owners of the box. See \nProject Settings\n for more information\n\n\n[I] [14th]\n: Improve handling of file and directory names in \ndesktop application\n\n\n[F] [ 8th]\n: Add support for Python and Javascript in \nadvanced code tests\n\n\n[F] [ 4th]\n: Improve handling of tab focus when returning to a unit\n\n\n[I] [ 4th]\n: Fix issue with project list last accessed sorting\n\n\n[F] [ 4th]\n: Add \nGrade Book\n assessment\n\n\n\n\nApril 2018\n\n\n\n\n[F] [27th]\n: Add support for Java and Ruby in \nadvanced code tests\n\n\n[I] [27th]\n: Improve handling of downloading files in private projects\n\n\n[I] [27th]\n: Improve handling for \nlanguage server protocol\n\n\n[I] [24th]\n: Improve accessibility to support dialog actions accessible from keyboard\n\n\n[I] [24th]\n: Fix issue with \nreplace\n in projects\n\n\n[I] [20th]\n: Fix grading issue with \nrubric templates\n\n\n[I] [20th]\n: Improve messaging for errors when synchronising units in \ndesktop application\n\n\n[I] [19th]\n: Fix problem with invite teacher process\n\n\n[I] [16th]\n: Improve handling of unit/project descriptions in \ndesktop application\n\n\n[I] [14th]\n: New \ndesktop application\n allowing a local code workspace to synchronize with a Codio box.\n\n\n[I] [13th]\n: Improve performance of X-server\n\n\n[I] [13th]\n: Improve handling of double clicking on submission of assessments\n\n\n[I] [ 4th]\n: Improve visualisation of navigation options in teacher dashboard\n\n\n[I] [ 2nd]\n: Update IDE shortcut key for accessing menu (to F10)\n\n\n[I] [ 2nd]\n: Update handling of \ndownload csv\n to better handle characters in grading comments\n\n\n\n\nMarch 2018\n\n\n\n\n[I] [29th]\n: Update handling of \nbooks\n requiring \nguides\n before \npublishing\n\n\n[I] [27th]\n: Improve IDE menu items for better keyboard accessibility\n\n\n[I] [27th]\n: Update structure of \nexporting class data\n\n\n[I] [27th]\n: Improve memory handling for \nlanguage server protocol\n\n\n[I] [23rd]\n: Improve handling of focus when switching panels using \nkeyboard shortcuts\n\n\n[I] [20th]\n: Improve messaging when stack/pack owner is changed\n\n\n[F] [20th]\n: Allow adjustment of \nunit penalties\n for individual students\n\n\n[I] [19th]\n: Fix sorting of units in classes\n\n\n[I] [16th]\n: Fix problem starting \nPlagiarism tool\n\n\n[I] [15th]\n: Fix problem with \nexport class data\n for old classes\n\n\n[I] [12th]\n: Fix issue with image handling when editing/creating \nstarter packs\n\n\n[I] [ 7th]\n: Improve handling of course updates in classes\n\n\n[I] [ 7th]\n: Fix issue with class dashboard in IE browser\n\n\n[F] [ 6th]\n: Add support for \nsearching/filtering\n of classes\n\n\n[I] [ 6th]\n: Fix problem for teachers opening latest version of books\n\n\n[I] [ 5th]\n: Improve handling for opening of large project warning\n\n\n[I] [ 5th]\n: Fix issue with terminal reconnections\n\n\n\n\nFebuary 2018\n\n\n\n\n[I] [28th]\n: Update handling of book unit switching\n\n\n[I] [26th]\n: Fix issue with unit reloading for students\n\n\n[F] [26th]\n: Expand \nGigabox\n options to include 1GB, 2GB, 8GB,16GB and GPU (for GPU-accelerated instances) boxes.\n\n\n[I] [26th]\n: Fix issue with \nregrade complete\n\n\n[I] [13th]\n: Fix issue with \nMCQ\n/\nFITB\n assessments not showing correct answers\n\n\n[I] [13th]\n: Fix issue with undo/redo\n\n\n[I] [12th]\n: Fix issue with file tree not updating correctly when files created via terminal\n\n\n[I] [12th]\n: Fix issue with unit settings changing when \nUpgrade Course\n is run\n\n\n[I] [12th]\n: Fix issue with icon handling\n\n\n[F] [ 9th]\n: \nExporting LTI settings\n\n\n[I] [ 9th]\n: Fix problem with txt files not opening correctly\n\n\n[F] [ 8th]\n: [Export class data]((docs/classes/classmanagement/export/) enabling all class data, including students workspaces to be exported.\n\n\n[I] [ 5th]\n: Fix issue with book units\n\n\n[I] [ 5th]\n: Fix issue publishing books after changing stack\n\n\n[I] [ 1st]\n: Fix issue with content being lost when switching browsers\n\n\n\n\nJanuary 2018\n\n\n\n\n[I] [24th]\n: Fix problem with Test students in Self-Pay organisations\n\n\n[I] [24th]\n: Update handling of Autocomplete in Language Server Protocol\n\n\n[I] [22nd]\n: Improve Run Button so that the command name is used for run button command as terminal name\n\n\n[I] [22nd]\n: Fix issue with [stack exclusions](/project/stacks/exclusions/\n\n\n[I] [22nd]\n: Fix issue when the wrong students answer is shown when switching between students projects\n\n\n[I] [19th]\n: Fix issue with assessments on \nReset Unit\n\n\n[I] [19th]\n: Implement completion and hover support for \nLanguage Server Protocol\n\n\n[I] [16th]\n: Fix problem for teachers not being able to edit course/module units\n\n\n[I] [15th]\n: Always use tabs regardless of user/project settings when using Makefile\n\n\n[I] [ 4th]\n: Fix issue with guides table of contents focus on open\n\n\n[I] [ 4th]\n: Improve handling of books when switching between book units\n\n\n\n\nDecember 2017\n\n\n\n\n[I] [21st]\n: Fix problem with advanced code test output\n\n\n[I] [20th]\n: Update guides table of contents so current selection is always visible in large tree\n\n\n[I] [18th]\n: Executing \nexit\n command in terminal or guides content will automatically close the terminal tab\n\n\n[I] [14th]\n: Improve handling of application of grades for large classes\n\n\n[I] [11th]\n: Update handling of \nFree Text Assessment\n] submissions\n\n\n[I] [11th]\n: Update handling of \nUpgrade Course\n for Firefox browser\n\n\n[I] [ 8th]\n: Fix duplicate messaging issue when deleting units in course modules\n\n\n[I] [ 6th]\n: Improve handling of \nUnit Penalties\n\n\n[I] [ 4th]\n: Update messaging when removing modules from courses\n\n\n[I] [ 1st]\n: Update helper text for stack version change in units\n\n\n[I] [ 1st]\n: Update handling of layout change\n\n\n[I] [ 1st]\n: Fix issue with changes to metadata.json files not saving correctly\n\n\n\n\nNovember 2017\n\n\n\n\n[I] [30th]\n: Update definition of incorrect points for multiple choice assessments\n\n\n[I] [30th]\n: Improve messaging highlighting \nPublic/Private Settings\n when creating Courses/Modules/Books/Projects/Stacks/Starter Packs\n\n\n[I] [28th]\n: Fix XSS image issue\n\n\n[I] [28th]\n: Improve handling of teachers joining class as student through LTI\n\n\n[I] [28th]\n: Simplify \ncreation of book based units\n\n\n[I] [28th]\n: Update \nUnit Duration\n\n\n[I] [28th]\n: Improve \nstudent submission options\n\n\n[I] [28th]\n: Update Guides \nglobal\n settings\n\n\n[F] [27th]\n: Add functionality to change/review \nJUnit\n timeout settings\n\n\n[F] [24th]\n: \nUnit Penalties\n to allow teachers/instructors to specify grading deadlines and associated penalties\n\n\n[I] [24th]\n: Update Book publishing to allow pages to be selected\n\n\n[I] [15th]\n: Fix issue when changing stack for ad-hoc projects in a class\n\n\n[I] [15th]\n: Update guides collapse button handling when layout set to 1 panel\n\n\n[I] [14th]\n: Fix handling of book based units opening for students\n\n\n[I] [14th]\n: Block deletion of a course that contains modules\n\n\n[I] [14th]\n: Improve warnings when deleting units and modules\n\n\n[I] [13th]\n: Fix issue publishing units in IE browser\n\n\n[I] [13th]\n: Fix icon for Advanced Code Tests\n\n\n[I] [13th]\n: Fix handling for teachers opening students project assessments\n\n\n[I] [09th]\n: Fix TOC scrolling issue in guides for Firefox and IE browsers\n\n\n[I] [07th]\n: Improve Mark as Completed process to provide warning of assessments in the unit not completed\n\n\n[I] [07th]\n: Update teacher dashboard for grading, allowing teachers to filter to find students and by status of unit. See \nGrading project work\n for more information\n\n\n[I] [03rd]\n: Fix terminal light theme to show cursor\n\n\n[I] [03rd]\n: Fix problem where teachers are not always able to view content of 3 blue dot menu in the students listing\n\n\n[I] [03rd]\n: Update Codemirror components and fix soft tabs\n\n\n[I] [02nd]\n: Fix problem when Guides TOC opened and closed to cause terminal to resize incorrectly\n\n\n\n\nOctober 2017\n\n\n\n\n[I] [26th]\n: Update message handling for change stack for units in a course\n\n\n[I] [25th]\n: Improve stack creation from the IDE\n\n\n[I] [24th]\n: Update unit action to also update codio files (e.g .codio, .settings)\n\n\n[I] [18th]\n: Update saving of draft free text assessments\n\n\n[I] [16th]\n: Fix problem for students answering assessments\n\n\n[I] [16th]\n: Fix problem with custom assessment grades not being passed correctly\n\n\n[I] [13th]\n: Improve grading for \nFree text assessments\n supporting comment field and easy navigation to other students and other assessments for the currently selected student\n\n\n[I] [12th]\n: Update handling of symbols in free text assessment previewing\n\n\n[I] [12th]\n: Improve class navigation for teachers, click units tab to return to main unit listing\n\n\n[F] [11th]\n: Unify guides/books \ntable of contents\n\n\n[I] [11th]\n: Fix issue with creating projects importing from zip file\n\n\n[I] [10th]\n: Fix problem with books upgrade to class\n\n\n[I] [10th]\n: Improve handling of size of free text assessment field for student\n\n\n[I] [09th]\n: Show points assigned for free text assessments to students within the unit when grades released\n\n\n[F] [06th]\n: Add user preference editor setting to show a vertical ruler in files. \n[ruler]=xx\n\n\n[I] [06th]\n: Improve handling of unit ordering when adding or updating a course in a class to match the order set in the course\n\n\n[I] [06th]\n: Add \ncourses overview\n video\n\n\n[I] [06th]\n: Add \nownership and visibility of courses\n video\n\n\n[I] [06th]\n: Add \nworking with stacks in courses\n video\n\n\n[I] [06th]\n: Add \naccount settings overview\n video\n\n\n[I] [06th]\n: Add \ndashboard overview\n video\n\n\n[I] [05th]\n: Improve warnings for unsaved changes when authoring \nguides\n\n\n[I] [05th]\n: Ignore .git and .hg files in \nsearch and replace\n actions\n\n\n[I] [04th]\n: Improve handling of students ability to amend answer submissions during completion of a unit\n\n\n[I] [04th]\n: Fix problem so students can not create courses,modules and units\n\n\n[I] [04th]\n: Improve \ngrading free text\n to show confirmation message when applying\n\n\n[I] [04th]\n: Improve stack handling when \npublishing\n units\n\n\n[I] [04th]\n: Improve \nupgrade course\n process\n\n\n[F] [02nd]\n: Release of \nbooks\n\n\n[I] [02nd]\n: Allow LMS students to access already started units from Codio dashboard\n\n\n[I] [02nd]\n: Redirect LMS users back to their LMS when marking unit as complete\n\n\n\n\nSeptember 2017\n\n\n\n\n[I] [29th]\n: Update Recommended Course content to resolve reported issues in assessments\n\n\n[I] [29th]\n: Update messaging if cookies not allowed.\n\n\n[I] [28th]\n: Reorganization of documentation structure.\n\n\n[F] [27th]\n: Changes to \nterms of use\n\n\n[I] [22nd]\n: Improve handling for publishing new stack versions\n\n\n[I] [21st]\n: Improve handling of student output in standard code assessment\n\n\n[I] [21st]\n: Improve handling of students starting units while new stack version is being updated\n\n\n[I] [21st]\n: Update the handling of student data when removing modules from classes\n\n\n[F] [19th]\n: Update documentation to advise on \ncookie requirements\n\n\n[I] [18th]\n: Fix students seeing grading stats before grades are released\n\n\n[I] [18th]\n: Fix Teacher Invitation list in classes showing test students\n\n\n[I] [15th]\n: Update handling of Upgrade course for IE11 browser\n\n\n[I] [14th]\n: Improve teacher dashboard view to show date students completed units and answers submitted\n\n\n[I] [14th]\n: Improve handling for accessing binary files\n\n\n[I] [12th]\n: Allow teachers to grade draft answers\n\n\n[I] [12th]\n: Improve create stack from current project process\n\n\n[I] [12th]\n: Improve the updating of manual grading actions for teachers\n\n\n[I] [11th]\n: Improve message handling if student working with stack unit they do not have access to.\n\n\n[I] [11th]\n: Refactor Guides buttons changing Settings to smaller gear icon\n\n\n[I] [08th]\n: Remove version entry field from stack version and just auto-increment\n\n\n[F] [08th]\n: Added preview type for \nfree text assessment\n\n\n[I] [07th]\n: Update teacher dashboard for \nfree text assessment grading\n.\n\n\n[I] [07th]\n: Add confirmation step when unit is marked as complete by students.\n\n\n[F] [02nd]\n: Add student \nIP consent\n.\n\n\n[I] [01st]\n: Improvement to publishing units allowing for simpler handling of \nstack\n changes.\n\n\n[F] [01st]\n: \nUpgrade course\n. If any updates to the course(s) used in your class are detected, you can upgrade the content to the latest version within the class. Update unit option removed from courses in a class.\n\n\n\n\nAugust 2017\n\n\n\n\n[F] [30th]\n: Support pug for syntax highlighting (mapping to jade).\n\n\n[I] [25th]\n: Review field ordering for \nassessments\n.\n\n\n[I] [25th]\n: Change \npublic/private\n settings to private by default.\n\n\n[F] [23rd]\n: Add \ngo to line\n hotkey (default \nAlt+G\n).\n\n\n[I] [17th]\n: \nInvite teachers\n into a class with email invitation.\n\n\n[I] [16th]\n: Update guide icons and add new \ncallout blocks\n.\n\n\n\n\nWe implemented the changelog page in August, 2017 so this is as far back as we go.", 
            "title": "Changelog"
        }, 
        {
            "location": "/resources/schoolscontent/coursefind/", 
            "text": "Select \nResources\n from the dashboard. You will see \nRecommended\n courses that are created or recommended by Codio.\n\n\nIf you then select a course, you are shown a list of modules. You can create new modules and add also add modules belonging to other courses to your course by selecting the \nEdit Courses\n slider.", 
            "title": "Finding Courses"
        }, 
        {
            "location": "/resources/schoolscontent/courseview/", 
            "text": "When you author course content, you are the owner and the content is set to private as the default option. It means you are the only person who can see your course content. In order for others to view them, you need to grant access.\n\n\nIf you are a member of an Organization, the Organization owner can enable the ability for you to create public courses. See \nPublic/Private Settings\n.\n\n\nThe following permissions can be granted.\n\n\n\n\nPrivate\n - only you can see your Course/Modules.\n\n\nPublic\n - all Codio users can see your Course/Modules.\n\n\n\n\nIn addition to this, by changing the owner of the Course/Module to your Organization:\n\n\n\n\nA \nPrivate\n Course/Module will be visible to, and usable only by members of that Organization. Additionally, owners of the Organization will be able to edit and administer the course/module.\n\n\nA \nPublic\n Course/Module will be visible to and usable by all, both inside and outside of your Organization, and it will be shown as belonging to the Organization. Additionally, owners of the Organization will be able to edit and administer the course/module.", 
            "title": "Course Visibility"
        }, 
        {
            "location": "/resources/schoolscontent/crunch/", 
            "text": "Crunch is a modern, full-featured alternative to Little Man Computer. It is testament to Little Man Computer that it is still being used many years later. We have taken inspiration from it and given it a modern feel and a more complete instruction set that allows you to focus on thinking about your algorithm rather than having to learn the syntax.\n\n\nCrunch Course\n\uf0c1\n\n\nWe have built a 3 assignment Course that combines teaching materials with over 20 challenges of gradually increasing complexity. This is a great resource for teachers wanting to teach the basics of Assembly Language programming as well as computational thinking.\n\n\nFrom the Dashboard, go to \nCourses\n and then look for \nCrunch - Little Man Computer on Steroids\n.\n\n\nLexikon\n\uf0c1\n\n\nWe recommend you use Codio's Lexikon feature to get inline help on Crunch usage and commands. You can find the Lexikon in the \nTools\n menu. Once it appears, select the dropdown list on the right side and select Crunch. You can then search for commands. Try entering \nOverview\n in the search box for an overview of all the Crunch commands.\n\n\nCrunch Module\n\uf0c1\n\n\nWe strongly recommend you use the Crunch module to teach Crunch. The Module can be found in the \nCrunch - Little Man Computer on Steroids\n Course. From the Dashboard, go to \nCourses\n and then look for \nCrunch - Little Man Computer on Steroids\n, within that course you will find the Crunch module.\n\n\nIf you are teaching a Class, then we suggest you assign the Crunch module to the class. \nClick here\n for details.\n\n\nVideo Overview\n\uf0c1\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreating a Crunch file\n\uf0c1\n\n\nIf you want to create your own Crunch files in a Codio project, create a new file of type Crunch by giving it the \n.crunch\n extension.\n\n\nA new file is created from either the File menu or by right-clicking on the project name line in the file tree.\n\n\n\n\nSaving changes\n\uf0c1\n\n\nAll changes are changed automatically, so you don't have to explicitly save.\n\n\nSource Code Editing\n\uf0c1\n\n\nEditing source code is done by hovering over a line until the popup button bar appears.\n\n\n\n\nIf you have not yet added any code, then you should see the button bar already there in the top of the code area.\n\n\nClick on the \n+\n to add a new instruction.\n\n\nInstructions\n\uf0c1\n\n\nCrunch comes with a good base set of instructions. To see the full set of instructions, along with explanations for each one, add a new line as explained above. You can then scroll through the list of available instructions. There is also a complete Lexicon available. Go to \nTools\nLexicon\n and select the \nCrunch\n option to search.\n\n\nThe following instructions are not available in Little Man Computer and provide a more complete experience.\n\n\n\n\nBGT\n branch if greater than\n\n\nBGE\n branch if greater than or equal to\n\n\nBLT\n branch if less than\n\n\nBLE\n branch if less than or equal to\n\n\nBEQ\n branch if equal to\n\n\nBNE\n branch if not equal to\n\n\nJMP\n jump to a label\n\n\nPSH\n push accumulator onto a stack\n\n\nPOP\n pop accumulator off the stack\n\n\nMUL\n multiply the accumulator by a literal value of a value stored in a memory location\n\n\nINC\n increment the accumulator by 1\n\n\nDEC\n decrement the acculumator by 1\n\n\n\n\nYou can access the full instruction list from the dropdown when you add a new instruction or you can simply type the instruction mnemonic (3 letter instruction) and press enter.\n\n\nAdding labels\n\uf0c1\n\n\nInstructions such as \nBEQ\n, \nBNE\n, \nBLT\n, \nBLE\n, \nBGT\n, \nBGE\n, \nJMP\n require that you jump to a specific label if the condition is met. You can add such a label by pressing the add label button from the floating toolbar.\n\n\n\n\nEnter a label name that can be used as a target for the above listed instructions.\n\n\nComments\n\uf0c1\n\n\nIf you want to add comments to your code, click the comment button, circled below, and you can add a comment description into the code.\n\n\n\n\nSelecting lines of code - deleting or moving\n\uf0c1\n\n\nIf you want to select one or more lines of code (to delete or move to another location) then you should do the following\n\n\n\n\nclick on a line you want to select but make sure you click away from a field that requires input\n\n\nto select more multiple lines, then press the shift key and click on another line in order that all lines between the first line and this line are selected. You should then see the multiple lines highlighted.\n\n\n\n\nOnce you have the one or more lines selected, you can either delete all lines (by pressing delete from the toolbar on the right) or by dragging the selected lines to the required destination.\n\n\nRunning your code\n\uf0c1\n\n\nStep / debug mode\n\uf0c1\n\n\nOne very nice way of running your code is to step through it line by line so you can see how it executes at your own pace. To do this, press the \nStep\n button on the right hand side. It will immediately start executing.\n\n\nAt any time, you can press the \nRun\n button to run to completion at full speed.\n\n\n\n\nRun mode\n\uf0c1\n\n\nThis runs your program at full speed.\n\n\nOutput window\n\uf0c1\n\n\nAll output is written to the output window at the bottom of the screen, which is scrollable.\n\n\nStack contents\n\uf0c1\n\n\nIf you push the accumulator to the stack using the \nPSH\n command, the stack content is displayed in a scrollable window within the display below the code window. As you \nPOP\n items off the stack, you will see the topmost item being removed.\n\n\nUndo \n redo\n\uf0c1\n\n\nYou can undo and redo changes using the buttons on the right hand side.", 
            "title": "Crunch"
        }, 
        {
            "location": "/resources/schoolscontent/crunch/#crunch-course", 
            "text": "We have built a 3 assignment Course that combines teaching materials with over 20 challenges of gradually increasing complexity. This is a great resource for teachers wanting to teach the basics of Assembly Language programming as well as computational thinking.  From the Dashboard, go to  Courses  and then look for  Crunch - Little Man Computer on Steroids .", 
            "title": "Crunch Course"
        }, 
        {
            "location": "/resources/schoolscontent/crunch/#lexikon", 
            "text": "We recommend you use Codio's Lexikon feature to get inline help on Crunch usage and commands. You can find the Lexikon in the  Tools  menu. Once it appears, select the dropdown list on the right side and select Crunch. You can then search for commands. Try entering  Overview  in the search box for an overview of all the Crunch commands.", 
            "title": "Lexikon"
        }, 
        {
            "location": "/resources/schoolscontent/crunch/#crunch-module", 
            "text": "We strongly recommend you use the Crunch module to teach Crunch. The Module can be found in the  Crunch - Little Man Computer on Steroids  Course. From the Dashboard, go to  Courses  and then look for  Crunch - Little Man Computer on Steroids , within that course you will find the Crunch module.  If you are teaching a Class, then we suggest you assign the Crunch module to the class.  Click here  for details.", 
            "title": "Crunch Module"
        }, 
        {
            "location": "/resources/schoolscontent/crunch/#video-overview", 
            "text": "", 
            "title": "Video Overview"
        }, 
        {
            "location": "/resources/schoolscontent/crunch/#creating-a-crunch-file", 
            "text": "If you want to create your own Crunch files in a Codio project, create a new file of type Crunch by giving it the  .crunch  extension.  A new file is created from either the File menu or by right-clicking on the project name line in the file tree.", 
            "title": "Creating a Crunch file"
        }, 
        {
            "location": "/resources/schoolscontent/crunch/#saving-changes", 
            "text": "All changes are changed automatically, so you don't have to explicitly save.", 
            "title": "Saving changes"
        }, 
        {
            "location": "/resources/schoolscontent/crunch/#source-code-editing", 
            "text": "Editing source code is done by hovering over a line until the popup button bar appears.   If you have not yet added any code, then you should see the button bar already there in the top of the code area.  Click on the  +  to add a new instruction.", 
            "title": "Source Code Editing"
        }, 
        {
            "location": "/resources/schoolscontent/crunch/#instructions", 
            "text": "Crunch comes with a good base set of instructions. To see the full set of instructions, along with explanations for each one, add a new line as explained above. You can then scroll through the list of available instructions. There is also a complete Lexicon available. Go to  Tools Lexicon  and select the  Crunch  option to search.  The following instructions are not available in Little Man Computer and provide a more complete experience.   BGT  branch if greater than  BGE  branch if greater than or equal to  BLT  branch if less than  BLE  branch if less than or equal to  BEQ  branch if equal to  BNE  branch if not equal to  JMP  jump to a label  PSH  push accumulator onto a stack  POP  pop accumulator off the stack  MUL  multiply the accumulator by a literal value of a value stored in a memory location  INC  increment the accumulator by 1  DEC  decrement the acculumator by 1   You can access the full instruction list from the dropdown when you add a new instruction or you can simply type the instruction mnemonic (3 letter instruction) and press enter.", 
            "title": "Instructions"
        }, 
        {
            "location": "/resources/schoolscontent/crunch/#adding-labels", 
            "text": "Instructions such as  BEQ ,  BNE ,  BLT ,  BLE ,  BGT ,  BGE ,  JMP  require that you jump to a specific label if the condition is met. You can add such a label by pressing the add label button from the floating toolbar.   Enter a label name that can be used as a target for the above listed instructions.", 
            "title": "Adding labels"
        }, 
        {
            "location": "/resources/schoolscontent/crunch/#comments", 
            "text": "If you want to add comments to your code, click the comment button, circled below, and you can add a comment description into the code.", 
            "title": "Comments"
        }, 
        {
            "location": "/resources/schoolscontent/crunch/#selecting-lines-of-code-deleting-or-moving", 
            "text": "If you want to select one or more lines of code (to delete or move to another location) then you should do the following   click on a line you want to select but make sure you click away from a field that requires input  to select more multiple lines, then press the shift key and click on another line in order that all lines between the first line and this line are selected. You should then see the multiple lines highlighted.   Once you have the one or more lines selected, you can either delete all lines (by pressing delete from the toolbar on the right) or by dragging the selected lines to the required destination.", 
            "title": "Selecting lines of code - deleting or moving"
        }, 
        {
            "location": "/resources/schoolscontent/crunch/#running-your-code", 
            "text": "", 
            "title": "Running your code"
        }, 
        {
            "location": "/resources/schoolscontent/crunch/#step-debug-mode", 
            "text": "One very nice way of running your code is to step through it line by line so you can see how it executes at your own pace. To do this, press the  Step  button on the right hand side. It will immediately start executing.  At any time, you can press the  Run  button to run to completion at full speed.", 
            "title": "Step / debug mode"
        }, 
        {
            "location": "/resources/schoolscontent/crunch/#run-mode", 
            "text": "This runs your program at full speed.", 
            "title": "Run mode"
        }, 
        {
            "location": "/resources/schoolscontent/crunch/#output-window", 
            "text": "All output is written to the output window at the bottom of the screen, which is scrollable.", 
            "title": "Output window"
        }, 
        {
            "location": "/resources/schoolscontent/crunch/#stack-contents", 
            "text": "If you push the accumulator to the stack using the  PSH  command, the stack content is displayed in a scrollable window within the display below the code window. As you  POP  items off the stack, you will see the topmost item being removed.", 
            "title": "Stack contents"
        }, 
        {
            "location": "/resources/schoolscontent/crunch/#undo-redo", 
            "text": "You can undo and redo changes using the buttons on the right hand side.", 
            "title": "Undo &amp; redo"
        }, 
        {
            "location": "/resources/schoolscontent/currmap2012/", 
            "text": "Codio's teaching content has been created in partnership with the UK's leading examination board, Oxford \n Cambridge and RSA (OCR).\n\n\nIt has been designed specifically to cover the coding aspects of the current GCSE curriculum as well as the new (2016) curriculum.\n\n\nPlease view our \nCurriculum Map\n for the OCR GCSE 2012 Computing Specification (J275 Version 1 April 2012).\n\n\nCreating Lesson Plans: How to use the Curriculum Map\n\uf0c1\n\n\nThe curriculum map is your resource to track and plan your lesson time. We recommend a minimum (Column C) and maximum (Column D) number of lessons for each curriculum area. Columns F-I specify the Codio content that covers the specific curriculum area.\n\n\nYou can use the spreadsheet by entering time spent and planned for your lessons in Column E. The total amount of time is added up and shown in cell E167. This gives you the confidence to know that all curriculum areas are covered. See the accompanying \nInstructional Document\n to the Curriculum Map for further guidance. (The curriculum map outlines 2 years of GCSE Computing work with an expected 3 lesson per week and 34 weeks per year. There is a total of 204 lessons.)", 
            "title": "Curriculum Map for the OCR GCSE 2012 (J275)"
        }, 
        {
            "location": "/resources/schoolscontent/currmap2012/#creating-lesson-plans-how-to-use-the-curriculum-map", 
            "text": "The curriculum map is your resource to track and plan your lesson time. We recommend a minimum (Column C) and maximum (Column D) number of lessons for each curriculum area. Columns F-I specify the Codio content that covers the specific curriculum area.  You can use the spreadsheet by entering time spent and planned for your lessons in Column E. The total amount of time is added up and shown in cell E167. This gives you the confidence to know that all curriculum areas are covered. See the accompanying  Instructional Document  to the Curriculum Map for further guidance. (The curriculum map outlines 2 years of GCSE Computing work with an expected 3 lesson per week and 34 weeks per year. There is a total of 204 lessons.)", 
            "title": "Creating Lesson Plans: How to use the Curriculum Map"
        }, 
        {
            "location": "/resources/schoolscontent/currmap2016/", 
            "text": "Please view our \nCurriculum Map\n for the OCR GCSE (9-1) Computer Science (J276 Version 1).\n\n\nInterpreting detailed specifications like the OCR J275 and J276 or a higher level specification like the GCSE Computer Science specification from the Department for Education can be a daunting task. Our curriculum maps are the best way for teachers to put the these specifications into practice and teach with confidence. You can find the curriculum maps under the description tab of the relevant courses and modules.\n\n\nTo start using the OCR J276 curriculum map with your class see the accompanying \nInstructional Document", 
            "title": "Curriculum Map for the OCR GSCE (J276)"
        }, 
        {
            "location": "/resources/schoolscontent/currmapcstahigh/", 
            "text": "Please view our \nCurriculum Map\n for the High School Computer Science Course.\n\n\nThis is a course designed to expose all students to the interdisciplinary nature of computer science in today\u2019s dynamic and globally connected society.\n\n\nStudents will have the opportunity to explore the uses of computer science as a tool in creating effective solutions to complex contemporary problems.\n\n\nThe hands-on nature of the course is intended to provide students with the opportunity to explore conceptual understanding in a practical learning environment.\n\n\nThis course is recommended for all students as it provides an overview of computer sciences and its applications in various disciplines, professions, and personal activities.\n\n\nIn this course, students will learn to use computational thinking to develop algorithmic solutions to real-world problems.\n\n\nThey will begin to understand the different levels of complexity in problem solving and to determine when team projects might generate more effective problem solutions than individual efforts. Students will learn and use a programming language and related tools, as well as appropriate collaboration tools, computing devices, and network environments.\n\n\nFinally, they will demonstrate an understanding of the social and ethical implications of their work and exhibit appropriate communication behavior when working as a team member.\n\n\nThis course is designed for all students at the 9th and 10th grade levels.", 
            "title": "Curriculum Map for High School Computer Science Course"
        }, 
        {
            "location": "/resources/schoolscontent/currmapcstamiddle/", 
            "text": "Please view our \nCurriculum Map\n for the Middle School Computer Science Course Grades 6-8.\n\n\nThe goals of this course are to engage students in using computational thinking as a problem solving tool, teach them to use programming concepts and methods while creating digital artifacts, and retain their interest in computing as a relevant and exciting field.\n\n\nLearning opportunities are presented in ways that are active, connected, and relevant to them, and promote the perception of themselves as proactive and empowered problem solvers, creators, and innovators capable of changing the world. Collaborative learning experiences at this level prepare students to work in teams and to build supportive partnerships.", 
            "title": "Curriculum Map for Middle School Computer Science Course Grades 6-8"
        }, 
        {
            "location": "/resources/schoolscontent/flode/", 
            "text": "Flode is a course that creates executable flow charts. Flode is a great way to teach computational thinking and introduce students to programming. It can:\n\n\n\n\ncreate beautiful, annotated flow charts\n\n\nwrite proper code expressions, including decisions, in chart elements\n\n\nintegrated debugger\n\n\nexport your charts as images for project write-ups\n\n\ninput and output elements so automated tests can auto-grade charts.\n\n\n\n\nPlease see the sections below for details on how to access ready made course or how to create your own projects where students can create Flode charts within their own projects.\n\n\nCheat Sheet\n\uf0c1\n\n\nHere is a quick reference for commonly used actions.\n\n\nDragging in blocks\n\uf0c1\n\n\nDrag from the top toolbar into the chart.\n\n\nConnecting blocks with lines\n\uf0c1\n\n\n\n\nHover over a block to see the connection points\n\n\nMove the mouse over one of the small connection point circles\n\n\nClick and drag with the mouse to start creating the line\n\n\nRelease the mouse to move in another direction then click to change direction again or connect to another connection point\n\n\n\n\nResizing blocks\n\uf0c1\n\n\nClick on a block then drag a highlighted point\n\n\nZooming \n centering your chart\n\uf0c1\n\n\nZoom controls are in the toolbar or using the mouse wheel if you have one\n\n\nMulti selection\n\uf0c1\n\n\n\n\nPress the shift key then drag the mouse to surround blocks to multi-select\n\n\nSelect one block then press the shift key then start dragging the mouse\n\n\n\n\nAligning blocks\n\uf0c1\n\n\n\n\nMulti select the blocks to align\n\n\nRight click and select one of the alignment options\n\n\n\n\nUndo \n Redo\n\uf0c1\n\n\n\n\nUndo \nCtrl+Z\n (PC) \nCmd+Z\n (Mac)\n\n\nRedo \nShift+Ctrl+Z\n (PC) \nShift+Cmd+Z\n (Mac)\n\n\n\n\nAdding comments\n\uf0c1\n\n\n\n\nClick on a block then press the speech bubble icon to add a comment.\n\n\n\n\nVideo overview\n\uf0c1\n\n\n\n\n\n\n\n\n\n\n\n\n\nFlode teaching content\n\uf0c1\n\n\nThe content also contains many auto-graded assessments. Results can be seen instantly on the teacher \nMy Classroom\n feature.\n\n\n\n\nLog into Codio\n\n\nSelect \nCourses\n from the items on the left of the Dashboard\n\n\nLook for \nAn Introduction to Programming\n\n\n\n\nAn Introduction to Programming\n uses Flode extensively and provides an excellent way of introducing students to programming, computational thinking and Algorithms.\n\n\nCreating and editing a new Flode file\n\uf0c1\n\n\nIf you want to create Flode charts independently of any Codio Course content, create a new project from the \nDashboard \n My Projects\n area.\n\n\nOnce inside a project, to create a new flow chart, simply create a new file with the extension \n.flode\n. A new Flode window will appear and you can start creating and editing your chart.\n\n\nA new file is created from either the File menu or by right-clicking on the project name line in the file tree.\n\n\n\n\nTo edit an existing \n.flode\n file, simply click on the file name to open the Flode editor.\n\n\nDetailed instructions\n\uf0c1\n\n\nTo get detailed instructions on how to use Flode,\n\n\n\n\nLog into Codio\n\n\nSelect \nCourses\n from the items on the left of the Dashboard\n\n\nLook for \nAn Introduction to Programming\n\n\nSelect the first Module, \nFlode\n\n\nPress \nStart Unit\n from the first Unit in the list \nIntroduction to Flode\n\n\n\n\nCredits\n\uf0c1\n\n\nMany thanks to the folks at \nJGraph\n for their excellent flowcharting and diagramming tools.", 
            "title": "Flode"
        }, 
        {
            "location": "/resources/schoolscontent/flode/#cheat-sheet", 
            "text": "Here is a quick reference for commonly used actions.", 
            "title": "Cheat Sheet"
        }, 
        {
            "location": "/resources/schoolscontent/flode/#dragging-in-blocks", 
            "text": "Drag from the top toolbar into the chart.", 
            "title": "Dragging in blocks"
        }, 
        {
            "location": "/resources/schoolscontent/flode/#connecting-blocks-with-lines", 
            "text": "Hover over a block to see the connection points  Move the mouse over one of the small connection point circles  Click and drag with the mouse to start creating the line  Release the mouse to move in another direction then click to change direction again or connect to another connection point", 
            "title": "Connecting blocks with lines"
        }, 
        {
            "location": "/resources/schoolscontent/flode/#resizing-blocks", 
            "text": "Click on a block then drag a highlighted point", 
            "title": "Resizing blocks"
        }, 
        {
            "location": "/resources/schoolscontent/flode/#zooming-centering-your-chart", 
            "text": "Zoom controls are in the toolbar or using the mouse wheel if you have one", 
            "title": "Zooming &amp; centering your chart"
        }, 
        {
            "location": "/resources/schoolscontent/flode/#multi-selection", 
            "text": "Press the shift key then drag the mouse to surround blocks to multi-select  Select one block then press the shift key then start dragging the mouse", 
            "title": "Multi selection"
        }, 
        {
            "location": "/resources/schoolscontent/flode/#aligning-blocks", 
            "text": "Multi select the blocks to align  Right click and select one of the alignment options", 
            "title": "Aligning blocks"
        }, 
        {
            "location": "/resources/schoolscontent/flode/#undo-redo", 
            "text": "Undo  Ctrl+Z  (PC)  Cmd+Z  (Mac)  Redo  Shift+Ctrl+Z  (PC)  Shift+Cmd+Z  (Mac)", 
            "title": "Undo &amp; Redo"
        }, 
        {
            "location": "/resources/schoolscontent/flode/#adding-comments", 
            "text": "Click on a block then press the speech bubble icon to add a comment.", 
            "title": "Adding comments"
        }, 
        {
            "location": "/resources/schoolscontent/flode/#video-overview", 
            "text": "", 
            "title": "Video overview"
        }, 
        {
            "location": "/resources/schoolscontent/flode/#flode-teaching-content", 
            "text": "The content also contains many auto-graded assessments. Results can be seen instantly on the teacher  My Classroom  feature.   Log into Codio  Select  Courses  from the items on the left of the Dashboard  Look for  An Introduction to Programming   An Introduction to Programming  uses Flode extensively and provides an excellent way of introducing students to programming, computational thinking and Algorithms.", 
            "title": "Flode teaching content"
        }, 
        {
            "location": "/resources/schoolscontent/flode/#creating-and-editing-a-new-flode-file", 
            "text": "If you want to create Flode charts independently of any Codio Course content, create a new project from the  Dashboard   My Projects  area.  Once inside a project, to create a new flow chart, simply create a new file with the extension  .flode . A new Flode window will appear and you can start creating and editing your chart.  A new file is created from either the File menu or by right-clicking on the project name line in the file tree.   To edit an existing  .flode  file, simply click on the file name to open the Flode editor.", 
            "title": "Creating and editing a new Flode file"
        }, 
        {
            "location": "/resources/schoolscontent/flode/#detailed-instructions", 
            "text": "To get detailed instructions on how to use Flode,   Log into Codio  Select  Courses  from the items on the left of the Dashboard  Look for  An Introduction to Programming  Select the first Module,  Flode  Press  Start Unit  from the first Unit in the list  Introduction to Flode", 
            "title": "Detailed instructions"
        }, 
        {
            "location": "/resources/schoolscontent/flode/#credits", 
            "text": "Many thanks to the folks at  JGraph  for their excellent flowcharting and diagramming tools.", 
            "title": "Credits"
        }, 
        {
            "location": "/resources/schoolscontent/", 
            "text": "Codio's teaching materials take a rigorous approach to teaching coding. As well as extensive tutorial content, you will also find a large number of challenge assessments.\n\n\nBoth content and assessments have been carefully built to gradually increase the difficulty level, ensuring that knowledge and confidence are built up one step at a time. This approach is important to avoid demotivating students.\n\n\nAn Introduction to Programming\n\uf0c1\n\n\nThis introduces students to the basic concepts of programming, first using \nFlode\n before moving on to coding with Javascript, Python and/or Java. You will find many auto-graded coding assessments within each unit as well as a module dedicated to challenges. We also have a module introducing more advanced searching and sorting algorithms.\n\n\nMySQL\n\uf0c1\n\n\nThe first module covers the requirements of the GCSE curriculum. However, we also are offering more advanced materials covering accessing of databases through code as well as database design. These latter units are well suited as stretch materials or those wanting to build web applications or pursue coding at a higher level.\n\n\nCrunch\n\uf0c1\n\n\nCrunch is a modern and very easy to use equivalent of Little Man Computer. It comes with both a proper debugger and a visualisation feature that teaches the fetch/execute cycle and shows how CPUs work when executing a program. As with all our units, this content comes with a large number of automated assessments.\n\n\nAn Introduction to Web Development\n\uf0c1\n\n\nAlthough HTML and CSS are not mandated in the GCSE curriculum, OCR and Codio consider it a very valuable skillset and something that should be taught to students who are starting computing early enough. We are seeing many teachers in the UK teaching this and this course aims to support teachers who are new to this material as well as those with some experience.\n\n\nAs well as teaching the mechanics of building web pages, it also takes the Javasript knowledge acquired through the Introduction to Programming course and applies it to web pages to teach the basics of dynamic web sites and web applications.\n\n\nLinux Command Line Interface\n\uf0c1\n\n\nThis course teaches students how to access the terminal and access the Linux command line interface.\n\n\nCambridge MOOC - Non-Coding\n\uf0c1\n\n\nThis course is a port of OCR's Cambridge MOOC and covers the non-coding aspects of the GCSE curriculum. It contains the tutorial content, videos as well as auto-marked assessment questions.\n\n\nVideo overview\n\uf0c1", 
            "title": "Course summary"
        }, 
        {
            "location": "/resources/schoolscontent/#an-introduction-to-programming", 
            "text": "This introduces students to the basic concepts of programming, first using  Flode  before moving on to coding with Javascript, Python and/or Java. You will find many auto-graded coding assessments within each unit as well as a module dedicated to challenges. We also have a module introducing more advanced searching and sorting algorithms.", 
            "title": "An Introduction to Programming"
        }, 
        {
            "location": "/resources/schoolscontent/#mysql", 
            "text": "The first module covers the requirements of the GCSE curriculum. However, we also are offering more advanced materials covering accessing of databases through code as well as database design. These latter units are well suited as stretch materials or those wanting to build web applications or pursue coding at a higher level.", 
            "title": "MySQL"
        }, 
        {
            "location": "/resources/schoolscontent/#crunch", 
            "text": "Crunch is a modern and very easy to use equivalent of Little Man Computer. It comes with both a proper debugger and a visualisation feature that teaches the fetch/execute cycle and shows how CPUs work when executing a program. As with all our units, this content comes with a large number of automated assessments.", 
            "title": "Crunch"
        }, 
        {
            "location": "/resources/schoolscontent/#an-introduction-to-web-development", 
            "text": "Although HTML and CSS are not mandated in the GCSE curriculum, OCR and Codio consider it a very valuable skillset and something that should be taught to students who are starting computing early enough. We are seeing many teachers in the UK teaching this and this course aims to support teachers who are new to this material as well as those with some experience.  As well as teaching the mechanics of building web pages, it also takes the Javasript knowledge acquired through the Introduction to Programming course and applies it to web pages to teach the basics of dynamic web sites and web applications.", 
            "title": "An Introduction to Web Development"
        }, 
        {
            "location": "/resources/schoolscontent/#linux-command-line-interface", 
            "text": "This course teaches students how to access the terminal and access the Linux command line interface.", 
            "title": "Linux Command Line Interface"
        }, 
        {
            "location": "/resources/schoolscontent/#cambridge-mooc-non-coding", 
            "text": "This course is a port of OCR's Cambridge MOOC and covers the non-coding aspects of the GCSE curriculum. It contains the tutorial content, videos as well as auto-marked assessment questions.", 
            "title": "Cambridge MOOC - Non-Coding"
        }, 
        {
            "location": "/resources/schoolscontent/#video-overview", 
            "text": "", 
            "title": "Video overview"
        }, 
        {
            "location": "/resources/schoolscontent/lexikon/", 
            "text": "The Codio Lexikon is an integrated help system that lets users lookup information on a variety of languages and topics quickly and easily. Having access to concise reference information as new topics are learned is extremely useful and saves having to search the web and separate the wheat from the chaff!\n\n\nThe Lexikon is organized into Topics.\nWe currently have added:\n\n\n\n\nCrunch\n\n\nCSS\n\n\nHTML\n\n\nJavascript\n\n\nLinux\n\n\n\n\nHowever, we can easily add coverage for any other Topic. If you are interested in additional topics, please email help@codio.com.\n\n\n\n\nUsing the Lexikon with guide content\n\uf0c1\n\n\nTo make accessing the Lexikon from your content even easier, we have a Global Option in the Guide settings that lets you specify the default topic to select. If you use this option, an icon will appear in the toolbar that will load the Lexikon window with the selected topic automatically selected.\n\n\nClick the \nSettings\n button, then select the \nGlobal\n tab. You can then specify the Topic name in the available field.\n\n\nTo see what topics are available, bring up the Lexikon from the Tools menu. The available topics are shown in the dropdown list.\n\n\nOnce you have specified a Lexikon topic, the student will see an icon in the Guide toolbar. When they press this, the Lexikon will appear in the same panel as the Guide with the correct topic automatically selected.", 
            "title": "Lexikon"
        }, 
        {
            "location": "/resources/schoolscontent/lexikon/#using-the-lexikon-with-guide-content", 
            "text": "To make accessing the Lexikon from your content even easier, we have a Global Option in the Guide settings that lets you specify the default topic to select. If you use this option, an icon will appear in the toolbar that will load the Lexikon window with the selected topic automatically selected.  Click the  Settings  button, then select the  Global  tab. You can then specify the Topic name in the available field.  To see what topics are available, bring up the Lexikon from the Tools menu. The available topics are shown in the dropdown list.  Once you have specified a Lexikon topic, the student will see an icon in the Guide toolbar. When they press this, the Lexikon will appear in the same panel as the Guide with the correct topic automatically selected.", 
            "title": "Using the Lexikon with guide content"
        }, 
        {
            "location": "/resources/schoolscontent/organization/", 
            "text": "Codio offers a 3 level hierarchy for organising and publishing course materials.\n\n\n\n\nA \nCourse\n is the top level and consists of a collection of Modules.\n\n\n\nA \nModule\n will typically incorporate all the course materials to cover a logical area of a curriculum or coursework. It in turn consists of a collection of assignments.\n\n\n\nAn \nAssignment\n is the lowest level item of coursework. It will typically contain enough material to cover a particular topic or area of a curriculum or coursework. An assignment is taken directly from a Codio project.\n\n\n\n\n\nTake a look at the \nResources\n area and open a Course to see its associated Modules and, within each Module, the assignments.\n\n\nAuthoring your own content\n\uf0c1\n\n\nPlease read the \nAuthoring Strategies\n section first. Ideally, you should also have read the full \nAuthoring\n section and created your first project with Codio content, ready to be turned into a assignment.\n\n\nDirect Access vs. courses\n\uf0c1\n\n\nHaving set your permissions, you should be aware of the two main ways others can then access the content.\n\n\n\n\nA student can access the Courses/Modules from the dashboard and press the \nStart assignment\n button having selected a Module.\n\n\nA teacher can create a \ncourse\n and then assign a Module to that course. Students can then access the course from the Dashboard and access assigned Modules and their assignments from there.\n\n\n\n\nGenerally speaking, course based scenarios should use the course feature to save the student from having to search for the Course/Module.\n\n\nModules\n\uf0c1\n\n\nA module is a collection of assignments (the actual teaching content). Courses have at least one module and most have several modules.\n\n\nIf you select a modules, you will be shown all the assignments that make up that module. You can add new assignments to a module from this screen.\n\n\nAssignments\n\uf0c1\n\n\nAn assignment is the actual teaching content. You can edit the descriptions as well as refresh the assignment from its original source project.\n\n\nHow assignments are published and updated\n\uf0c1\n\n\nWhen an author publishes an assignment, a copy of the source project is made and stored separately in the Codio platform. Any subsequent changes to the source project will not be seen, so it is safe to make changes without concern for how these changes will affect students who are already working on an assignment.\n\n\nWhen you have finished updating the source project and are ready to update the assignment, you should find your assignment in its parent module, press the edit assignments slider and then press refresh Source.\n\n\nIt could happen that a student starts on a assignment and afterwards the assignment's author updates the content. You should be aware that the student will not see any changes\n\n\n\n\nwhile the author is updating the source project from which the assignment was taken\n\n\nif the assignment is subsequently updated from its source project. In order for the student to see the modified assignment, the student's assignment project should first be deleted and then the assignment restarted. The drawback to this is that any assessments taken and the associated data is lost.", 
            "title": "How are courses organised?"
        }, 
        {
            "location": "/resources/schoolscontent/organization/#authoring-your-own-content", 
            "text": "Please read the  Authoring Strategies  section first. Ideally, you should also have read the full  Authoring  section and created your first project with Codio content, ready to be turned into a assignment.", 
            "title": "Authoring your own content"
        }, 
        {
            "location": "/resources/schoolscontent/organization/#direct-access-vs-courses", 
            "text": "Having set your permissions, you should be aware of the two main ways others can then access the content.   A student can access the Courses/Modules from the dashboard and press the  Start assignment  button having selected a Module.  A teacher can create a  course  and then assign a Module to that course. Students can then access the course from the Dashboard and access assigned Modules and their assignments from there.   Generally speaking, course based scenarios should use the course feature to save the student from having to search for the Course/Module.", 
            "title": "Direct Access vs. courses"
        }, 
        {
            "location": "/resources/schoolscontent/organization/#modules", 
            "text": "A module is a collection of assignments (the actual teaching content). Courses have at least one module and most have several modules.  If you select a modules, you will be shown all the assignments that make up that module. You can add new assignments to a module from this screen.", 
            "title": "Modules"
        }, 
        {
            "location": "/resources/schoolscontent/organization/#assignments", 
            "text": "An assignment is the actual teaching content. You can edit the descriptions as well as refresh the assignment from its original source project.", 
            "title": "Assignments"
        }, 
        {
            "location": "/resources/schoolscontent/organization/#how-assignments-are-published-and-updated", 
            "text": "When an author publishes an assignment, a copy of the source project is made and stored separately in the Codio platform. Any subsequent changes to the source project will not be seen, so it is safe to make changes without concern for how these changes will affect students who are already working on an assignment.  When you have finished updating the source project and are ready to update the assignment, you should find your assignment in its parent module, press the edit assignments slider and then press refresh Source.  It could happen that a student starts on a assignment and afterwards the assignment's author updates the content. You should be aware that the student will not see any changes   while the author is updating the source project from which the assignment was taken  if the assignment is subsequently updated from its source project. In order for the student to see the modified assignment, the student's assignment project should first be deleted and then the assignment restarted. The drawback to this is that any assessments taken and the associated data is lost.", 
            "title": "How assignments are published and updated"
        }, 
        {
            "location": "/resources/schoolscontent/recommended/", 
            "text": "For students ages 11-14\n\uf0c1\n\n\n\n\nComputational Thinking - create a maze game\n\n\nAn introduction to programming -  Flode, an interactive flowcharting tool\n\n\nAn introduction to programming -  learn to code with Python, JavaScript or Java\n\n\nCrunch - a modern alternative to Little Man Computer\n\n\nMiddle School Computer Science Course Grades 6-8 - Middle School Computer Science based on CSTA Standards and K12 Framework\n\n\n\n\nFor students ages 14-16\n\uf0c1\n\n\n\n\nAn introduction to programming -  Flode, an interactive flowcharting tool\n\n\nAn introduction to programming -  learn to code with Python, JavaScript or Java\n\n\nAn introduction to web development -  HTML, CSS and JavaScript\n\n\nCrunch - a modern alternative to Little Man Computer\n\n\nMySQL - learn to store and access persistent data\n\n\nLinux command line interface - the command line using Linux\n\n\nOCR GCSE Computing Theory -  computer science theory for 14 to 16 year olds\n\n\nHigh School Computer Science Course - High School Computer Science based on CSTA Standards and K12 Framework\n\n\n\n\nFor students ages 16-18\n\uf0c1\n\n\n\n\nAn introduction to programming -  Flode, an interactive flowcharting tool\n\n\nAn introduction to programming -  learn to code with Python, JavaScript or Java\n\n\nAn introduction to web development -  HTML, CSS and JavaScript\n\n\nCrunch - a modern alternative to Little Man Computer\n\n\nMySQL - learn to store and access persistent data\n\n\nLinux command line interface - the command line using Linux", 
            "title": "What content do you recommend?"
        }, 
        {
            "location": "/resources/schoolscontent/recommended/#for-students-ages-11-14", 
            "text": "Computational Thinking - create a maze game  An introduction to programming -  Flode, an interactive flowcharting tool  An introduction to programming -  learn to code with Python, JavaScript or Java  Crunch - a modern alternative to Little Man Computer  Middle School Computer Science Course Grades 6-8 - Middle School Computer Science based on CSTA Standards and K12 Framework", 
            "title": "For students ages 11-14"
        }, 
        {
            "location": "/resources/schoolscontent/recommended/#for-students-ages-14-16", 
            "text": "An introduction to programming -  Flode, an interactive flowcharting tool  An introduction to programming -  learn to code with Python, JavaScript or Java  An introduction to web development -  HTML, CSS and JavaScript  Crunch - a modern alternative to Little Man Computer  MySQL - learn to store and access persistent data  Linux command line interface - the command line using Linux  OCR GCSE Computing Theory -  computer science theory for 14 to 16 year olds  High School Computer Science Course - High School Computer Science based on CSTA Standards and K12 Framework", 
            "title": "For students ages 14-16"
        }, 
        {
            "location": "/resources/schoolscontent/recommended/#for-students-ages-16-18", 
            "text": "An introduction to programming -  Flode, an interactive flowcharting tool  An introduction to programming -  learn to code with Python, JavaScript or Java  An introduction to web development -  HTML, CSS and JavaScript  Crunch - a modern alternative to Little Man Computer  MySQL - learn to store and access persistent data  Linux command line interface - the command line using Linux", 
            "title": "For students ages 16-18"
        }, 
        {
            "location": "/resources/schoolscontent/tkinter/", 
            "text": "Important:\n Tkinter is used to build User Interfaces for Python development. For those following the OCR GCSE, this is not a requirement. For more advanced students, OCR and Codio recommend that you use HTML, CSS and Javascript for building modern front-end UIs that have far superior workplace relevance than Python+Tkinter.\n\n\n\n\nThere are a number of teachers who use the Tkinter UI library for Python. Tkinter normally relies on a local PC with a graphics card. Codio, being Cloud based, does not not have graphics cards. Nevertheless, we have implemented a fully functional solution that works within a browser and in the Cloud.\n\n\nThis page describes the various ways you can get Tkinter up and running.\n\n\n\n\nStarter Pack : Clean\n - gives you a clean Tkinter project with preconfigured menu buttons for running your Python file and the viewer.\n\n\nStarter Pack : Widgets\n - gives you a set of demo widgets you can play with.\n\n\nStack\n - gives you an empty project with tkinter ready to run.\n\n\nFrom scratch\n - describes how to make any existing Codio project ready to run Tkinter that was not initially set up to run Tkinter.\n\n\n\n\nStarter Pack : Clean\n\uf0c1\n\n\nPerhaps the best place for most users to start is the \nTKinter Clean\n Starter Pack. This gives you a clean project with a simple demo Python file to play with.\n\n\nHere is a video that runs you through the entire process.\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom the main dashboard, select \nStarter Packs\n on the left, then the Certified tab at the top of the main page.\n\n\n\n\nSearch for \ntkinter\n in the search field then select the \nTKinter Clean\n pack as shown in step 4. above. You will be taken to the new project screen where you can enter a name for your project. Finally, press the \nCreate\n button at the bottom of the page and a new project will be created.\n\n\nOnce it is loaded, follow these steps to see the demo file working.\n\n\n\n\nOpen up \ndemo.py\n in the file tree.\n\n\nIn the Codio menu, press the \nStart Current\n button (the one with the rocket icon next to it). This will run your Python file. It opens a new terminal window, which you should leave open.\n\n\nThe right most Codio menu item should be \nViewer\n. Press this to run the viewer. It will take a few seconds to load.\n\n\n\n\nIf you change your Python code, you will need to close the terminal window and then press the \nStart Current\n button again to reload it. You do not need to reload the Viewer, which will automatically reconnect when you rerun your Python file.\n\n\nStarter Pack - Widgets\n\uf0c1\n\n\nThis gives you a complete set of demo widgets. From the main dashboard, select \nStarter Packs\n on the left, then the Certified tab at the top of the main page.\n\n\n\n\nSearch for \ntkinter\n in the search field then select the \nTKinter Widgets\n pack as shown in step 4. above. You will be taken to the new project screen where you can enter a name for your project. Finally, press the \nCreate\n button at the bottom of the page and a new project will be created.\n\n\nTKinter Widgets\n\uf0c1\n\n\nThis Pack contains a set of widget demo files that you can play with.\n\n\nOnce your project opens, you can quickly play with this in one of 2 ways using the \nRocket\n menu item. This is the Codio menu item with a rocket next to it.\n\n\nFull Widget Demo\n\uf0c1\n\n\n\n\nIn the Codio menu, select 'Start widget.py\u2019.\n\n\nFrom the neighbouring menu item, press \nView widget demo\n.\n\n\n\n\nIndividual python file\n\uf0c1\n\n\n\n\nOpen a python file in the file tree.\n\n\nFrom the neighbouring menu item, press \nView widget demo\n.\n\n\n\n\nStack\n\uf0c1\n\n\nIf you want to create a completely empty Codio project that is Tkinter ready, then go to the Stacks menu item in the main dashboard.\n\n\n\n\nClick on the Certified tab at the top\n\n\nthen search for \ntkinter\n\n\nFinally, select the stack\n\n\nafter which you will be taken to the new project screen. Enter a project name then press the \nCreate\n button at the bottom of the page and a new project will be created.\n\n\n\n\n\n\nThis Stack will not give you any preconfigured buttons (see the above \nStarter Pack: Clean\n for this).\nYou can now create your Python files and run Tkinter. Here are some tips on how to do this.\n\n\nRunning the Python file\n\uf0c1\n\n\nTo run a Python file you will need to use the Terminal or configure you own Codio button shortcut. To use the terminal, open a new Terminal from the \nTools-\nTerminal\n menu item. Then make sure you are in the correct folder and type \npython3 mypythonfile.py\n.\n\n\nOnce this is running, do not close the terminal window or you will terminate the Python process. Go to the right most Codio menu and from the dropdown, select \nBox URL SSL\n. This will open up the viewer.\n\n\nFor information on how to set up your own Codio menu buttons, \nclick here\n.\n\n\nFrom scratch\n\uf0c1\n\n\nFor those of you who want to add Tkinter support to an existing Codio project, you should follow the steps below. Adding the XServer component will add support for any application that writes to the screen.\n\n\n\n\n\n\nOpen the Install Software screen from the \nTools-\nInstall Software\n menu.\n\n\nType \nx server\n into the search box.\n\n\nPress the \nInstall\n button to install the XServer component.\n\n\nWhen the installation has completed (This can take some time, so be patient), \nRestart\n the box\n\n\n\n\nWe would recommend that you configure your \n.codio\n file to have an option to start the viewer. This is \ndescribed here\n. You should either overwrite the entire contents of this file with the content shown below, or if you already have a \n.codio\n file with contents you want to keep, just add the line with the \nViewer\n entry you can see below into the \npreview\n section.\n\n\n{\n  // Configure your Run and Preview buttons here.\n\n  // Run button configuration\n  \ncommands\n: {\n    \nStart Current\n: \npython3 {{filename}}\n\n  },\n\n  // Preview button configuration\n  \npreview\n: {\n    \nViewer\n: \nhttps://{{domain}}:9500/\n\n  }\n}", 
            "title": "Tkinter"
        }, 
        {
            "location": "/resources/schoolscontent/tkinter/#starter-pack-clean", 
            "text": "Perhaps the best place for most users to start is the  TKinter Clean  Starter Pack. This gives you a clean project with a simple demo Python file to play with.  Here is a video that runs you through the entire process.       From the main dashboard, select  Starter Packs  on the left, then the Certified tab at the top of the main page.   Search for  tkinter  in the search field then select the  TKinter Clean  pack as shown in step 4. above. You will be taken to the new project screen where you can enter a name for your project. Finally, press the  Create  button at the bottom of the page and a new project will be created.  Once it is loaded, follow these steps to see the demo file working.   Open up  demo.py  in the file tree.  In the Codio menu, press the  Start Current  button (the one with the rocket icon next to it). This will run your Python file. It opens a new terminal window, which you should leave open.  The right most Codio menu item should be  Viewer . Press this to run the viewer. It will take a few seconds to load.   If you change your Python code, you will need to close the terminal window and then press the  Start Current  button again to reload it. You do not need to reload the Viewer, which will automatically reconnect when you rerun your Python file.", 
            "title": "Starter Pack : Clean"
        }, 
        {
            "location": "/resources/schoolscontent/tkinter/#starter-pack-widgets", 
            "text": "This gives you a complete set of demo widgets. From the main dashboard, select  Starter Packs  on the left, then the Certified tab at the top of the main page.   Search for  tkinter  in the search field then select the  TKinter Widgets  pack as shown in step 4. above. You will be taken to the new project screen where you can enter a name for your project. Finally, press the  Create  button at the bottom of the page and a new project will be created.", 
            "title": "Starter Pack - Widgets"
        }, 
        {
            "location": "/resources/schoolscontent/tkinter/#tkinter-widgets", 
            "text": "This Pack contains a set of widget demo files that you can play with.  Once your project opens, you can quickly play with this in one of 2 ways using the  Rocket  menu item. This is the Codio menu item with a rocket next to it.", 
            "title": "TKinter Widgets"
        }, 
        {
            "location": "/resources/schoolscontent/tkinter/#full-widget-demo", 
            "text": "In the Codio menu, select 'Start widget.py\u2019.  From the neighbouring menu item, press  View widget demo .", 
            "title": "Full Widget Demo"
        }, 
        {
            "location": "/resources/schoolscontent/tkinter/#individual-python-file", 
            "text": "Open a python file in the file tree.  From the neighbouring menu item, press  View widget demo .", 
            "title": "Individual python file"
        }, 
        {
            "location": "/resources/schoolscontent/tkinter/#stack", 
            "text": "If you want to create a completely empty Codio project that is Tkinter ready, then go to the Stacks menu item in the main dashboard.   Click on the Certified tab at the top  then search for  tkinter  Finally, select the stack  after which you will be taken to the new project screen. Enter a project name then press the  Create  button at the bottom of the page and a new project will be created.    This Stack will not give you any preconfigured buttons (see the above  Starter Pack: Clean  for this).\nYou can now create your Python files and run Tkinter. Here are some tips on how to do this.", 
            "title": "Stack"
        }, 
        {
            "location": "/resources/schoolscontent/tkinter/#running-the-python-file", 
            "text": "To run a Python file you will need to use the Terminal or configure you own Codio button shortcut. To use the terminal, open a new Terminal from the  Tools- Terminal  menu item. Then make sure you are in the correct folder and type  python3 mypythonfile.py .  Once this is running, do not close the terminal window or you will terminate the Python process. Go to the right most Codio menu and from the dropdown, select  Box URL SSL . This will open up the viewer.  For information on how to set up your own Codio menu buttons,  click here .", 
            "title": "Running the Python file"
        }, 
        {
            "location": "/resources/schoolscontent/tkinter/#from-scratch", 
            "text": "For those of you who want to add Tkinter support to an existing Codio project, you should follow the steps below. Adding the XServer component will add support for any application that writes to the screen.    Open the Install Software screen from the  Tools- Install Software  menu.  Type  x server  into the search box.  Press the  Install  button to install the XServer component.  When the installation has completed (This can take some time, so be patient),  Restart  the box   We would recommend that you configure your  .codio  file to have an option to start the viewer. This is  described here . You should either overwrite the entire contents of this file with the content shown below, or if you already have a  .codio  file with contents you want to keep, just add the line with the  Viewer  entry you can see below into the  preview  section.  {\n  // Configure your Run and Preview buttons here.\n\n  // Run button configuration\n   commands : {\n     Start Current :  python3 {{filename}} \n  },\n\n  // Preview button configuration\n   preview : {\n     Viewer :  https://{{domain}}:9500/ \n  }\n}", 
            "title": "From scratch"
        }
    ]
}